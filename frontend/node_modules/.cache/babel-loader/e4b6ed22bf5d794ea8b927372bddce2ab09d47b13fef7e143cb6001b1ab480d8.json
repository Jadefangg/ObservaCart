{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { BoundCounter } from './BoundInstrument';\nimport { MetricKind } from './export/types';\nimport { Metric } from './Metric';\n/** This is a SDK implementation of Counter Metric. */\nvar CounterMetric = /** @class */function (_super) {\n  __extends(CounterMetric, _super);\n  function CounterMetric(name, options, _processor, resource, instrumentationLibrary) {\n    var _this = _super.call(this, name, options, MetricKind.COUNTER, resource, instrumentationLibrary) || this;\n    _this._processor = _processor;\n    return _this;\n  }\n  CounterMetric.prototype._makeInstrument = function (labels) {\n    return new BoundCounter(labels, this._disabled, this._valueType, this._processor.aggregatorFor(this._descriptor));\n  };\n  /**\n   * Adds the given value to the current value. Values cannot be negative.\n   * @param value the value to add.\n   * @param [labels = {}] key-values pairs that are associated with a specific metric\n   *     that you want to record.\n   */\n  CounterMetric.prototype.add = function (value, labels) {\n    if (labels === void 0) {\n      labels = {};\n    }\n    this.bind(labels).add(value);\n  };\n  return CounterMetric;\n}(Metric);\nexport { CounterMetric };","map":{"version":3,"names":["BoundCounter","MetricKind","Metric","CounterMetric","_super","__extends","name","options","_processor","resource","instrumentationLibrary","_this","call","COUNTER","prototype","_makeInstrument","labels","_disabled","_valueType","aggregatorFor","_descriptor","add","value","bind"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-metrics-base\\src\\CounterMetric.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { BoundCounter } from './BoundInstrument';\nimport { Processor } from './export/Processor';\nimport { MetricKind } from './export/types';\nimport { Metric } from './Metric';\n\n/** This is a SDK implementation of Counter Metric. */\nexport class CounterMetric extends Metric<BoundCounter> implements api.Counter {\n  constructor(\n    name: string,\n    options: api.MetricOptions,\n    private readonly _processor: Processor,\n    resource: Resource,\n    instrumentationLibrary: InstrumentationLibrary\n  ) {\n    super(name, options, MetricKind.COUNTER, resource, instrumentationLibrary);\n  }\n  protected _makeInstrument(labels: api.Labels): BoundCounter {\n    return new BoundCounter(\n      labels,\n      this._disabled,\n      this._valueType,\n      this._processor.aggregatorFor(this._descriptor)\n    );\n  }\n\n  /**\n   * Adds the given value to the current value. Values cannot be negative.\n   * @param value the value to add.\n   * @param [labels = {}] key-values pairs that are associated with a specific metric\n   *     that you want to record.\n   */\n  add(value: number, labels: api.Labels = {}): void {\n    this.bind(labels).add(value);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,SAASA,YAAY,QAAQ,mBAAmB;AAEhD,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,MAAM,QAAQ,UAAU;AAEjC;AACA,IAAAC,aAAA,0BAAAC,MAAA;EAAmCC,SAAA,CAAAF,aAAA,EAAAC,MAAA;EACjC,SAAAD,cACEG,IAAY,EACZC,OAA0B,EACTC,UAAqB,EACtCC,QAAkB,EAClBC,sBAA8C;IALhD,IAAAC,KAAA,GAOEP,MAAA,CAAAQ,IAAA,OAAMN,IAAI,EAAEC,OAAO,EAAEN,UAAU,CAACY,OAAO,EAAEJ,QAAQ,EAAEC,sBAAsB,CAAC;IAJzDC,KAAA,CAAAH,UAAU,GAAVA,UAAU;;EAK7B;EACUL,aAAA,CAAAW,SAAA,CAAAC,eAAe,GAAzB,UAA0BC,MAAkB;IAC1C,OAAO,IAAIhB,YAAY,CACrBgB,MAAM,EACN,IAAI,CAACC,SAAS,EACd,IAAI,CAACC,UAAU,EACf,IAAI,CAACV,UAAU,CAACW,aAAa,CAAC,IAAI,CAACC,WAAW,CAAC,CAChD;EACH,CAAC;EAED;;;;;;EAMAjB,aAAA,CAAAW,SAAA,CAAAO,GAAG,GAAH,UAAIC,KAAa,EAAEN,MAAuB;IAAvB,IAAAA,MAAA;MAAAA,MAAA,KAAuB;IAAA;IACxC,IAAI,CAACO,IAAI,CAACP,MAAM,CAAC,CAACK,GAAG,CAACC,KAAK,CAAC;EAC9B,CAAC;EACH,OAAAnB,aAAC;AAAD,CAAC,CA5BkCD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}