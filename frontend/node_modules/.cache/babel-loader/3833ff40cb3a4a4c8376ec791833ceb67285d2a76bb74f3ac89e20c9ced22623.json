{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { API_BACKWARDS_COMPATIBILITY_VERSION, GLOBAL_LOGS_API_KEY, _global, makeGetter } from '../internal/global-utils';\nimport { NOOP_LOGGER_PROVIDER } from '../NoopLoggerProvider';\nimport { ProxyLoggerProvider } from '../ProxyLoggerProvider';\nexport class LogsAPI {\n  constructor() {\n    this._proxyLoggerProvider = new ProxyLoggerProvider();\n  }\n  static getInstance() {\n    if (!this._instance) {\n      this._instance = new LogsAPI();\n    }\n    return this._instance;\n  }\n  setGlobalLoggerProvider(provider) {\n    if (_global[GLOBAL_LOGS_API_KEY]) {\n      return this.getLoggerProvider();\n    }\n    _global[GLOBAL_LOGS_API_KEY] = makeGetter(API_BACKWARDS_COMPATIBILITY_VERSION, provider, NOOP_LOGGER_PROVIDER);\n    this._proxyLoggerProvider.setDelegate(provider);\n    return provider;\n  }\n  /**\n   * Returns the global logger provider.\n   *\n   * @returns LoggerProvider\n   */\n  getLoggerProvider() {\n    var _a, _b;\n    return (_b = (_a = _global[GLOBAL_LOGS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_global, API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : this._proxyLoggerProvider;\n  }\n  /**\n   * Returns a logger from the global logger provider.\n   *\n   * @returns Logger\n   */\n  getLogger(name, version, options) {\n    return this.getLoggerProvider().getLogger(name, version, options);\n  }\n  /** Remove the global logger provider */\n  disable() {\n    delete _global[GLOBAL_LOGS_API_KEY];\n    this._proxyLoggerProvider = new ProxyLoggerProvider();\n  }\n}","map":{"version":3,"names":["API_BACKWARDS_COMPATIBILITY_VERSION","GLOBAL_LOGS_API_KEY","_global","makeGetter","NOOP_LOGGER_PROVIDER","ProxyLoggerProvider","LogsAPI","constructor","_proxyLoggerProvider","getInstance","_instance","setGlobalLoggerProvider","provider","getLoggerProvider","setDelegate","_b","_a","call","getLogger","name","version","options","disable"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\api-logs\\src\\api\\logs.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  API_BACKWARDS_COMPATIBILITY_VERSION,\n  GLOBAL_LOGS_API_KEY,\n  _global,\n  makeGetter,\n} from '../internal/global-utils';\nimport { LoggerProvider } from '../types/LoggerProvider';\nimport { NOOP_LOGGER_PROVIDER } from '../NoopLoggerProvider';\nimport { Logger } from '../types/Logger';\nimport { LoggerOptions } from '../types/LoggerOptions';\nimport { ProxyLoggerProvider } from '../ProxyLoggerProvider';\n\nexport class LogsAPI {\n  private static _instance?: LogsAPI;\n\n  private _proxyLoggerProvider = new ProxyLoggerProvider();\n\n  private constructor() {}\n\n  public static getInstance(): LogsAPI {\n    if (!this._instance) {\n      this._instance = new LogsAPI();\n    }\n\n    return this._instance;\n  }\n\n  public setGlobalLoggerProvider(provider: LoggerProvider): LoggerProvider {\n    if (_global[GLOBAL_LOGS_API_KEY]) {\n      return this.getLoggerProvider();\n    }\n\n    _global[GLOBAL_LOGS_API_KEY] = makeGetter<LoggerProvider>(\n      API_BACKWARDS_COMPATIBILITY_VERSION,\n      provider,\n      NOOP_LOGGER_PROVIDER\n    );\n    this._proxyLoggerProvider.setDelegate(provider);\n\n    return provider;\n  }\n\n  /**\n   * Returns the global logger provider.\n   *\n   * @returns LoggerProvider\n   */\n  public getLoggerProvider(): LoggerProvider {\n    return (\n      _global[GLOBAL_LOGS_API_KEY]?.(API_BACKWARDS_COMPATIBILITY_VERSION) ??\n      this._proxyLoggerProvider\n    );\n  }\n\n  /**\n   * Returns a logger from the global logger provider.\n   *\n   * @returns Logger\n   */\n  public getLogger(\n    name: string,\n    version?: string,\n    options?: LoggerOptions\n  ): Logger {\n    return this.getLoggerProvider().getLogger(name, version, options);\n  }\n\n  /** Remove the global logger provider */\n  public disable(): void {\n    delete _global[GLOBAL_LOGS_API_KEY];\n    this._proxyLoggerProvider = new ProxyLoggerProvider();\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SACEA,mCAAmC,EACnCC,mBAAmB,EACnBC,OAAO,EACPC,UAAU,QACL,0BAA0B;AAEjC,SAASC,oBAAoB,QAAQ,uBAAuB;AAG5D,SAASC,mBAAmB,QAAQ,wBAAwB;AAE5D,OAAM,MAAOC,OAAO;EAKlBC,YAAA;IAFQ,KAAAC,oBAAoB,GAAG,IAAIH,mBAAmB,EAAE;EAEjC;EAEhB,OAAOI,WAAWA,CAAA;IACvB,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAG,IAAIJ,OAAO,EAAE;;IAGhC,OAAO,IAAI,CAACI,SAAS;EACvB;EAEOC,uBAAuBA,CAACC,QAAwB;IACrD,IAAIV,OAAO,CAACD,mBAAmB,CAAC,EAAE;MAChC,OAAO,IAAI,CAACY,iBAAiB,EAAE;;IAGjCX,OAAO,CAACD,mBAAmB,CAAC,GAAGE,UAAU,CACvCH,mCAAmC,EACnCY,QAAQ,EACRR,oBAAoB,CACrB;IACD,IAAI,CAACI,oBAAoB,CAACM,WAAW,CAACF,QAAQ,CAAC;IAE/C,OAAOA,QAAQ;EACjB;EAEA;;;;;EAKOC,iBAAiBA,CAAA;;IACtB,OACE,CAAAE,EAAA,IAAAC,EAAA,GAAAd,OAAO,CAACD,mBAAmB,CAAC,cAAAe,EAAA,uBAAAA,EAAA,CAAAC,IAAA,CAAAf,OAAA,EAAGF,mCAAmC,CAAC,cAAAe,EAAA,cAAAA,EAAA,GACnE,IAAI,CAACP,oBAAoB;EAE7B;EAEA;;;;;EAKOU,SAASA,CACdC,IAAY,EACZC,OAAgB,EAChBC,OAAuB;IAEvB,OAAO,IAAI,CAACR,iBAAiB,EAAE,CAACK,SAAS,CAACC,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;EACnE;EAEA;EACOC,OAAOA,CAAA;IACZ,OAAOpB,OAAO,CAACD,mBAAmB,CAAC;IACnC,IAAI,CAACO,oBAAoB,GAAG,IAAIH,mBAAmB,EAAE;EACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}