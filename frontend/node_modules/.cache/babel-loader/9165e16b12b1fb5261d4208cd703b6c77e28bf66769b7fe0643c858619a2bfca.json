{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nexport function sanitizeAttributes(attributes) {\n  const out = {};\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n  return out;\n}\nexport function isAttributeKey(key) {\n  return typeof key === 'string' && key.length > 0;\n}\nexport function isAttributeValue(val) {\n  if (val == null) {\n    return true;\n  }\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n  return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n  let type;\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n    if (typeof element === type) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n  return false;\n}","map":{"version":3,"names":["diag","sanitizeAttributes","attributes","out","key","val","Object","entries","isAttributeKey","warn","isAttributeValue","Array","isArray","slice","length","isHomogeneousAttributeValueArray","isValidPrimitiveAttributeValue","arr","type","element"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\instrumentation-xml-http-request\\node_modules\\@opentelemetry\\core\\src\\common\\attributes.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, AttributeValue, Attributes } from '@opentelemetry/api';\n\nexport function sanitizeAttributes(attributes: unknown): Attributes {\n  const out: Attributes = {};\n\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n\n  return out;\n}\n\nexport function isAttributeKey(key: unknown): key is string {\n  return typeof key === 'string' && key.length > 0;\n}\n\nexport function isAttributeValue(val: unknown): val is AttributeValue {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr: unknown[]): boolean {\n  let type: string | undefined;\n\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val: unknown): boolean {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n\n  return false;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,IAAI,QAAoC,oBAAoB;AAErE,OAAM,SAAUC,kBAAkBA,CAACC,UAAmB;EACpD,MAAMC,GAAG,GAAe,EAAE;EAE1B,IAAI,OAAOD,UAAU,KAAK,QAAQ,IAAIA,UAAU,IAAI,IAAI,EAAE;IACxD,OAAOC,GAAG;;EAGZ,KAAK,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,UAAU,CAAC,EAAE;IACnD,IAAI,CAACM,cAAc,CAACJ,GAAG,CAAC,EAAE;MACxBJ,IAAI,CAACS,IAAI,CAAC,0BAA0BL,GAAG,EAAE,CAAC;MAC1C;;IAEF,IAAI,CAACM,gBAAgB,CAACL,GAAG,CAAC,EAAE;MAC1BL,IAAI,CAACS,IAAI,CAAC,wCAAwCL,GAAG,EAAE,CAAC;MACxD;;IAEF,IAAIO,KAAK,CAACC,OAAO,CAACP,GAAG,CAAC,EAAE;MACtBF,GAAG,CAACC,GAAG,CAAC,GAAGC,GAAG,CAACQ,KAAK,EAAE;KACvB,MAAM;MACLV,GAAG,CAACC,GAAG,CAAC,GAAGC,GAAG;;;EAIlB,OAAOF,GAAG;AACZ;AAEA,OAAM,SAAUK,cAAcA,CAACJ,GAAY;EACzC,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACU,MAAM,GAAG,CAAC;AAClD;AAEA,OAAM,SAAUJ,gBAAgBA,CAACL,GAAY;EAC3C,IAAIA,GAAG,IAAI,IAAI,EAAE;IACf,OAAO,IAAI;;EAGb,IAAIM,KAAK,CAACC,OAAO,CAACP,GAAG,CAAC,EAAE;IACtB,OAAOU,gCAAgC,CAACV,GAAG,CAAC;;EAG9C,OAAOW,8BAA8B,CAACX,GAAG,CAAC;AAC5C;AAEA,SAASU,gCAAgCA,CAACE,GAAc;EACtD,IAAIC,IAAwB;EAE5B,KAAK,MAAMC,OAAO,IAAIF,GAAG,EAAE;IACzB;IACA,IAAIE,OAAO,IAAI,IAAI,EAAE;IAErB,IAAI,CAACD,IAAI,EAAE;MACT,IAAIF,8BAA8B,CAACG,OAAO,CAAC,EAAE;QAC3CD,IAAI,GAAG,OAAOC,OAAO;QACrB;;MAEF;MACA,OAAO,KAAK;;IAGd,IAAI,OAAOA,OAAO,KAAKD,IAAI,EAAE;MAC3B;;IAGF,OAAO,KAAK;;EAGd,OAAO,IAAI;AACb;AAEA,SAASF,8BAA8BA,CAACX,GAAY;EAClD,QAAQ,OAAOA,GAAG;IAChB,KAAK,QAAQ;IACb,KAAK,SAAS;IACd,KAAK,QAAQ;MACX,OAAO,IAAI;;EAGf,OAAO,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}