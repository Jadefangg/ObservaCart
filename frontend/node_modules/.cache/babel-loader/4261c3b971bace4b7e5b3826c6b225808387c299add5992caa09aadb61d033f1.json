{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */function () {\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  function CompositePropagator(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _a;\n    this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n    this._fields = Array.from(new Set(this._propagators\n    // older propagators may not have fields function, null check to be sure\n    .map(function (p) {\n      return typeof p.fields === 'function' ? p.fields() : [];\n    }).reduce(function (x, y) {\n      return x.concat(y);\n    }, [])));\n  }\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  CompositePropagator.prototype.inject = function (context, carrier, setter) {\n    for (var _i = 0, _a = this._propagators; _i < _a.length; _i++) {\n      var propagator = _a[_i];\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n      }\n    }\n  };\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  CompositePropagator.prototype.extract = function (context, carrier, getter) {\n    return this._propagators.reduce(function (ctx, propagator) {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n      }\n      return ctx;\n    }, context);\n  };\n  CompositePropagator.prototype.fields = function () {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  };\n  return CompositePropagator;\n}();\nexport { CompositePropagator };","map":{"version":3,"names":["diag","CompositePropagator","config","_propagators","_a","propagators","_fields","Array","from","Set","map","p","fields","reduce","x","y","concat","prototype","inject","context","carrier","setter","_i","length","propagator","err","warn","constructor","name","message","extract","getter","ctx","slice"],"sources":["../../../src/propagation/composite.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAIEA,IAAI,QAEC,oBAAoB;AAY3B;AACA,IAAAC,mBAAA;EAIE;;;;;EAKA,SAAAA,oBAAYC,MAAsC;IAAtC,IAAAA,MAAA;MAAAA,MAAA,KAAsC;IAAA;;IAChD,IAAI,CAACC,YAAY,GAAG,CAAAC,EAAA,GAAAF,MAAM,CAACG,WAAW,cAAAD,EAAA,cAAAA,EAAA,GAAI,EAAE;IAE5C,IAAI,CAACE,OAAO,GAAGC,KAAK,CAACC,IAAI,CACvB,IAAIC,GAAG,CACL,IAAI,CAACN;IACH;IAAA,CACCO,GAAG,CAAC,UAAAC,CAAC;MAAI,OAAC,OAAOA,CAAC,CAACC,MAAM,KAAK,UAAU,GAAGD,CAAC,CAACC,MAAM,EAAE,GAAG,EAAE;IAAjD,CAAkD,CAAC,CAC5DC,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAK,OAAAD,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC;IAAX,CAAW,EAAE,EAAE,CAAC,CACrC,CACF;EACH;EAEA;;;;;;;;;EASAd,mBAAA,CAAAgB,SAAA,CAAAC,MAAM,GAAN,UAAOC,OAAgB,EAAEC,OAAgB,EAAEC,MAAqB;IAC9D,KAAyB,IAAAC,EAAA,IAAiB,EAAjBlB,EAAA,OAAI,CAACD,YAAY,EAAjBmB,EAAA,GAAAlB,EAAA,CAAAmB,MAAiB,EAAjBD,EAAA,EAAiB,EAAE;MAAvC,IAAME,UAAU,GAAApB,EAAA,CAAAkB,EAAA;MACnB,IAAI;QACFE,UAAU,CAACN,MAAM,CAACC,OAAO,EAAEC,OAAO,EAAEC,MAAM,CAAC;OAC5C,CAAC,OAAOI,GAAG,EAAE;QACZzB,IAAI,CAAC0B,IAAI,CACP,2BAAyBF,UAAU,CAACG,WAAW,CAACC,IAAI,eAAUH,GAAG,CAACI,OAAS,CAC5E;;;EAGP,CAAC;EAED;;;;;;;;;EASA5B,mBAAA,CAAAgB,SAAA,CAAAa,OAAO,GAAP,UAAQX,OAAgB,EAAEC,OAAgB,EAAEW,MAAqB;IAC/D,OAAO,IAAI,CAAC5B,YAAY,CAACU,MAAM,CAAC,UAACmB,GAAG,EAAER,UAAU;MAC9C,IAAI;QACF,OAAOA,UAAU,CAACM,OAAO,CAACE,GAAG,EAAEZ,OAAO,EAAEW,MAAM,CAAC;OAChD,CAAC,OAAON,GAAG,EAAE;QACZzB,IAAI,CAAC0B,IAAI,CACP,2BAAyBF,UAAU,CAACG,WAAW,CAACC,IAAI,eAAUH,GAAG,CAACI,OAAS,CAC5E;;MAEH,OAAOG,GAAG;IACZ,CAAC,EAAEb,OAAO,CAAC;EACb,CAAC;EAEDlB,mBAAA,CAAAgB,SAAA,CAAAL,MAAM,GAAN;IACE;IACA,OAAO,IAAI,CAACN,OAAO,CAAC2B,KAAK,EAAE;EAC7B,CAAC;EACH,OAAAhC,mBAAC;AAAD,CAAC,CArED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}