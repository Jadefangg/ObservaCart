{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nexport class NoopSpanProcessor {\n  onStart(_span, _context) {}\n  onEnd(_span) {}\n  shutdown() {\n    return Promise.resolve();\n  }\n  forceFlush() {\n    return Promise.resolve();\n  }\n}","map":{"version":3,"names":["NoopSpanProcessor","onStart","_span","_context","onEnd","shutdown","Promise","resolve","forceFlush"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-web\\node_modules\\@opentelemetry\\sdk-trace-base\\src\\export\\NoopSpanProcessor.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { ReadableSpan } from './ReadableSpan';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\n\n/** No-op implementation of SpanProcessor */\nexport class NoopSpanProcessor implements SpanProcessor {\n  onStart(_span: Span, _context: Context): void {}\n  onEnd(_span: ReadableSpan): void {}\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAqBA;AACA,OAAM,MAAOA,iBAAiB;EAC5BC,OAAOA,CAACC,KAAW,EAAEC,QAAiB,GAAS;EAC/CC,KAAKA,CAACF,KAAmB,GAAS;EAClCG,QAAQA,CAAA;IACN,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B;EACAC,UAAUA,CAAA;IACR,OAAOF,OAAO,CAACC,OAAO,EAAE;EAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}