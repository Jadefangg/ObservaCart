{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message) {\n    super(message);\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout(promise, timeout) {\n  let timeoutHandle;\n  const timeoutPromise = new Promise(function timeoutFunction(_resolve, reject) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutHandle);\n    return result;\n  }, reason => {\n    clearTimeout(timeoutHandle);\n    throw reason;\n  });\n}","map":{"version":3,"names":["TimeoutError","Error","constructor","message","Object","setPrototypeOf","prototype","callWithTimeout","promise","timeout","timeoutHandle","timeoutPromise","Promise","timeoutFunction","_resolve","reject","setTimeout","timeoutHandler","race","then","result","clearTimeout","reason"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\instrumentation-xml-http-request\\node_modules\\@opentelemetry\\core\\src\\utils\\timeout.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA;;;AAGA,OAAM,MAAOA,YAAa,SAAQC,KAAK;EACrCC,YAAYC,OAAgB;IAC1B,KAAK,CAACA,OAAO,CAAC;IAEd;IACA;IACAC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEL,YAAY,CAACM,SAAS,CAAC;EACrD;;AAGF;;;;;;;;;AASA,OAAM,SAAUC,eAAeA,CAC7BC,OAAmB,EACnBC,OAAe;EAEf,IAAIC,aAA4C;EAEhD,MAAMC,cAAc,GAAG,IAAIC,OAAO,CAAQ,SAASC,eAAeA,CAChEC,QAAQ,EACRC,MAAM;IAENL,aAAa,GAAGM,UAAU,CAAC,SAASC,cAAcA,CAAA;MAChDF,MAAM,CAAC,IAAIf,YAAY,CAAC,sBAAsB,CAAC,CAAC;IAClD,CAAC,EAAES,OAAO,CAAC;EACb,CAAC,CAAC;EAEF,OAAOG,OAAO,CAACM,IAAI,CAAC,CAACV,OAAO,EAAEG,cAAc,CAAC,CAAC,CAACQ,IAAI,CACjDC,MAAM,IAAG;IACPC,YAAY,CAACX,aAAa,CAAC;IAC3B,OAAOU,MAAM;EACf,CAAC,EACDE,MAAM,IAAG;IACPD,YAAY,CAACX,aAAa,CAAC;IAC3B,MAAMY,MAAM;EACd,CAAC,CACF;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}