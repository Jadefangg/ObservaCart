{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nexport class StackContextManager {\n  /**\n   * whether the context manager is enabled or not\n   */\n  _enabled = false;\n  /**\n   * Keeps the reference to current context\n   */\n  _currentContext = ROOT_CONTEXT;\n  /**\n   *\n   * @param context\n   * @param target Function to be executed within the context\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  _bindFunction(context = ROOT_CONTEXT, target) {\n    const manager = this;\n    const contextWrapper = function (...args) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length\n    });\n    return contextWrapper;\n  }\n  /**\n   * Returns the active context\n   */\n  active() {\n    return this._currentContext;\n  }\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind(context, target) {\n    // if no specific context to propagate is given, we use the current one\n    if (context === undefined) {\n      context = this.active();\n    }\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n  /**\n   * Disable the context manager (clears the current context)\n   */\n  disable() {\n    this._currentContext = ROOT_CONTEXT;\n    this._enabled = false;\n    return this;\n  }\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n  enable() {\n    if (this._enabled) {\n      return this;\n    }\n    this._enabled = true;\n    this._currentContext = ROOT_CONTEXT;\n    return this;\n  }\n  /**\n   * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n   * The context will be set as active\n   * @param context\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  with(context, fn, thisArg, ...args) {\n    const previousContext = this._currentContext;\n    this._currentContext = context || ROOT_CONTEXT;\n    try {\n      return fn.call(thisArg, ...args);\n    } finally {\n      this._currentContext = previousContext;\n    }\n  }\n}","map":{"version":3,"names":["ROOT_CONTEXT","StackContextManager","_enabled","_currentContext","_bindFunction","context","target","manager","contextWrapper","args","with","apply","Object","defineProperty","enumerable","configurable","writable","value","length","active","bind","undefined","disable","enable","fn","thisArg","previousContext","call"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-web\\src\\StackContextManager.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ContextManager, ROOT_CONTEXT } from '@opentelemetry/api';\n\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nexport class StackContextManager implements ContextManager {\n  /**\n   * whether the context manager is enabled or not\n   */\n  private _enabled = false;\n\n  /**\n   * Keeps the reference to current context\n   */\n  public _currentContext = ROOT_CONTEXT;\n\n  /**\n   *\n   * @param context\n   * @param target Function to be executed within the context\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _bindFunction<T extends Function>(\n    context = ROOT_CONTEXT,\n    target: T\n  ): T {\n    const manager = this;\n    const contextWrapper = function (this: unknown, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    return contextWrapper as unknown as T;\n  }\n\n  /**\n   * Returns the active context\n   */\n  active(): Context {\n    return this._currentContext;\n  }\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    // if no specific context to propagate is given, we use the current one\n    if (context === undefined) {\n      context = this.active();\n    }\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  /**\n   * Disable the context manager (clears the current context)\n   */\n  disable(): this {\n    this._currentContext = ROOT_CONTEXT;\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n  enable(): this {\n    if (this._enabled) {\n      return this;\n    }\n    this._enabled = true;\n    this._currentContext = ROOT_CONTEXT;\n    return this;\n  }\n\n  /**\n   * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n   * The context will be set as active\n   * @param context\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context | null,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const previousContext = this._currentContext;\n    this._currentContext = context || ROOT_CONTEXT;\n\n    try {\n      return fn.call(thisArg, ...args);\n    } finally {\n      this._currentContext = previousContext;\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAAkCA,YAAY,QAAQ,oBAAoB;AAE1E;;;;AAIA,OAAM,MAAOC,mBAAmB;EAC9B;;;EAGQC,QAAQ,GAAG,KAAK;EAExB;;;EAGOC,eAAe,GAAGH,YAAY;EAErC;;;;;EAKA;EACQI,aAAaA,CACnBC,OAAO,GAAGL,YAAY,EACtBM,MAAS;IAET,MAAMC,OAAO,GAAG,IAAI;IACpB,MAAMC,cAAc,GAAG,SAAAA,CAAyB,GAAGC,IAAe;MAChE,OAAOF,OAAO,CAACG,IAAI,CAACL,OAAO,EAAE,MAAMC,MAAM,CAACK,KAAK,CAAC,IAAI,EAAEF,IAAI,CAAC,CAAC;IAC9D,CAAC;IACDG,MAAM,CAACC,cAAc,CAACL,cAAc,EAAE,QAAQ,EAAE;MAC9CM,UAAU,EAAE,KAAK;MACjBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,KAAK;MACfC,KAAK,EAAEX,MAAM,CAACY;KACf,CAAC;IACF,OAAOV,cAA8B;EACvC;EAEA;;;EAGAW,MAAMA,CAAA;IACJ,OAAO,IAAI,CAAChB,eAAe;EAC7B;EAEA;;;;;;EAMAiB,IAAIA,CAAIf,OAAgB,EAAEC,MAAS;IACjC;IACA,IAAID,OAAO,KAAKgB,SAAS,EAAE;MACzBhB,OAAO,GAAG,IAAI,CAACc,MAAM,EAAE;;IAEzB,IAAI,OAAOb,MAAM,KAAK,UAAU,EAAE;MAChC,OAAO,IAAI,CAACF,aAAa,CAACC,OAAO,EAAEC,MAAM,CAAC;;IAE5C,OAAOA,MAAM;EACf;EAEA;;;EAGAgB,OAAOA,CAAA;IACL,IAAI,CAACnB,eAAe,GAAGH,YAAY;IACnC,IAAI,CAACE,QAAQ,GAAG,KAAK;IACrB,OAAO,IAAI;EACb;EAEA;;;EAGAqB,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACrB,QAAQ,EAAE;MACjB,OAAO,IAAI;;IAEb,IAAI,CAACA,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,eAAe,GAAGH,YAAY;IACnC,OAAO,IAAI;EACb;EAEA;;;;;;;;EAQAU,IAAIA,CACFL,OAAuB,EACvBmB,EAAK,EACLC,OAA8B,EAC9B,GAAGhB,IAAO;IAEV,MAAMiB,eAAe,GAAG,IAAI,CAACvB,eAAe;IAC5C,IAAI,CAACA,eAAe,GAAGE,OAAO,IAAIL,YAAY;IAE9C,IAAI;MACF,OAAOwB,EAAE,CAACG,IAAI,CAACF,OAAO,EAAE,GAAGhB,IAAI,CAAC;KACjC,SAAS;MACR,IAAI,CAACN,eAAe,GAAGuB,eAAe;;EAE1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}