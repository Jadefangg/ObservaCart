{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { AlwaysOffSampler, AlwaysOnSampler, getEnv, TracesSamplerValues, ParentBasedSampler, TraceIdRatioBasedSampler } from '@opentelemetry/core';\nvar env = getEnv();\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\n/**\n * Default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\nexport var DEFAULT_CONFIG = {\n  sampler: buildSamplerFromEnv(env),\n  forceFlushTimeoutMillis: 30000,\n  spanLimits: {\n    attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n    linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n    eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT\n  }\n};\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param env optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(env) {\n  if (env === void 0) {\n    env = getEnv();\n  }\n  switch (env.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler()\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler()\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(env));\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(env))\n      });\n    default:\n      diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + env.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n      return new AlwaysOnSampler();\n  }\n}\nvar DEFAULT_RATIO = 1;\nfunction getSamplerProbabilityFromEnv(env) {\n  if (env.OTEL_TRACES_SAMPLER_ARG === undefined || env.OTEL_TRACES_SAMPLER_ARG === '') {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  var probability = Number(env.OTEL_TRACES_SAMPLER_ARG);\n  if (isNaN(probability)) {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + env.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  if (probability < 0 || probability > 1) {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + env.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  return probability;\n}","map":{"version":3,"names":["diag","AlwaysOffSampler","AlwaysOnSampler","getEnv","TracesSamplerValues","ParentBasedSampler","TraceIdRatioBasedSampler","env","FALLBACK_OTEL_TRACES_SAMPLER","AlwaysOn","DEFAULT_CONFIG","sampler","buildSamplerFromEnv","forceFlushTimeoutMillis","spanLimits","attributeCountLimit","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","linkCountLimit","OTEL_SPAN_LINK_COUNT_LIMIT","eventCountLimit","OTEL_SPAN_EVENT_COUNT_LIMIT","OTEL_TRACES_SAMPLER","AlwaysOff","ParentBasedAlwaysOn","root","ParentBasedAlwaysOff","TraceIdRatio","getSamplerProbabilityFromEnv","ParentBasedTraceIdRatio","error","DEFAULT_RATIO","OTEL_TRACES_SAMPLER_ARG","undefined","probability","Number","isNaN"],"sources":["../../src/config.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,IAAI,QAAiB,oBAAoB;AAClD,SACEC,gBAAgB,EAChBC,eAAe,EACfC,MAAM,EACNC,mBAAmB,EACnBC,kBAAkB,EAElBC,wBAAwB,QACnB,qBAAqB;AAE5B,IAAMC,GAAG,GAAGJ,MAAM,EAAE;AACpB,IAAMK,4BAA4B,GAAGJ,mBAAmB,CAACK,QAAQ;AAEjE;;;;;;AAMA,OAAO,IAAMC,cAAc,GAAG;EAC5BC,OAAO,EAAEC,mBAAmB,CAACL,GAAG,CAAC;EACjCM,uBAAuB,EAAE,KAAK;EAC9BC,UAAU,EAAE;IACVC,mBAAmB,EAAEZ,MAAM,EAAE,CAACa,+BAA+B;IAC7DC,cAAc,EAAEd,MAAM,EAAE,CAACe,0BAA0B;IACnDC,eAAe,EAAEhB,MAAM,EAAE,CAACiB;;CAE7B;AAED;;;;AAIA,OAAM,SAAUR,mBAAmBA,CACjCL,GAAqC;EAArC,IAAAA,GAAA;IAAAA,GAAA,GAA6BJ,MAAM,EAAE;EAAA;EAErC,QAAQI,GAAG,CAACc,mBAAmB;IAC7B,KAAKjB,mBAAmB,CAACK,QAAQ;MAC/B,OAAO,IAAIP,eAAe,EAAE;IAC9B,KAAKE,mBAAmB,CAACkB,SAAS;MAChC,OAAO,IAAIrB,gBAAgB,EAAE;IAC/B,KAAKG,mBAAmB,CAACmB,mBAAmB;MAC1C,OAAO,IAAIlB,kBAAkB,CAAC;QAC5BmB,IAAI,EAAE,IAAItB,eAAe;OAC1B,CAAC;IACJ,KAAKE,mBAAmB,CAACqB,oBAAoB;MAC3C,OAAO,IAAIpB,kBAAkB,CAAC;QAC5BmB,IAAI,EAAE,IAAIvB,gBAAgB;OAC3B,CAAC;IACJ,KAAKG,mBAAmB,CAACsB,YAAY;MACnC,OAAO,IAAIpB,wBAAwB,CAACqB,4BAA4B,CAACpB,GAAG,CAAC,CAAC;IACxE,KAAKH,mBAAmB,CAACwB,uBAAuB;MAC9C,OAAO,IAAIvB,kBAAkB,CAAC;QAC5BmB,IAAI,EAAE,IAAIlB,wBAAwB,CAACqB,4BAA4B,CAACpB,GAAG,CAAC;OACrE,CAAC;IACJ;MACEP,IAAI,CAAC6B,KAAK,CACR,iCAA8BtB,GAAG,CAACc,mBAAmB,gCAA2Bb,4BAA4B,QAAI,CACjH;MACD,OAAO,IAAIN,eAAe,EAAE;;AAElC;AAEA,IAAM4B,aAAa,GAAG,CAAC;AAEvB,SAASH,4BAA4BA,CACnCpB,GAA0B;EAE1B,IACEA,GAAG,CAACwB,uBAAuB,KAAKC,SAAS,IACzCzB,GAAG,CAACwB,uBAAuB,KAAK,EAAE,EAClC;IACA/B,IAAI,CAAC6B,KAAK,CACR,qDAAmDC,aAAa,MAAG,CACpE;IACD,OAAOA,aAAa;;EAGtB,IAAMG,WAAW,GAAGC,MAAM,CAAC3B,GAAG,CAACwB,uBAAuB,CAAC;EAEvD,IAAII,KAAK,CAACF,WAAW,CAAC,EAAE;IACtBjC,IAAI,CAAC6B,KAAK,CACR,6BAA2BtB,GAAG,CAACwB,uBAAuB,qDAAgDD,aAAa,MAAG,CACvH;IACD,OAAOA,aAAa;;EAGtB,IAAIG,WAAW,GAAG,CAAC,IAAIA,WAAW,GAAG,CAAC,EAAE;IACtCjC,IAAI,CAAC6B,KAAK,CACR,6BAA2BtB,GAAG,CAACwB,uBAAuB,mEAA8DD,aAAa,MAAG,CACrI;IACD,OAAOA,aAAa;;EAGtB,OAAOG,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}