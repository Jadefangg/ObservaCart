{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples all traces. */\nexport class AlwaysOnSampler {\n  shouldSample() {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED\n    };\n  }\n  toString() {\n    return 'AlwaysOnSampler';\n  }\n}","map":{"version":3,"names":["SamplingDecision","AlwaysOnSampler","shouldSample","decision","RECORD_AND_SAMPLED","toString"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-base\\src\\sampler\\AlwaysOnSampler.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples all traces. */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAAkBA,gBAAgB,QAAwB,YAAY;AAEtE;AACA,OAAM,MAAOC,eAAe;EAC1BC,YAAYA,CAAA;IACV,OAAO;MACLC,QAAQ,EAAEH,gBAAgB,CAACI;KAC5B;EACH;EAEAC,QAAQA,CAAA;IACN,OAAO,iBAAiB;EAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}