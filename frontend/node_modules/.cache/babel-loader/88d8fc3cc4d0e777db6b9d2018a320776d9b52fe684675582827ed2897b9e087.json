{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Implementation of {@link TypeObserverResult}\n */\nvar ObserverResult = /** @class */function () {\n  function ObserverResult() {\n    this.values = new Map();\n  }\n  ObserverResult.prototype.observe = function (value, labels) {\n    this.values.set(labels, value);\n  };\n  return ObserverResult;\n}();\nexport { ObserverResult };","map":{"version":3,"names":["ObserverResult","values","Map","prototype","observe","value","labels","set"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-metrics-base\\src\\ObserverResult.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ObserverResult as TypeObserverResult,\n  Labels,\n} from '@opentelemetry/api-metrics';\n\n/**\n * Implementation of {@link TypeObserverResult}\n */\nexport class ObserverResult implements TypeObserverResult {\n  values: Map<Labels, number> = new Map<Labels, number>();\n\n  observe(value: number, labels: Labels): void {\n    this.values.set(labels, value);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAqBA;;;AAGA,IAAAA,cAAA;EAAA,SAAAA,eAAA;IACE,KAAAC,MAAM,GAAwB,IAAIC,GAAG,EAAkB;EAKzD;EAHEF,cAAA,CAAAG,SAAA,CAAAC,OAAO,GAAP,UAAQC,KAAa,EAAEC,MAAc;IACnC,IAAI,CAACL,MAAM,CAACM,GAAG,CAACD,MAAM,EAAED,KAAK,CAAC;EAChC,CAAC;EACH,OAAAL,cAAC;AAAD,CAAC,CAND","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}