{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class Deferred {\n  _promise;\n  _resolve;\n  _reject;\n  constructor() {\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n  get promise() {\n    return this._promise;\n  }\n  resolve(val) {\n    this._resolve(val);\n  }\n  reject(err) {\n    this._reject(err);\n  }\n}","map":{"version":3,"names":["Deferred","_promise","_resolve","_reject","constructor","Promise","resolve","reject","promise","val","err"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\resources\\node_modules\\@opentelemetry\\core\\src\\utils\\promise.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve!: (val: T) => void;\n  private _reject!: (error: unknown) => void;\n  constructor() {\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  resolve(val: T) {\n    this._resolve(val);\n  }\n\n  reject(err: unknown) {\n    this._reject(err);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAM,MAAOA,QAAQ;EACXC,QAAQ;EACRC,QAAQ;EACRC,OAAO;EACfC,YAAA;IACE,IAAI,CAACH,QAAQ,GAAG,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC9C,IAAI,CAACL,QAAQ,GAAGI,OAAO;MACvB,IAAI,CAACH,OAAO,GAAGI,MAAM;IACvB,CAAC,CAAC;EACJ;EAEA,IAAIC,OAAOA,CAAA;IACT,OAAO,IAAI,CAACP,QAAQ;EACtB;EAEAK,OAAOA,CAACG,GAAM;IACZ,IAAI,CAACP,QAAQ,CAACO,GAAG,CAAC;EACpB;EAEAF,MAAMA,CAACG,GAAY;IACjB,IAAI,CAACP,OAAO,CAACO,GAAG,CAAC;EACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}