{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * This is implementation of {@link MetricExporter} that prints metrics data to\n * the console. This class can be used for diagnostic purposes.\n */\n/* eslint-disable no-console */\nvar ConsoleMetricExporter = /** @class */function () {\n  function ConsoleMetricExporter() {}\n  ConsoleMetricExporter.prototype.export = function (metrics, resultCallback) {\n    for (var _i = 0, metrics_1 = metrics; _i < metrics_1.length; _i++) {\n      var metric = metrics_1[_i];\n      console.log(metric.descriptor);\n      console.log(metric.labels);\n      var point = metric.aggregator.toPoint();\n      if (typeof point.value === 'number') {\n        console.log('value: ' + point.value);\n      } else if (typeof point.value.buckets === 'object') {\n        var histogram = point.value;\n        console.log(\"count: \" + histogram.count + \", sum: \" + histogram.sum + \", buckets: \" + histogram.buckets);\n      } else {\n        console.log(point.value);\n      }\n    }\n    return resultCallback({\n      code: ExportResultCode.SUCCESS\n    });\n  };\n  ConsoleMetricExporter.prototype.shutdown = function () {\n    // By default does nothing\n    return Promise.resolve();\n  };\n  return ConsoleMetricExporter;\n}();\nexport { ConsoleMetricExporter };","map":{"version":3,"names":["ExportResultCode","ConsoleMetricExporter","prototype","export","metrics","resultCallback","_i","metrics_1","length","metric","console","log","descriptor","labels","point","aggregator","toPoint","value","buckets","histogram","count","sum","code","SUCCESS","shutdown","Promise","resolve"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-metrics-base\\src\\export\\ConsoleMetricExporter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricExporter, MetricRecord, Histogram } from './types';\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\n\n/**\n * This is implementation of {@link MetricExporter} that prints metrics data to\n * the console. This class can be used for diagnostic purposes.\n */\n\n/* eslint-disable no-console */\nexport class ConsoleMetricExporter implements MetricExporter {\n  export(\n    metrics: MetricRecord[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    for (const metric of metrics) {\n      console.log(metric.descriptor);\n      console.log(metric.labels);\n      const point = metric.aggregator.toPoint();\n      if (typeof point.value === 'number') {\n        console.log('value: ' + point.value);\n      } else if (typeof (point.value as Histogram).buckets === 'object') {\n        const histogram = point.value as Histogram;\n        console.log(\n          `count: ${histogram.count}, sum: ${histogram.sum}, buckets: ${histogram.buckets}`\n        );\n      } else {\n        console.log(point.value);\n      }\n    }\n    return resultCallback({ code: ExportResultCode.SUCCESS });\n  }\n\n  shutdown(): Promise<void> {\n    // By default does nothing\n    return Promise.resolve();\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA,SAAuBA,gBAAgB,QAAQ,qBAAqB;AAEpE;;;;AAKA;AACA,IAAAC,qBAAA;EAAA,SAAAA,sBAAA,GA2BA;EA1BEA,qBAAA,CAAAC,SAAA,CAAAC,MAAM,GAAN,UACEC,OAAuB,EACvBC,cAA8C;IAE9C,KAAqB,IAAAC,EAAA,IAAO,EAAPC,SAAA,GAAAH,OAAO,EAAPE,EAAA,GAAAC,SAAA,CAAAC,MAAO,EAAPF,EAAA,EAAO,EAAE;MAAzB,IAAMG,MAAM,GAAAF,SAAA,CAAAD,EAAA;MACfI,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,UAAU,CAAC;MAC9BF,OAAO,CAACC,GAAG,CAACF,MAAM,CAACI,MAAM,CAAC;MAC1B,IAAMC,KAAK,GAAGL,MAAM,CAACM,UAAU,CAACC,OAAO,EAAE;MACzC,IAAI,OAAOF,KAAK,CAACG,KAAK,KAAK,QAAQ,EAAE;QACnCP,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGG,KAAK,CAACG,KAAK,CAAC;OACrC,MAAM,IAAI,OAAQH,KAAK,CAACG,KAAmB,CAACC,OAAO,KAAK,QAAQ,EAAE;QACjE,IAAMC,SAAS,GAAGL,KAAK,CAACG,KAAkB;QAC1CP,OAAO,CAACC,GAAG,CACT,YAAUQ,SAAS,CAACC,KAAK,eAAUD,SAAS,CAACE,GAAG,mBAAcF,SAAS,CAACD,OAAS,CAClF;OACF,MAAM;QACLR,OAAO,CAACC,GAAG,CAACG,KAAK,CAACG,KAAK,CAAC;;;IAG5B,OAAOZ,cAAc,CAAC;MAAEiB,IAAI,EAAEtB,gBAAgB,CAACuB;IAAO,CAAE,CAAC;EAC3D,CAAC;EAEDtB,qBAAA,CAAAC,SAAA,CAAAsB,QAAQ,GAAR;IACE;IACA,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EACH,OAAAzB,qBAAC;AAAD,CAAC,CA3BD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}