{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode, hrTimeToMicroseconds } from '@opentelemetry/core';\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n *\n * NOTE: This {@link SpanExporter} is intended for diagnostics use only, output rendered to the console may change at any time.\n */\n/* eslint-disable no-console */\nexport class ConsoleSpanExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(spans, resultCallback) {\n    return this._sendSpans(spans, resultCallback);\n  }\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown() {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush() {\n    return Promise.resolve();\n  }\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n  _exportInfo(span) {\n    return {\n      resource: {\n        attributes: span.resource.attributes\n      },\n      instrumentationScope: span.instrumentationScope,\n      traceId: span.spanContext().traceId,\n      parentSpanContext: span.parentSpanContext,\n      traceState: span.spanContext().traceState?.serialize(),\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events,\n      links: span.links\n    };\n  }\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n  _sendSpans(spans, done) {\n    for (const span of spans) {\n      console.dir(this._exportInfo(span), {\n        depth: 3\n      });\n    }\n    if (done) {\n      return done({\n        code: ExportResultCode.SUCCESS\n      });\n    }\n  }\n}","map":{"version":3,"names":["ExportResultCode","hrTimeToMicroseconds","ConsoleSpanExporter","export","spans","resultCallback","_sendSpans","shutdown","forceFlush","Promise","resolve","_exportInfo","span","resource","attributes","instrumentationScope","traceId","spanContext","parentSpanContext","traceState","serialize","name","id","spanId","kind","timestamp","startTime","duration","status","events","links","done","console","dir","depth","code","SUCCESS"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-base\\src\\export\\ConsoleSpanExporter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport {\n  ExportResult,\n  ExportResultCode,\n  hrTimeToMicroseconds,\n} from '@opentelemetry/core';\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n *\n * NOTE: This {@link SpanExporter} is intended for diagnostics use only, output rendered to the console may change at any time.\n */\n\n/* eslint-disable no-console */\nexport class ConsoleSpanExporter implements SpanExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    return this._sendSpans(spans, resultCallback);\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n  private _exportInfo(span: ReadableSpan) {\n    return {\n      resource: {\n        attributes: span.resource.attributes,\n      },\n      instrumentationScope: span.instrumentationScope,\n      traceId: span.spanContext().traceId,\n      parentSpanContext: span.parentSpanContext,\n      traceState: span.spanContext().traceState?.serialize(),\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events,\n      links: span.links,\n    };\n  }\n\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n  private _sendSpans(\n    spans: ReadableSpan[],\n    done?: (result: ExportResult) => void\n  ): void {\n    for (const span of spans) {\n      console.dir(this._exportInfo(span), { depth: 3 });\n    }\n    if (done) {\n      return done({ code: ExportResultCode.SUCCESS });\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAEEA,gBAAgB,EAChBC,oBAAoB,QACf,qBAAqB;AAE5B;;;;;;AAOA;AACA,OAAM,MAAOC,mBAAmB;EAC9B;;;;;EAKAC,MAAMA,CACJC,KAAqB,EACrBC,cAA8C;IAE9C,OAAO,IAAI,CAACC,UAAU,CAACF,KAAK,EAAEC,cAAc,CAAC;EAC/C;EAEA;;;EAGAE,QAAQA,CAAA;IACN,IAAI,CAACD,UAAU,CAAC,EAAE,CAAC;IACnB,OAAO,IAAI,CAACE,UAAU,EAAE;EAC1B;EAEA;;;EAGAA,UAAUA,CAAA;IACR,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B;EAEA;;;;EAIQC,WAAWA,CAACC,IAAkB;IACpC,OAAO;MACLC,QAAQ,EAAE;QACRC,UAAU,EAAEF,IAAI,CAACC,QAAQ,CAACC;OAC3B;MACDC,oBAAoB,EAAEH,IAAI,CAACG,oBAAoB;MAC/CC,OAAO,EAAEJ,IAAI,CAACK,WAAW,EAAE,CAACD,OAAO;MACnCE,iBAAiB,EAAEN,IAAI,CAACM,iBAAiB;MACzCC,UAAU,EAAEP,IAAI,CAACK,WAAW,EAAE,CAACE,UAAU,EAAEC,SAAS,EAAE;MACtDC,IAAI,EAAET,IAAI,CAACS,IAAI;MACfC,EAAE,EAAEV,IAAI,CAACK,WAAW,EAAE,CAACM,MAAM;MAC7BC,IAAI,EAAEZ,IAAI,CAACY,IAAI;MACfC,SAAS,EAAExB,oBAAoB,CAACW,IAAI,CAACc,SAAS,CAAC;MAC/CC,QAAQ,EAAE1B,oBAAoB,CAACW,IAAI,CAACe,QAAQ,CAAC;MAC7Cb,UAAU,EAAEF,IAAI,CAACE,UAAU;MAC3Bc,MAAM,EAAEhB,IAAI,CAACgB,MAAM;MACnBC,MAAM,EAAEjB,IAAI,CAACiB,MAAM;MACnBC,KAAK,EAAElB,IAAI,CAACkB;KACb;EACH;EAEA;;;;;EAKQxB,UAAUA,CAChBF,KAAqB,EACrB2B,IAAqC;IAErC,KAAK,MAAMnB,IAAI,IAAIR,KAAK,EAAE;MACxB4B,OAAO,CAACC,GAAG,CAAC,IAAI,CAACtB,WAAW,CAACC,IAAI,CAAC,EAAE;QAAEsB,KAAK,EAAE;MAAC,CAAE,CAAC;;IAEnD,IAAIH,IAAI,EAAE;MACR,OAAOA,IAAI,CAAC;QAAEI,IAAI,EAAEnC,gBAAgB,CAACoC;MAAO,CAAE,CAAC;;EAEnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}