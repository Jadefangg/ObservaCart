{"ast":null,"code":"import { WebTracerProvider } from '@opentelemetry/web';\nimport { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';\nimport { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\nimport { resourceFromAttributes } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-otlp-http';\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\n\n// Create resource\nconst resource = resourceFromAttributes({\n  [SemanticResourceAttributes.SERVICE_NAME]: 'observacart-frontend',\n  [SemanticResourceAttributes.SERVICE_VERSION]: '1.0.0',\n  [SemanticResourceAttributes.SERVICE_INSTANCE_ID]: 'frontend-instance-1'\n});\n\n// Create OTLP exporter for sending traces\nconst traceExporter = new OTLPTraceExporter({\n  url: 'http://localhost:4318/v1/traces' // OpenTelemetry Collector HTTP endpoint\n});\n\n// Create tracer provider\nconst provider = new WebTracerProvider({\n  resource: resource\n});\n\n// Add batch span processor\nprovider.addSpanProcessor(new BatchSpanProcessor(traceExporter));\n\n// Register the provider\nprovider.register();\n\n// Register instrumentations\nregisterInstrumentations({\n  instrumentations: [new FetchInstrumentation({\n    propagateTraceHeaderCorsUrls: [/^https?:\\/\\/localhost/]\n  }), new XMLHttpRequestInstrumentation({\n    propagateTraceHeaderCorsUrls: [/^https?:\\/\\/localhost/]\n  })]\n});\nconsole.log('üîç OpenTelemetry started successfully - ObservaCart Frontend instrumented!');\nexport default provider;","map":{"version":3,"names":["WebTracerProvider","FetchInstrumentation","XMLHttpRequestInstrumentation","resourceFromAttributes","SemanticResourceAttributes","OTLPTraceExporter","BatchSpanProcessor","registerInstrumentations","resource","SERVICE_NAME","SERVICE_VERSION","SERVICE_INSTANCE_ID","traceExporter","url","provider","addSpanProcessor","register","instrumentations","propagateTraceHeaderCorsUrls","console","log"],"sources":["C:/Users/Sartaj/Desktop/ObservaCart/observacart/frontend/src/observability.js"],"sourcesContent":["import { WebTracerProvider } from '@opentelemetry/web';\r\nimport { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';\r\nimport { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\r\nimport { resourceFromAttributes } from '@opentelemetry/resources';\r\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\r\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-otlp-http';\r\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\r\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\r\n\r\n// Create resource\r\nconst resource = resourceFromAttributes({\r\n  [SemanticResourceAttributes.SERVICE_NAME]: 'observacart-frontend',\r\n  [SemanticResourceAttributes.SERVICE_VERSION]: '1.0.0',\r\n  [SemanticResourceAttributes.SERVICE_INSTANCE_ID]: 'frontend-instance-1',\r\n});\r\n\r\n// Create OTLP exporter for sending traces\r\nconst traceExporter = new OTLPTraceExporter({\r\n  url: 'http://localhost:4318/v1/traces', // OpenTelemetry Collector HTTP endpoint\r\n});\r\n\r\n// Create tracer provider\r\nconst provider = new WebTracerProvider({\r\n  resource: resource,\r\n});\r\n\r\n// Add batch span processor\r\nprovider.addSpanProcessor(new BatchSpanProcessor(traceExporter));\r\n\r\n// Register the provider\r\nprovider.register();\r\n\r\n// Register instrumentations\r\nregisterInstrumentations({\r\n  instrumentations: [\r\n    new FetchInstrumentation({\r\n      propagateTraceHeaderCorsUrls: [\r\n        /^https?:\\/\\/localhost/,\r\n      ],\r\n    }),\r\n    new XMLHttpRequestInstrumentation({\r\n      propagateTraceHeaderCorsUrls: [\r\n        /^https?:\\/\\/localhost/,\r\n      ],\r\n    }),\r\n  ],\r\n});\r\n\r\nconsole.log('üîç OpenTelemetry started successfully - ObservaCart Frontend instrumented!');\r\n\r\nexport default provider;\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,oBAAoB;AACtD,SAASC,oBAAoB,QAAQ,sCAAsC;AAC3E,SAASC,6BAA6B,QAAQ,iDAAiD;AAC/F,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAASC,0BAA0B,QAAQ,qCAAqC;AAChF,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,kBAAkB,QAAQ,+BAA+B;AAClE,SAASC,wBAAwB,QAAQ,gCAAgC;;AAEzE;AACA,MAAMC,QAAQ,GAAGL,sBAAsB,CAAC;EACtC,CAACC,0BAA0B,CAACK,YAAY,GAAG,sBAAsB;EACjE,CAACL,0BAA0B,CAACM,eAAe,GAAG,OAAO;EACrD,CAACN,0BAA0B,CAACO,mBAAmB,GAAG;AACpD,CAAC,CAAC;;AAEF;AACA,MAAMC,aAAa,GAAG,IAAIP,iBAAiB,CAAC;EAC1CQ,GAAG,EAAE,iCAAiC,CAAE;AAC1C,CAAC,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAG,IAAId,iBAAiB,CAAC;EACrCQ,QAAQ,EAAEA;AACZ,CAAC,CAAC;;AAEF;AACAM,QAAQ,CAACC,gBAAgB,CAAC,IAAIT,kBAAkB,CAACM,aAAa,CAAC,CAAC;;AAEhE;AACAE,QAAQ,CAACE,QAAQ,CAAC,CAAC;;AAEnB;AACAT,wBAAwB,CAAC;EACvBU,gBAAgB,EAAE,CAChB,IAAIhB,oBAAoB,CAAC;IACvBiB,4BAA4B,EAAE,CAC5B,uBAAuB;EAE3B,CAAC,CAAC,EACF,IAAIhB,6BAA6B,CAAC;IAChCgB,4BAA4B,EAAE,CAC5B,uBAAuB;EAE3B,CAAC,CAAC;AAEN,CAAC,CAAC;AAEFC,OAAO,CAACC,GAAG,CAAC,4EAA4E,CAAC;AAEzF,eAAeN,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}