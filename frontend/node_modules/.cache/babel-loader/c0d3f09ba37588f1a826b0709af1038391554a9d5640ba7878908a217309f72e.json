{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport { StackContextManager } from './StackContextManager';\nimport { trace, context, propagation } from '@opentelemetry/api';\nimport { CompositePropagator, W3CBaggagePropagator, W3CTraceContextPropagator } from '@opentelemetry/core';\nfunction setupContextManager(contextManager) {\n  // null means 'do not register'\n  if (contextManager === null) {\n    return;\n  }\n  // undefined means 'register default'\n  if (contextManager === undefined) {\n    const defaultContextManager = new StackContextManager();\n    defaultContextManager.enable();\n    context.setGlobalContextManager(defaultContextManager);\n    return;\n  }\n  contextManager.enable();\n  context.setGlobalContextManager(contextManager);\n}\nfunction setupPropagator(propagator) {\n  // null means 'do not register'\n  if (propagator === null) {\n    return;\n  }\n  // undefined means 'register default'\n  if (propagator === undefined) {\n    propagation.setGlobalPropagator(new CompositePropagator({\n      propagators: [new W3CTraceContextPropagator(), new W3CBaggagePropagator()]\n    }));\n    return;\n  }\n  propagation.setGlobalPropagator(propagator);\n}\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\nexport class WebTracerProvider extends BasicTracerProvider {\n  /**\n   * Constructs a new Tracer instance.\n   * @param config Web Tracer config\n   */\n  constructor(config = {}) {\n    super(config);\n  }\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  register(config = {}) {\n    trace.setGlobalTracerProvider(this);\n    setupPropagator(config.propagator);\n    setupContextManager(config.contextManager);\n  }\n}","map":{"version":3,"names":["BasicTracerProvider","StackContextManager","trace","context","propagation","CompositePropagator","W3CBaggagePropagator","W3CTraceContextPropagator","setupContextManager","contextManager","undefined","defaultContextManager","enable","setGlobalContextManager","setupPropagator","propagator","setGlobalPropagator","propagators","WebTracerProvider","constructor","config","register","setGlobalTracerProvider"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-web\\src\\WebTracerProvider.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BasicTracerProvider,\n  SDKRegistrationConfig,\n  TracerConfig,\n} from '@opentelemetry/sdk-trace-base';\nimport { StackContextManager } from './StackContextManager';\nimport {\n  trace,\n  context,\n  ContextManager,\n  propagation,\n  TextMapPropagator,\n} from '@opentelemetry/api';\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  W3CTraceContextPropagator,\n} from '@opentelemetry/core';\n\nfunction setupContextManager(\n  contextManager: ContextManager | null | undefined\n) {\n  // null means 'do not register'\n  if (contextManager === null) {\n    return;\n  }\n\n  // undefined means 'register default'\n  if (contextManager === undefined) {\n    const defaultContextManager = new StackContextManager();\n    defaultContextManager.enable();\n    context.setGlobalContextManager(defaultContextManager);\n    return;\n  }\n\n  contextManager.enable();\n  context.setGlobalContextManager(contextManager);\n}\n\nfunction setupPropagator(propagator: TextMapPropagator | null | undefined) {\n  // null means 'do not register'\n  if (propagator === null) {\n    return;\n  }\n\n  // undefined means 'register default'\n  if (propagator === undefined) {\n    propagation.setGlobalPropagator(\n      new CompositePropagator({\n        propagators: [\n          new W3CTraceContextPropagator(),\n          new W3CBaggagePropagator(),\n        ],\n      })\n    );\n    return;\n  }\n\n  propagation.setGlobalPropagator(propagator);\n}\n\n/**\n * WebTracerConfig provides an interface for configuring a Web Tracer.\n */\nexport type WebTracerConfig = TracerConfig;\n\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\nexport class WebTracerProvider extends BasicTracerProvider {\n  /**\n   * Constructs a new Tracer instance.\n   * @param config Web Tracer config\n   */\n  constructor(config: WebTracerConfig = {}) {\n    super(config);\n  }\n\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  register(config: SDKRegistrationConfig = {}): void {\n    trace.setGlobalTracerProvider(this);\n    setupPropagator(config.propagator);\n    setupContextManager(config.contextManager);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SACEA,mBAAmB,QAGd,+BAA+B;AACtC,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SACEC,KAAK,EACLC,OAAO,EAEPC,WAAW,QAEN,oBAAoB;AAC3B,SACEC,mBAAmB,EACnBC,oBAAoB,EACpBC,yBAAyB,QACpB,qBAAqB;AAE5B,SAASC,mBAAmBA,CAC1BC,cAAiD;EAEjD;EACA,IAAIA,cAAc,KAAK,IAAI,EAAE;IAC3B;;EAGF;EACA,IAAIA,cAAc,KAAKC,SAAS,EAAE;IAChC,MAAMC,qBAAqB,GAAG,IAAIV,mBAAmB,EAAE;IACvDU,qBAAqB,CAACC,MAAM,EAAE;IAC9BT,OAAO,CAACU,uBAAuB,CAACF,qBAAqB,CAAC;IACtD;;EAGFF,cAAc,CAACG,MAAM,EAAE;EACvBT,OAAO,CAACU,uBAAuB,CAACJ,cAAc,CAAC;AACjD;AAEA,SAASK,eAAeA,CAACC,UAAgD;EACvE;EACA,IAAIA,UAAU,KAAK,IAAI,EAAE;IACvB;;EAGF;EACA,IAAIA,UAAU,KAAKL,SAAS,EAAE;IAC5BN,WAAW,CAACY,mBAAmB,CAC7B,IAAIX,mBAAmB,CAAC;MACtBY,WAAW,EAAE,CACX,IAAIV,yBAAyB,EAAE,EAC/B,IAAID,oBAAoB,EAAE;KAE7B,CAAC,CACH;IACD;;EAGFF,WAAW,CAACY,mBAAmB,CAACD,UAAU,CAAC;AAC7C;AAOA;;;AAGA,OAAM,MAAOG,iBAAkB,SAAQlB,mBAAmB;EACxD;;;;EAIAmB,YAAYC,MAAA,GAA0B,EAAE;IACtC,KAAK,CAACA,MAAM,CAAC;EACf;EAEA;;;;;;;EAOAC,QAAQA,CAACD,MAAA,GAAgC,EAAE;IACzClB,KAAK,CAACoB,uBAAuB,CAAC,IAAI,CAAC;IACnCR,eAAe,CAACM,MAAM,CAACL,UAAU,CAAC;IAClCP,mBAAmB,CAACY,MAAM,CAACX,cAAc,CAAC;EAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}