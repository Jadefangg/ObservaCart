{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */function () {\n  function NoopMeter() {}\n  /**\n   * Returns constant noop value recorder.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  NoopMeter.prototype.createValueRecorder = function (_name, _options) {\n    return NOOP_VALUE_RECORDER_METRIC;\n  };\n  /**\n   * Returns a constant noop counter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  NoopMeter.prototype.createCounter = function (_name, _options) {\n    return NOOP_COUNTER_METRIC;\n  };\n  /**\n   * Returns a constant noop UpDownCounter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n    return NOOP_COUNTER_METRIC;\n  };\n  /**\n   * Returns constant noop value observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the value observer callback\n   */\n  NoopMeter.prototype.createValueObserver = function (_name, _options, _callback) {\n    return NOOP_VALUE_OBSERVER_METRIC;\n  };\n  /**\n   * Returns constant noop sum observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the sum observer callback\n   */\n  NoopMeter.prototype.createSumObserver = function (_name, _options, _callback) {\n    return NOOP_SUM_OBSERVER_METRIC;\n  };\n  /**\n   * Returns constant noop up down sum observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the up down sum observer callback\n   */\n  NoopMeter.prototype.createUpDownSumObserver = function (_name, _options, _callback) {\n    return NOOP_UP_DOWN_SUM_OBSERVER_METRIC;\n  };\n  /**\n   * Returns constant noop batch observer.\n   * @param name the name of the metric.\n   * @param callback the batch observer callback\n   */\n  NoopMeter.prototype.createBatchObserver = function (_callback) {\n    return NOOP_BATCH_OBSERVER;\n  };\n  return NoopMeter;\n}();\nexport { NoopMeter };\nvar NoopMetric = /** @class */function () {\n  function NoopMetric(instrument) {\n    this._instrument = instrument;\n  }\n  /**\n   * Returns a Bound Instrument associated with specified Labels.\n   * It is recommended to keep a reference to the Bound Instrument instead of\n   * always calling this method for every operations.\n   * @param labels key-values pairs that are associated with a specific metric\n   *     that you want to record.\n   */\n  NoopMetric.prototype.bind = function (_labels) {\n    return this._instrument;\n  };\n  /**\n   * Removes the Binding from the metric, if it is present.\n   * @param labels key-values pairs that are associated with a specific metric.\n   */\n  NoopMetric.prototype.unbind = function (_labels) {\n    return;\n  };\n  /**\n   * Clears all timeseries from the Metric.\n   */\n  NoopMetric.prototype.clear = function () {\n    return;\n  };\n  return NoopMetric;\n}();\nexport { NoopMetric };\nvar NoopCounterMetric = /** @class */function (_super) {\n  __extends(NoopCounterMetric, _super);\n  function NoopCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopCounterMetric.prototype.add = function (value, labels) {\n    this.bind(labels).add(value);\n  };\n  return NoopCounterMetric;\n}(NoopMetric);\nexport { NoopCounterMetric };\nvar NoopValueRecorderMetric = /** @class */function (_super) {\n  __extends(NoopValueRecorderMetric, _super);\n  function NoopValueRecorderMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopValueRecorderMetric.prototype.record = function (value, labels) {\n    this.bind(labels).record(value);\n  };\n  return NoopValueRecorderMetric;\n}(NoopMetric);\nexport { NoopValueRecorderMetric };\nvar NoopBaseObserverMetric = /** @class */function (_super) {\n  __extends(NoopBaseObserverMetric, _super);\n  function NoopBaseObserverMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopBaseObserverMetric.prototype.observation = function () {\n    return {\n      observer: this,\n      value: 0\n    };\n  };\n  return NoopBaseObserverMetric;\n}(NoopMetric);\nexport { NoopBaseObserverMetric };\nvar NoopBatchObserver = /** @class */function () {\n  function NoopBatchObserver() {}\n  return NoopBatchObserver;\n}();\nexport { NoopBatchObserver };\nvar NoopBoundCounter = /** @class */function () {\n  function NoopBoundCounter() {}\n  NoopBoundCounter.prototype.add = function (_value) {\n    return;\n  };\n  return NoopBoundCounter;\n}();\nexport { NoopBoundCounter };\nvar NoopBoundValueRecorder = /** @class */function () {\n  function NoopBoundValueRecorder() {}\n  NoopBoundValueRecorder.prototype.record = function (_value, _baggage, _spanContext) {\n    return;\n  };\n  return NoopBoundValueRecorder;\n}();\nexport { NoopBoundValueRecorder };\nvar NoopBoundBaseObserver = /** @class */function () {\n  function NoopBoundBaseObserver() {}\n  NoopBoundBaseObserver.prototype.update = function (_value) {};\n  return NoopBoundBaseObserver;\n}();\nexport { NoopBoundBaseObserver };\nexport var NOOP_METER = new NoopMeter();\nexport var NOOP_BOUND_COUNTER = new NoopBoundCounter();\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric(NOOP_BOUND_COUNTER);\nexport var NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();\nexport var NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(NOOP_BOUND_VALUE_RECORDER);\nexport var NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();\nexport var NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_BATCH_OBSERVER = new NoopBatchObserver();","map":{"version":3,"names":["NoopMeter","prototype","createValueRecorder","_name","_options","NOOP_VALUE_RECORDER_METRIC","createCounter","NOOP_COUNTER_METRIC","createUpDownCounter","createValueObserver","_callback","NOOP_VALUE_OBSERVER_METRIC","createSumObserver","NOOP_SUM_OBSERVER_METRIC","createUpDownSumObserver","NOOP_UP_DOWN_SUM_OBSERVER_METRIC","createBatchObserver","NOOP_BATCH_OBSERVER","NoopMetric","instrument","_instrument","bind","_labels","unbind","clear","NoopCounterMetric","_super","__extends","add","value","labels","NoopValueRecorderMetric","record","NoopBaseObserverMetric","observation","observer","NoopBatchObserver","NoopBoundCounter","_value","NoopBoundValueRecorder","_baggage","_spanContext","NoopBoundBaseObserver","update","NOOP_METER","NOOP_BOUND_COUNTER","NOOP_BOUND_VALUE_RECORDER","NOOP_BOUND_BASE_OBSERVER"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\api-metrics\\src\\NoopMeter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchObserverResult } from './types/BatchObserverResult';\nimport { Meter } from './types/Meter';\nimport {\n  MetricOptions,\n  UnboundMetric,\n  Labels,\n  Counter,\n  ValueRecorder,\n  ValueObserver,\n  UpDownCounter,\n  BaseObserver,\n  UpDownSumObserver,\n} from './types/Metric';\nimport {\n  BoundValueRecorder,\n  BoundCounter,\n  BoundBaseObserver,\n} from './types/BoundInstrument';\nimport { ObserverResult } from './types/ObserverResult';\nimport { Observation } from './types/Observation';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * Returns constant noop value recorder.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createValueRecorder(_name: string, _options?: MetricOptions): ValueRecorder {\n    return NOOP_VALUE_RECORDER_METRIC;\n  }\n\n  /**\n   * Returns a constant noop counter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * Returns a constant noop UpDownCounter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * Returns constant noop value observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the value observer callback\n   */\n  createValueObserver(\n    _name: string,\n    _options?: MetricOptions,\n    _callback?: (observerResult: ObserverResult) => void\n  ): ValueObserver {\n    return NOOP_VALUE_OBSERVER_METRIC;\n  }\n\n  /**\n   * Returns constant noop sum observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the sum observer callback\n   */\n  createSumObserver(\n    _name: string,\n    _options?: MetricOptions,\n    _callback?: (observerResult: ObserverResult) => void\n  ): ValueObserver {\n    return NOOP_SUM_OBSERVER_METRIC;\n  }\n\n  /**\n   * Returns constant noop up down sum observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the up down sum observer callback\n   */\n  createUpDownSumObserver(\n    _name: string,\n    _options?: MetricOptions,\n    _callback?: (observerResult: ObserverResult) => void\n  ): UpDownSumObserver {\n    return NOOP_UP_DOWN_SUM_OBSERVER_METRIC;\n  }\n\n  /**\n   * Returns constant noop batch observer.\n   * @param name the name of the metric.\n   * @param callback the batch observer callback\n   */\n  createBatchObserver(\n    _callback: (batchObserverResult: BatchObserverResult) => void\n  ): NoopBatchObserver {\n    return NOOP_BATCH_OBSERVER;\n  }\n}\n\nexport class NoopMetric<T> implements UnboundMetric<T> {\n  private readonly _instrument: T;\n\n  constructor(instrument: T) {\n    this._instrument = instrument;\n  }\n\n  /**\n   * Returns a Bound Instrument associated with specified Labels.\n   * It is recommended to keep a reference to the Bound Instrument instead of\n   * always calling this method for every operations.\n   * @param labels key-values pairs that are associated with a specific metric\n   *     that you want to record.\n   */\n  bind(_labels: Labels): T {\n    return this._instrument;\n  }\n\n  /**\n   * Removes the Binding from the metric, if it is present.\n   * @param labels key-values pairs that are associated with a specific metric.\n   */\n  unbind(_labels: Labels): void {\n    return;\n  }\n\n  /**\n   * Clears all timeseries from the Metric.\n   */\n  clear(): void {\n    return;\n  }\n}\n\nexport class NoopCounterMetric\n  extends NoopMetric<BoundCounter>\n  implements Counter {\n  add(value: number, labels: Labels): void {\n    this.bind(labels).add(value);\n  }\n}\n\nexport class NoopValueRecorderMetric\n  extends NoopMetric<BoundValueRecorder>\n  implements ValueRecorder {\n  record(value: number, labels: Labels): void {\n    this.bind(labels).record(value);\n  }\n}\n\nexport class NoopBaseObserverMetric\n  extends NoopMetric<BoundBaseObserver>\n  implements BaseObserver {\n  observation(): Observation {\n    return {\n      observer: this as BaseObserver,\n      value: 0,\n    };\n  }\n}\n\nexport class NoopBatchObserver {}\n\nexport class NoopBoundCounter implements BoundCounter {\n  add(_value: number): void {\n    return;\n  }\n}\n\nexport class NoopBoundValueRecorder implements BoundValueRecorder {\n  record(_value: number, _baggage?: unknown, _spanContext?: unknown): void {\n    return;\n  }\n}\n\nexport class NoopBoundBaseObserver implements BoundBaseObserver {\n  update(_value: number): void {}\n}\n\nexport const NOOP_METER = new NoopMeter();\nexport const NOOP_BOUND_COUNTER = new NoopBoundCounter();\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric(NOOP_BOUND_COUNTER);\n\nexport const NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();\nexport const NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(\n  NOOP_BOUND_VALUE_RECORDER\n);\n\nexport const NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();\nexport const NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(\n  NOOP_BOUND_BASE_OBSERVER\n);\n\nexport const NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(\n  NOOP_BOUND_BASE_OBSERVER\n);\n\nexport const NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(\n  NOOP_BOUND_BASE_OBSERVER\n);\n\nexport const NOOP_BATCH_OBSERVER = new NoopBatchObserver();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}