{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(partialHeaders) {\n  if (partialHeaders === void 0) {\n    partialHeaders = {};\n  }\n  var headers = {};\n  Object.entries(partialHeaders).forEach(function (_a) {\n    var key = _a[0],\n      value = _a[1];\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(\"Header \\\"\" + key + \"\\\" has wrong value and will be ignored\");\n    }\n  });\n  return headers;\n}\nexport function appendResourcePathToUrlIfNotPresent(url, path) {\n  if (url.match(/v\\d\\/(traces|metrics)$/)) return url;\n  return url + path;\n}","map":{"version":3,"names":["diag","parseHeaders","partialHeaders","headers","Object","entries","forEach","_a","key","value","String","warn","appendResourcePathToUrlIfNotPresent","url","path","match"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\exporter-otlp-http\\src\\util.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\n\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(\n  partialHeaders: Partial<Record<string, unknown>> = {}\n): Record<string, string> {\n  const headers: Record<string, string> = {};\n  Object.entries(partialHeaders).forEach(([key, value]) => {\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(`Header \"${key}\" has wrong value and will be ignored`);\n    }\n  });\n  return headers;\n}\n\nexport function appendResourcePathToUrlIfNotPresent(url: string, path: string): string {\n  if (url.match(/v\\d\\/(traces|metrics)$/)) return url;\n\n  return url + path;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,IAAI,QAAQ,oBAAoB;AAEzC;;;;AAIA,OAAM,SAAUC,YAAYA,CAC1BC,cAAqD;EAArD,IAAAA,cAAA;IAAAA,cAAA,KAAqD;EAAA;EAErD,IAAMC,OAAO,GAA2B,EAAE;EAC1CC,MAAM,CAACC,OAAO,CAACH,cAAc,CAAC,CAACI,OAAO,CAAC,UAACC,EAAY;QAAXC,GAAG,GAAAD,EAAA;MAAEE,KAAK,GAAAF,EAAA;IACjD,IAAI,OAAOE,KAAK,KAAK,WAAW,EAAE;MAChCN,OAAO,CAACK,GAAG,CAAC,GAAGE,MAAM,CAACD,KAAK,CAAC;KAC7B,MAAM;MACLT,IAAI,CAACW,IAAI,CAAC,cAAWH,GAAG,2CAAuC,CAAC;;EAEpE,CAAC,CAAC;EACF,OAAOL,OAAO;AAChB;AAEA,OAAM,SAAUS,mCAAmCA,CAACC,GAAW,EAAEC,IAAY;EAC3E,IAAID,GAAG,CAACE,KAAK,CAAC,wBAAwB,CAAC,EAAE,OAAOF,GAAG;EAEnD,OAAOA,GAAG,GAAGC,IAAI;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}