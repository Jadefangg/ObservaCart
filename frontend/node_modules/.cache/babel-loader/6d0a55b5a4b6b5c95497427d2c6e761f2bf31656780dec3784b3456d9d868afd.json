{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { getNumberFromEnv } from '@opentelemetry/core';\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n  const perInstanceDefaults = {\n    sampler: buildSamplerFromEnv()\n  };\n  const DEFAULT_CONFIG = loadDefaultConfig();\n  const target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n  target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n  target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n  return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig) {\n  const spanLimits = Object.assign({}, userConfig.spanLimits);\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit = userConfig.spanLimits?.attributeCountLimit ?? userConfig.generalLimits?.attributeCountLimit ?? getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ?? getNumberFromEnv('OTEL_ATTRIBUTE_COUNT_LIMIT') ?? DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit = userConfig.spanLimits?.attributeValueLengthLimit ?? userConfig.generalLimits?.attributeValueLengthLimit ?? getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? getNumberFromEnv('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n  return Object.assign({}, userConfig, {\n    spanLimits\n  });\n}","map":{"version":3,"names":["buildSamplerFromEnv","loadDefaultConfig","getNumberFromEnv","DEFAULT_ATTRIBUTE_COUNT_LIMIT","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","Infinity","mergeConfig","userConfig","perInstanceDefaults","sampler","DEFAULT_CONFIG","target","Object","assign","generalLimits","spanLimits","reconfigureLimits","attributeCountLimit","attributeValueLengthLimit"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-web\\node_modules\\@opentelemetry\\sdk-trace-base\\src\\utility.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { Sampler } from './Sampler';\nimport { SpanLimits, TracerConfig, GeneralLimits } from './types';\nimport { getNumberFromEnv } from '@opentelemetry/core';\n\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig: TracerConfig): TracerConfig & {\n  sampler: Sampler;\n  spanLimits: SpanLimits;\n  generalLimits: GeneralLimits;\n} {\n  const perInstanceDefaults: Partial<TracerConfig> = {\n    sampler: buildSamplerFromEnv(),\n  };\n\n  const DEFAULT_CONFIG = loadDefaultConfig();\n\n  const target = Object.assign(\n    {},\n    DEFAULT_CONFIG,\n    perInstanceDefaults,\n    userConfig\n  );\n\n  target.generalLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.generalLimits,\n    userConfig.generalLimits || {}\n  );\n\n  target.spanLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.spanLimits,\n    userConfig.spanLimits || {}\n  );\n\n  return target;\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig: TracerConfig): TracerConfig {\n  const spanLimits = Object.assign({}, userConfig.spanLimits);\n\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit =\n    userConfig.spanLimits?.attributeCountLimit ??\n    userConfig.generalLimits?.attributeCountLimit ??\n    getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ??\n    getNumberFromEnv('OTEL_ATTRIBUTE_COUNT_LIMIT') ??\n    DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit =\n    userConfig.spanLimits?.attributeValueLengthLimit ??\n    userConfig.generalLimits?.attributeValueLengthLimit ??\n    getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n    getNumberFromEnv('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n\n  return Object.assign({}, userConfig, { spanLimits });\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,mBAAmB,EAAEC,iBAAiB,QAAQ,UAAU;AAGjE,SAASC,gBAAgB,QAAQ,qBAAqB;AAEtD,OAAO,MAAMC,6BAA6B,GAAG,GAAG;AAChD,OAAO,MAAMC,oCAAoC,GAAGC,QAAQ;AAE5D;;;;AAIA,OAAM,SAAUC,WAAWA,CAACC,UAAwB;EAKlD,MAAMC,mBAAmB,GAA0B;IACjDC,OAAO,EAAET,mBAAmB;GAC7B;EAED,MAAMU,cAAc,GAAGT,iBAAiB,EAAE;EAE1C,MAAMU,MAAM,GAAGC,MAAM,CAACC,MAAM,CAC1B,EAAE,EACFH,cAAc,EACdF,mBAAmB,EACnBD,UAAU,CACX;EAEDI,MAAM,CAACG,aAAa,GAAGF,MAAM,CAACC,MAAM,CAClC,EAAE,EACFH,cAAc,CAACI,aAAa,EAC5BP,UAAU,CAACO,aAAa,IAAI,EAAE,CAC/B;EAEDH,MAAM,CAACI,UAAU,GAAGH,MAAM,CAACC,MAAM,CAC/B,EAAE,EACFH,cAAc,CAACK,UAAU,EACzBR,UAAU,CAACQ,UAAU,IAAI,EAAE,CAC5B;EAED,OAAOJ,MAAM;AACf;AAEA;;;;;AAKA,OAAM,SAAUK,iBAAiBA,CAACT,UAAwB;EACxD,MAAMQ,UAAU,GAAGH,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEN,UAAU,CAACQ,UAAU,CAAC;EAE3D;;;EAGAA,UAAU,CAACE,mBAAmB,GAC5BV,UAAU,CAACQ,UAAU,EAAEE,mBAAmB,IAC1CV,UAAU,CAACO,aAAa,EAAEG,mBAAmB,IAC7Cf,gBAAgB,CAAC,iCAAiC,CAAC,IACnDA,gBAAgB,CAAC,4BAA4B,CAAC,IAC9CC,6BAA6B;EAE/B;;;EAGAY,UAAU,CAACG,yBAAyB,GAClCX,UAAU,CAACQ,UAAU,EAAEG,yBAAyB,IAChDX,UAAU,CAACO,aAAa,EAAEI,yBAAyB,IACnDhB,gBAAgB,CAAC,wCAAwC,CAAC,IAC1DA,gBAAgB,CAAC,mCAAmC,CAAC,IACrDE,oCAAoC;EAEtC,OAAOQ,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEN,UAAU,EAAE;IAAEQ;EAAU,CAAE,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}