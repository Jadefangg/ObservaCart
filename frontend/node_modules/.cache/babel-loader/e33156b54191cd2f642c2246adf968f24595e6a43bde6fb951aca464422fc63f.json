{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator {\n  inject(context, carrier, setter) {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage).filter(pair => {\n      return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n    }).slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n  extract(context, carrier, getter) {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue) ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR) : headerValue;\n    if (!baggageString) return context;\n    const baggage = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry = {\n          value: keyPair.value\n        };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n  fields() {\n    return [BAGGAGE_HEADER];\n  }\n}","map":{"version":3,"names":["propagation","isTracingSuppressed","BAGGAGE_HEADER","BAGGAGE_ITEMS_SEPARATOR","BAGGAGE_MAX_NAME_VALUE_PAIRS","BAGGAGE_MAX_PER_NAME_VALUE_PAIRS","getKeyPairs","parsePairKeyValue","serializeKeyPairs","W3CBaggagePropagator","inject","context","carrier","setter","baggage","getBaggage","keyPairs","filter","pair","length","slice","headerValue","set","extract","getter","get","baggageString","Array","isArray","join","pairs","split","forEach","entry","keyPair","baggageEntry","value","metadata","key","Object","entries","setBaggage","createBaggage","fields"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\instrumentation-fetch\\node_modules\\@opentelemetry\\core\\src\\baggage\\propagation\\W3CBaggagePropagator.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaggageEntry,\n  Context,\n  propagation,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport {\n  BAGGAGE_HEADER,\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_MAX_NAME_VALUE_PAIRS,\n  BAGGAGE_MAX_PER_NAME_VALUE_PAIRS,\n} from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage)\n      .filter((pair: string) => {\n        return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n      })\n      .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue)\n      ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n      : headerValue;\n    if (!baggageString) return context;\n    const baggage: Record<string, BaggageEntry> = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry: BaggageEntry = { value: keyPair.value };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n\n  fields(): string[] {\n    return [BAGGAGE_HEADER];\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAGEA,WAAW,QAIN,oBAAoB;AAE3B,SAASC,mBAAmB,QAAQ,8BAA8B;AAClE,SACEC,cAAc,EACdC,uBAAuB,EACvBC,4BAA4B,EAC5BC,gCAAgC,QAC3B,cAAc;AACrB,SAASC,WAAW,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,UAAU;AAE5E;;;;;;AAMA,OAAM,MAAOC,oBAAoB;EAC/BC,MAAMA,CAACC,OAAgB,EAAEC,OAAgB,EAAEC,MAAqB;IAC9D,MAAMC,OAAO,GAAGd,WAAW,CAACe,UAAU,CAACJ,OAAO,CAAC;IAC/C,IAAI,CAACG,OAAO,IAAIb,mBAAmB,CAACU,OAAO,CAAC,EAAE;IAC9C,MAAMK,QAAQ,GAAGV,WAAW,CAACQ,OAAO,CAAC,CAClCG,MAAM,CAAEC,IAAY,IAAI;MACvB,OAAOA,IAAI,CAACC,MAAM,IAAId,gCAAgC;IACxD,CAAC,CAAC,CACDe,KAAK,CAAC,CAAC,EAAEhB,4BAA4B,CAAC;IACzC,MAAMiB,WAAW,GAAGb,iBAAiB,CAACQ,QAAQ,CAAC;IAC/C,IAAIK,WAAW,CAACF,MAAM,GAAG,CAAC,EAAE;MAC1BN,MAAM,CAACS,GAAG,CAACV,OAAO,EAAEV,cAAc,EAAEmB,WAAW,CAAC;;EAEpD;EAEAE,OAAOA,CAACZ,OAAgB,EAAEC,OAAgB,EAAEY,MAAqB;IAC/D,MAAMH,WAAW,GAAGG,MAAM,CAACC,GAAG,CAACb,OAAO,EAAEV,cAAc,CAAC;IACvD,MAAMwB,aAAa,GAAGC,KAAK,CAACC,OAAO,CAACP,WAAW,CAAC,GAC5CA,WAAW,CAACQ,IAAI,CAAC1B,uBAAuB,CAAC,GACzCkB,WAAW;IACf,IAAI,CAACK,aAAa,EAAE,OAAOf,OAAO;IAClC,MAAMG,OAAO,GAAiC,EAAE;IAChD,IAAIY,aAAa,CAACP,MAAM,KAAK,CAAC,EAAE;MAC9B,OAAOR,OAAO;;IAEhB,MAAMmB,KAAK,GAAGJ,aAAa,CAACK,KAAK,CAAC5B,uBAAuB,CAAC;IAC1D2B,KAAK,CAACE,OAAO,CAACC,KAAK,IAAG;MACpB,MAAMC,OAAO,GAAG3B,iBAAiB,CAAC0B,KAAK,CAAC;MACxC,IAAIC,OAAO,EAAE;QACX,MAAMC,YAAY,GAAiB;UAAEC,KAAK,EAAEF,OAAO,CAACE;QAAK,CAAE;QAC3D,IAAIF,OAAO,CAACG,QAAQ,EAAE;UACpBF,YAAY,CAACE,QAAQ,GAAGH,OAAO,CAACG,QAAQ;;QAE1CvB,OAAO,CAACoB,OAAO,CAACI,GAAG,CAAC,GAAGH,YAAY;;IAEvC,CAAC,CAAC;IACF,IAAII,MAAM,CAACC,OAAO,CAAC1B,OAAO,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;MACxC,OAAOR,OAAO;;IAEhB,OAAOX,WAAW,CAACyC,UAAU,CAAC9B,OAAO,EAAEX,WAAW,CAAC0C,aAAa,CAAC5B,OAAO,CAAC,CAAC;EAC5E;EAEA6B,MAAMA,CAAA;IACJ,OAAO,CAACzC,cAAc,CAAC;EACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}