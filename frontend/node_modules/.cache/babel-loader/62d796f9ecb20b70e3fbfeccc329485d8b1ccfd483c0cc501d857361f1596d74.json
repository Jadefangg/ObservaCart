{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport function safeExecuteInTheMiddle(execute, onFinish, preventThrowingError) {\n  let error;\n  let result;\n  try {\n    result = execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result;\n  }\n}\n/**\n * Async function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport async function safeExecuteInTheMiddleAsync(execute, onFinish, preventThrowingError) {\n  let error;\n  let result;\n  try {\n    result = await execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result;\n  }\n}\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func) {\n  return typeof func === 'function' && typeof func.__original === 'function' && typeof func.__unwrap === 'function' && func.__wrapped === true;\n}","map":{"version":3,"names":["safeExecuteInTheMiddle","execute","onFinish","preventThrowingError","error","result","e","safeExecuteInTheMiddleAsync","isWrapped","func","__original","__unwrap","__wrapped"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\instrumentation\\src\\utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from './types';\n\n/**\n * function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport function safeExecuteInTheMiddle<T>(\n  execute: () => T,\n  onFinish: (e: Error | undefined, result: T | undefined) => void,\n  preventThrowingError?: boolean\n): T {\n  let error: Error | undefined;\n  let result: T | undefined;\n  try {\n    result = execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result as T;\n  }\n}\n\n/**\n * Async function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport async function safeExecuteInTheMiddleAsync<T>(\n  execute: () => T,\n  onFinish: (e: Error | undefined, result: T | undefined) => void,\n  preventThrowingError?: boolean\n): Promise<T> {\n  let error: Error | undefined;\n  let result: T | undefined;\n  try {\n    result = await execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result as T;\n  }\n}\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA;;;;;AAKA,OAAM,SAAUA,sBAAsBA,CACpCC,OAAgB,EAChBC,QAA+D,EAC/DC,oBAA8B;EAE9B,IAAIC,KAAwB;EAC5B,IAAIC,MAAqB;EACzB,IAAI;IACFA,MAAM,GAAGJ,OAAO,EAAE;GACnB,CAAC,OAAOK,CAAC,EAAE;IACVF,KAAK,GAAGE,CAAC;GACV,SAAS;IACRJ,QAAQ,CAACE,KAAK,EAAEC,MAAM,CAAC;IACvB,IAAID,KAAK,IAAI,CAACD,oBAAoB,EAAE;MAClC;MACA,MAAMC,KAAK;;IAEb;IACA,OAAOC,MAAW;;AAEtB;AAEA;;;;;AAKA,OAAO,eAAeE,2BAA2BA,CAC/CN,OAAgB,EAChBC,QAA+D,EAC/DC,oBAA8B;EAE9B,IAAIC,KAAwB;EAC5B,IAAIC,MAAqB;EACzB,IAAI;IACFA,MAAM,GAAG,MAAMJ,OAAO,EAAE;GACzB,CAAC,OAAOK,CAAC,EAAE;IACVF,KAAK,GAAGE,CAAC;GACV,SAAS;IACRJ,QAAQ,CAACE,KAAK,EAAEC,MAAM,CAAC;IACvB,IAAID,KAAK,IAAI,CAACD,oBAAoB,EAAE;MAClC;MACA,MAAMC,KAAK;;IAEb;IACA,OAAOC,MAAW;;AAEtB;AACA;;;;AAIA,OAAM,SAAUG,SAASA,CAACC,IAAa;EACrC,OACE,OAAOA,IAAI,KAAK,UAAU,IAC1B,OAAQA,IAAoB,CAACC,UAAU,KAAK,UAAU,IACtD,OAAQD,IAAoB,CAACE,QAAQ,KAAK,UAAU,IACnDF,IAAoB,CAACG,SAAS,KAAK,IAAI;AAE5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}