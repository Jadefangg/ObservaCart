{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Much of the logic here overlaps with the same utils file in opentelemetry-instrumentation-xml-http-request\n// These may be unified in the future.\nimport * as api from '@opentelemetry/api';\nimport { getStringListFromEnv } from '@opentelemetry/core';\nconst DIAG_LOGGER = api.diag.createComponentLogger({\n  namespace: '@opentelemetry/opentelemetry-instrumentation-fetch/utils'\n});\n/**\n * Helper function to determine payload content length for fetch requests\n *\n * The fetch API is kinda messy: there are a couple of ways the body can be passed in.\n *\n * In all cases, the body param can be some variation of ReadableStream,\n * and ReadableStreams can only be read once! We want to avoid consuming the body here,\n * because that would mean that the body never gets sent with the actual fetch request.\n *\n * Either the first arg is a Request object, which can be cloned\n *   so we can clone that object and read the body of the clone\n *   without disturbing the original argument\n *   However, reading the body here can only be done async; the body() method returns a promise\n *   this means this entire function has to return a promise\n *\n * OR the first arg is a url/string\n *   in which case the second arg has type RequestInit\n *   RequestInit is NOT cloneable, but RequestInit.body is writable\n *   so we can chain it into ReadableStream.pipeThrough()\n *\n *   ReadableStream.pipeThrough() lets us process a stream and returns a new stream\n *   So we can measure the body length as it passes through the pie, but need to attach\n *   the new stream to the original request\n *   so that the browser still has access to the body.\n *\n * @param body\n * @returns promise that resolves to the content length of the body\n */\nexport function getFetchBodyLength(...args) {\n  if (args[0] instanceof URL || typeof args[0] === 'string') {\n    const requestInit = args[1];\n    if (!requestInit?.body) {\n      return Promise.resolve();\n    }\n    if (requestInit.body instanceof ReadableStream) {\n      const {\n        body,\n        length\n      } = _getBodyNonDestructively(requestInit.body);\n      requestInit.body = body;\n      return length;\n    } else {\n      return Promise.resolve(getXHRBodyLength(requestInit.body));\n    }\n  } else {\n    const info = args[0];\n    if (!info?.body) {\n      return Promise.resolve();\n    }\n    return info.clone().text().then(t => getByteLength(t));\n  }\n}\nfunction _getBodyNonDestructively(body) {\n  // can't read a ReadableStream without destroying it\n  // but we CAN pipe it through and return a new ReadableStream\n  // some (older) platforms don't expose the pipeThrough method and in that scenario, we're out of luck;\n  //   there's no way to read the stream without consuming it.\n  if (!body.pipeThrough) {\n    DIAG_LOGGER.warn('Platform has ReadableStream but not pipeThrough!');\n    return {\n      body,\n      length: Promise.resolve(undefined)\n    };\n  }\n  let length = 0;\n  let resolveLength;\n  const lengthPromise = new Promise(resolve => {\n    resolveLength = resolve;\n  });\n  const transform = new TransformStream({\n    start() {},\n    async transform(chunk, controller) {\n      const bytearray = await chunk;\n      length += bytearray.byteLength;\n      controller.enqueue(chunk);\n    },\n    flush() {\n      resolveLength(length);\n    }\n  });\n  return {\n    body: body.pipeThrough(transform),\n    length: lengthPromise\n  };\n}\nfunction isDocument(value) {\n  return typeof Document !== 'undefined' && value instanceof Document;\n}\n/**\n * Helper function to determine payload content length for XHR requests\n * @param body\n * @returns content length\n */\nexport function getXHRBodyLength(body) {\n  if (isDocument(body)) {\n    return new XMLSerializer().serializeToString(document).length;\n  }\n  // XMLHttpRequestBodyInit expands to the following:\n  if (typeof body === 'string') {\n    return getByteLength(body);\n  }\n  if (body instanceof Blob) {\n    return body.size;\n  }\n  if (body instanceof FormData) {\n    return getFormDataSize(body);\n  }\n  if (body instanceof URLSearchParams) {\n    return getByteLength(body.toString());\n  }\n  // ArrayBuffer | ArrayBufferView\n  if (body.byteLength !== undefined) {\n    return body.byteLength;\n  }\n  DIAG_LOGGER.warn('unknown body type');\n  return undefined;\n}\nconst TEXT_ENCODER = new TextEncoder();\nfunction getByteLength(s) {\n  return TEXT_ENCODER.encode(s).byteLength;\n}\nfunction getFormDataSize(formData) {\n  let size = 0;\n  for (const [key, value] of formData.entries()) {\n    size += key.length;\n    if (value instanceof Blob) {\n      size += value.size;\n    } else {\n      size += value.length;\n    }\n  }\n  return size;\n}\n/**\n * Normalize an HTTP request method string per `http.request.method` spec\n * https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md#http-client-span\n */\nexport function normalizeHttpRequestMethod(method) {\n  const knownMethods = getKnownMethods();\n  const methUpper = method.toUpperCase();\n  if (methUpper in knownMethods) {\n    return methUpper;\n  } else {\n    return '_OTHER';\n  }\n}\nconst DEFAULT_KNOWN_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true\n};\nlet knownMethods;\nfunction getKnownMethods() {\n  if (knownMethods === undefined) {\n    const cfgMethods = getStringListFromEnv('OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS');\n    if (cfgMethods && cfgMethods.length > 0) {\n      knownMethods = {};\n      cfgMethods.forEach(m => {\n        knownMethods[m] = true;\n      });\n    } else {\n      knownMethods = DEFAULT_KNOWN_METHODS;\n    }\n  }\n  return knownMethods;\n}\nconst HTTP_PORT_FROM_PROTOCOL = {\n  'https:': '443',\n  'http:': '80'\n};\nexport function serverPortFromUrl(url) {\n  const serverPort = Number(url.port || HTTP_PORT_FROM_PROTOCOL[url.protocol]);\n  // Guard with `if (serverPort)` because `Number('') === 0`.\n  if (serverPort && !isNaN(serverPort)) {\n    return serverPort;\n  } else {\n    return undefined;\n  }\n}","map":{"version":3,"names":["api","getStringListFromEnv","DIAG_LOGGER","diag","createComponentLogger","namespace","getFetchBodyLength","args","URL","requestInit","body","Promise","resolve","ReadableStream","length","_getBodyNonDestructively","getXHRBodyLength","info","clone","text","then","t","getByteLength","pipeThrough","warn","undefined","resolveLength","lengthPromise","transform","TransformStream","start","chunk","controller","bytearray","byteLength","enqueue","flush","isDocument","value","Document","XMLSerializer","serializeToString","document","Blob","size","FormData","getFormDataSize","URLSearchParams","toString","TEXT_ENCODER","TextEncoder","s","encode","formData","key","entries","normalizeHttpRequestMethod","method","knownMethods","getKnownMethods","methUpper","toUpperCase","DEFAULT_KNOWN_METHODS","CONNECT","DELETE","GET","HEAD","OPTIONS","PATCH","POST","PUT","TRACE","cfgMethods","forEach","m","HTTP_PORT_FROM_PROTOCOL","serverPortFromUrl","url","serverPort","Number","port","protocol","isNaN"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\instrumentation-fetch\\src\\utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Much of the logic here overlaps with the same utils file in opentelemetry-instrumentation-xml-http-request\n// These may be unified in the future.\n\nimport * as api from '@opentelemetry/api';\nimport { getStringListFromEnv } from '@opentelemetry/core';\nimport { URLLike } from '@opentelemetry/sdk-trace-web';\n\nconst DIAG_LOGGER = api.diag.createComponentLogger({\n  namespace: '@opentelemetry/opentelemetry-instrumentation-fetch/utils',\n});\n\n/**\n * Helper function to determine payload content length for fetch requests\n *\n * The fetch API is kinda messy: there are a couple of ways the body can be passed in.\n *\n * In all cases, the body param can be some variation of ReadableStream,\n * and ReadableStreams can only be read once! We want to avoid consuming the body here,\n * because that would mean that the body never gets sent with the actual fetch request.\n *\n * Either the first arg is a Request object, which can be cloned\n *   so we can clone that object and read the body of the clone\n *   without disturbing the original argument\n *   However, reading the body here can only be done async; the body() method returns a promise\n *   this means this entire function has to return a promise\n *\n * OR the first arg is a url/string\n *   in which case the second arg has type RequestInit\n *   RequestInit is NOT cloneable, but RequestInit.body is writable\n *   so we can chain it into ReadableStream.pipeThrough()\n *\n *   ReadableStream.pipeThrough() lets us process a stream and returns a new stream\n *   So we can measure the body length as it passes through the pie, but need to attach\n *   the new stream to the original request\n *   so that the browser still has access to the body.\n *\n * @param body\n * @returns promise that resolves to the content length of the body\n */\nexport function getFetchBodyLength(...args: Parameters<typeof fetch>) {\n  if (args[0] instanceof URL || typeof args[0] === 'string') {\n    const requestInit = args[1];\n    if (!requestInit?.body) {\n      return Promise.resolve();\n    }\n    if (requestInit.body instanceof ReadableStream) {\n      const { body, length } = _getBodyNonDestructively(requestInit.body);\n      requestInit.body = body;\n\n      return length;\n    } else {\n      return Promise.resolve(getXHRBodyLength(requestInit.body));\n    }\n  } else {\n    const info = args[0];\n    if (!info?.body) {\n      return Promise.resolve();\n    }\n\n    return info\n      .clone()\n      .text()\n      .then(t => getByteLength(t));\n  }\n}\n\nfunction _getBodyNonDestructively(body: ReadableStream) {\n  // can't read a ReadableStream without destroying it\n  // but we CAN pipe it through and return a new ReadableStream\n\n  // some (older) platforms don't expose the pipeThrough method and in that scenario, we're out of luck;\n  //   there's no way to read the stream without consuming it.\n  if (!body.pipeThrough) {\n    DIAG_LOGGER.warn('Platform has ReadableStream but not pipeThrough!');\n    return {\n      body,\n      length: Promise.resolve(undefined),\n    };\n  }\n\n  let length = 0;\n  let resolveLength: (l: number) => void;\n  const lengthPromise = new Promise<number>(resolve => {\n    resolveLength = resolve;\n  });\n\n  const transform = new TransformStream({\n    start() {},\n    async transform(chunk, controller) {\n      const bytearray = (await chunk) as Uint8Array;\n      length += bytearray.byteLength;\n\n      controller.enqueue(chunk);\n    },\n    flush() {\n      resolveLength(length);\n    },\n  });\n\n  return {\n    body: body.pipeThrough(transform),\n    length: lengthPromise,\n  };\n}\n\nfunction isDocument(value: unknown): value is Document {\n  return typeof Document !== 'undefined' && value instanceof Document;\n}\n\n/**\n * Helper function to determine payload content length for XHR requests\n * @param body\n * @returns content length\n */\nexport function getXHRBodyLength(\n  body: Document | XMLHttpRequestBodyInit\n): number | undefined {\n  if (isDocument(body)) {\n    return new XMLSerializer().serializeToString(document).length;\n  }\n\n  // XMLHttpRequestBodyInit expands to the following:\n  if (typeof body === 'string') {\n    return getByteLength(body);\n  }\n\n  if (body instanceof Blob) {\n    return body.size;\n  }\n\n  if (body instanceof FormData) {\n    return getFormDataSize(body);\n  }\n\n  if (body instanceof URLSearchParams) {\n    return getByteLength(body.toString());\n  }\n\n  // ArrayBuffer | ArrayBufferView\n  if (body.byteLength !== undefined) {\n    return body.byteLength;\n  }\n\n  DIAG_LOGGER.warn('unknown body type');\n  return undefined;\n}\n\nconst TEXT_ENCODER = new TextEncoder();\nfunction getByteLength(s: string): number {\n  return TEXT_ENCODER.encode(s).byteLength;\n}\n\nfunction getFormDataSize(formData: FormData): number {\n  let size = 0;\n  for (const [key, value] of formData.entries()) {\n    size += key.length;\n    if (value instanceof Blob) {\n      size += value.size;\n    } else {\n      size += value.length;\n    }\n  }\n  return size;\n}\n\n/**\n * Normalize an HTTP request method string per `http.request.method` spec\n * https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md#http-client-span\n */\nexport function normalizeHttpRequestMethod(method: string): string {\n  const knownMethods = getKnownMethods();\n  const methUpper = method.toUpperCase();\n  if (methUpper in knownMethods) {\n    return methUpper;\n  } else {\n    return '_OTHER';\n  }\n}\n\nconst DEFAULT_KNOWN_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true,\n};\nlet knownMethods: { [key: string]: boolean };\nfunction getKnownMethods() {\n  if (knownMethods === undefined) {\n    const cfgMethods = getStringListFromEnv(\n      'OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS'\n    );\n    if (cfgMethods && cfgMethods.length > 0) {\n      knownMethods = {};\n      cfgMethods.forEach(m => {\n        knownMethods[m] = true;\n      });\n    } else {\n      knownMethods = DEFAULT_KNOWN_METHODS;\n    }\n  }\n  return knownMethods;\n}\n\nconst HTTP_PORT_FROM_PROTOCOL: { [key: string]: string } = {\n  'https:': '443',\n  'http:': '80',\n};\nexport function serverPortFromUrl(url: URLLike): number | undefined {\n  const serverPort = Number(url.port || HTTP_PORT_FROM_PROTOCOL[url.protocol]);\n  // Guard with `if (serverPort)` because `Number('') === 0`.\n  if (serverPort && !isNaN(serverPort)) {\n    return serverPort;\n  } else {\n    return undefined;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}