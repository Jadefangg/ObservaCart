{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { AlwaysOffSampler, AlwaysOnSampler, getEnv, TracesSamplerValues, ParentBasedSampler, TraceIdRatioBasedSampler } from '@opentelemetry/core';\nvar env = getEnv();\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\nexport var DEFAULT_CONFIG = {\n  sampler: buildSamplerFromEnv(env),\n  forceFlushTimeoutMillis: 30000,\n  generalLimits: {\n    attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT\n  },\n  spanLimits: {\n    attributeValueLengthLimit: getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n    linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n    eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT\n  }\n};\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(environment) {\n  if (environment === void 0) {\n    environment = getEnv();\n  }\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler()\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler()\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment))\n      });\n    default:\n      diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n      return new AlwaysOnSampler();\n  }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n  if (environment.OTEL_TRACES_SAMPLER_ARG === undefined || environment.OTEL_TRACES_SAMPLER_ARG === '') {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n  if (isNaN(probability)) {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  if (probability < 0 || probability > 1) {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  return probability;\n}","map":{"version":3,"names":["diag","AlwaysOffSampler","AlwaysOnSampler","getEnv","TracesSamplerValues","ParentBasedSampler","TraceIdRatioBasedSampler","env","FALLBACK_OTEL_TRACES_SAMPLER","AlwaysOn","DEFAULT_RATIO","DEFAULT_CONFIG","sampler","buildSamplerFromEnv","forceFlushTimeoutMillis","generalLimits","attributeValueLengthLimit","OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT","attributeCountLimit","OTEL_ATTRIBUTE_COUNT_LIMIT","spanLimits","OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","linkCountLimit","OTEL_SPAN_LINK_COUNT_LIMIT","eventCountLimit","OTEL_SPAN_EVENT_COUNT_LIMIT","environment","OTEL_TRACES_SAMPLER","AlwaysOff","ParentBasedAlwaysOn","root","ParentBasedAlwaysOff","TraceIdRatio","getSamplerProbabilityFromEnv","ParentBasedTraceIdRatio","error","OTEL_TRACES_SAMPLER_ARG","undefined","probability","Number","isNaN"],"sources":["../../src/config.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,IAAI,QAAiB,oBAAoB;AAClD,SACEC,gBAAgB,EAChBC,eAAe,EACfC,MAAM,EACNC,mBAAmB,EACnBC,kBAAkB,EAElBC,wBAAwB,QACnB,qBAAqB;AAE5B,IAAMC,GAAG,GAAGJ,MAAM,EAAE;AACpB,IAAMK,4BAA4B,GAAGJ,mBAAmB,CAACK,QAAQ;AACjE,IAAMC,aAAa,GAAG,CAAC;AAEvB;;;;;;AAMA,OAAO,IAAMC,cAAc,GAAG;EAC5BC,OAAO,EAAEC,mBAAmB,CAACN,GAAG,CAAC;EACjCO,uBAAuB,EAAE,KAAK;EAC9BC,aAAa,EAAE;IACbC,yBAAyB,EAAEb,MAAM,EAAE,CAACc,iCAAiC;IACrEC,mBAAmB,EAAEf,MAAM,EAAE,CAACgB;GAC/B;EACDC,UAAU,EAAE;IACVJ,yBAAyB,EAAEb,MAAM,EAAE,CAACkB,sCAAsC;IAC1EH,mBAAmB,EAAEf,MAAM,EAAE,CAACmB,+BAA+B;IAC7DC,cAAc,EAAEpB,MAAM,EAAE,CAACqB,0BAA0B;IACnDC,eAAe,EAAEtB,MAAM,EAAE,CAACuB;;CAE7B;AAED;;;;AAIA,OAAM,SAAUb,mBAAmBA,CACjCc,WAA6C;EAA7C,IAAAA,WAAA;IAAAA,WAAA,GAAqCxB,MAAM,EAAE;EAAA;EAE7C,QAAQwB,WAAW,CAACC,mBAAmB;IACrC,KAAKxB,mBAAmB,CAACK,QAAQ;MAC/B,OAAO,IAAIP,eAAe,EAAE;IAC9B,KAAKE,mBAAmB,CAACyB,SAAS;MAChC,OAAO,IAAI5B,gBAAgB,EAAE;IAC/B,KAAKG,mBAAmB,CAAC0B,mBAAmB;MAC1C,OAAO,IAAIzB,kBAAkB,CAAC;QAC5B0B,IAAI,EAAE,IAAI7B,eAAe;OAC1B,CAAC;IACJ,KAAKE,mBAAmB,CAAC4B,oBAAoB;MAC3C,OAAO,IAAI3B,kBAAkB,CAAC;QAC5B0B,IAAI,EAAE,IAAI9B,gBAAgB;OAC3B,CAAC;IACJ,KAAKG,mBAAmB,CAAC6B,YAAY;MACnC,OAAO,IAAI3B,wBAAwB,CAAC4B,4BAA4B,CAACP,WAAW,CAAC,CAAC;IAChF,KAAKvB,mBAAmB,CAAC+B,uBAAuB;MAC9C,OAAO,IAAI9B,kBAAkB,CAAC;QAC5B0B,IAAI,EAAE,IAAIzB,wBAAwB,CAAC4B,4BAA4B,CAACP,WAAW,CAAC;OAC7E,CAAC;IACJ;MACE3B,IAAI,CAACoC,KAAK,CACR,iCAA8BT,WAAW,CAACC,mBAAmB,gCAA2BpB,4BAA4B,QAAI,CACzH;MACD,OAAO,IAAIN,eAAe,EAAE;;AAElC;AAEA,SAASgC,4BAA4BA,CACnCP,WAAkC;EAElC,IACEA,WAAW,CAACU,uBAAuB,KAAKC,SAAS,IACjDX,WAAW,CAACU,uBAAuB,KAAK,EAAE,EAC1C;IACArC,IAAI,CAACoC,KAAK,CACR,qDAAmD1B,aAAa,MAAG,CACpE;IACD,OAAOA,aAAa;;EAGtB,IAAM6B,WAAW,GAAGC,MAAM,CAACb,WAAW,CAACU,uBAAuB,CAAC;EAE/D,IAAII,KAAK,CAACF,WAAW,CAAC,EAAE;IACtBvC,IAAI,CAACoC,KAAK,CACR,6BAA2BT,WAAW,CAACU,uBAAuB,qDAAgD3B,aAAa,MAAG,CAC/H;IACD,OAAOA,aAAa;;EAGtB,IAAI6B,WAAW,GAAG,CAAC,IAAIA,WAAW,GAAG,CAAC,EAAE;IACtCvC,IAAI,CAACoC,KAAK,CACR,6BAA2BT,WAAW,CAACU,uBAAuB,mEAA8D3B,aAAa,MAAG,CAC7I;IACD,OAAOA,aAAa;;EAGtB,OAAO6B,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}