{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { BaseObserverMetric } from './BaseObserverMetric';\nimport { MetricKind } from './export/types';\n/** This is a SDK implementation of SumObserver Metric. */\nvar SumObserverMetric = /** @class */function (_super) {\n  __extends(SumObserverMetric, _super);\n  function SumObserverMetric(name, options, processor, resource, instrumentationLibrary, callback) {\n    return _super.call(this, name, options, processor, resource, MetricKind.SUM_OBSERVER, instrumentationLibrary, callback) || this;\n  }\n  SumObserverMetric.prototype._processResults = function (observerResult) {\n    var _this = this;\n    observerResult.values.forEach(function (value, labels) {\n      var instrument = _this.bind(labels);\n      // SumObserver is monotonic which means it should only accept values\n      // greater or equal then previous value\n      var previous = instrument.getAggregator().toPoint();\n      var previousValue = -Infinity;\n      if (previous.timestamp[0] !== 0 || previous.timestamp[1] !== 0) {\n        previousValue = previous.value;\n      }\n      if (value >= previousValue) {\n        instrument.update(value);\n      }\n    });\n  };\n  return SumObserverMetric;\n}(BaseObserverMetric);\nexport { SumObserverMetric };","map":{"version":3,"names":["BaseObserverMetric","MetricKind","SumObserverMetric","_super","__extends","name","options","processor","resource","instrumentationLibrary","callback","call","SUM_OBSERVER","prototype","_processResults","observerResult","_this","values","forEach","value","labels","instrument","bind","previous","getAggregator","toPoint","previousValue","Infinity","timestamp","update"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-metrics-base\\src\\SumObserverMetric.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { BaseObserverMetric } from './BaseObserverMetric';\nimport { Processor } from './export/Processor';\nimport { LastValue, MetricKind } from './export/types';\nimport { ObserverResult } from './ObserverResult';\n\n/** This is a SDK implementation of SumObserver Metric. */\nexport class SumObserverMetric\n  extends BaseObserverMetric\n  implements api.SumObserver {\n  constructor(\n    name: string,\n    options: api.MetricOptions,\n    processor: Processor,\n    resource: Resource,\n    instrumentationLibrary: InstrumentationLibrary,\n    callback?: (observerResult: api.ObserverResult) => unknown\n  ) {\n    super(\n      name,\n      options,\n      processor,\n      resource,\n      MetricKind.SUM_OBSERVER,\n      instrumentationLibrary,\n      callback\n    );\n  }\n\n  protected override _processResults(observerResult: ObserverResult): void {\n    observerResult.values.forEach((value, labels) => {\n      const instrument = this.bind(labels);\n      // SumObserver is monotonic which means it should only accept values\n      // greater or equal then previous value\n      const previous = instrument.getAggregator().toPoint();\n      let previousValue = -Infinity;\n      if (previous.timestamp[0] !== 0 || previous.timestamp[1] !== 0) {\n        previousValue = previous.value as LastValue;\n      }\n      if (value >= previousValue) {\n        instrument.update(value);\n      }\n    });\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,SAASA,kBAAkB,QAAQ,sBAAsB;AAEzD,SAAoBC,UAAU,QAAQ,gBAAgB;AAGtD;AACA,IAAAC,iBAAA,0BAAAC,MAAA;EACUC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAER,SAAAD,kBACEG,IAAY,EACZC,OAA0B,EAC1BC,SAAoB,EACpBC,QAAkB,EAClBC,sBAA8C,EAC9CC,QAA0D;WAE1DP,MAAA,CAAAQ,IAAA,OACEN,IAAI,EACJC,OAAO,EACPC,SAAS,EACTC,QAAQ,EACRP,UAAU,CAACW,YAAY,EACvBH,sBAAsB,EACtBC,QAAQ,CACT;EACH;EAEmBR,iBAAA,CAAAW,SAAA,CAAAC,eAAe,GAAlC,UAAmCC,cAA8B;IAAjE,IAAAC,KAAA;IACED,cAAc,CAACE,MAAM,CAACC,OAAO,CAAC,UAACC,KAAK,EAAEC,MAAM;MAC1C,IAAMC,UAAU,GAAGL,KAAI,CAACM,IAAI,CAACF,MAAM,CAAC;MACpC;MACA;MACA,IAAMG,QAAQ,GAAGF,UAAU,CAACG,aAAa,EAAE,CAACC,OAAO,EAAE;MACrD,IAAIC,aAAa,GAAG,CAACC,QAAQ;MAC7B,IAAIJ,QAAQ,CAACK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,IAAIL,QAAQ,CAACK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QAC9DF,aAAa,GAAGH,QAAQ,CAACJ,KAAkB;;MAE7C,IAAIA,KAAK,IAAIO,aAAa,EAAE;QAC1BL,UAAU,CAACQ,MAAM,CAACV,KAAK,CAAC;;IAE5B,CAAC,CAAC;EACJ,CAAC;EACH,OAAAjB,iBAAC;AAAD,CAAC,CApCSF,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}