{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Resource } from '@opentelemetry/resources';\nimport { Meter } from '.';\nimport { DEFAULT_CONFIG } from './types';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar merge = require('lodash.merge');\n/**\n * This class represents a meter provider which platform libraries can extend\n */\nvar MeterProvider = /** @class */function () {\n  function MeterProvider(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this._meters = new Map();\n    this._shuttingDownPromise = Promise.resolve();\n    this._isShutdown = false;\n    var mergedConfig = merge({}, DEFAULT_CONFIG, config);\n    this.resource = mergedConfig.resource || Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource\n    });\n  }\n  /**\n   * Returns a Meter, creating one if one with the given name and version is not already created\n   *\n   * @returns Meter A Meter with the given name and version\n   */\n  MeterProvider.prototype.getMeter = function (name, version, config) {\n    var key = name + \"@\" + (version || '');\n    if (!this._meters.has(key)) {\n      this._meters.set(key, new Meter({\n        name: name,\n        version: version\n      }, config || this._config));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._meters.get(key);\n  };\n  MeterProvider.prototype.shutdown = function () {\n    var _this = this;\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n    this._isShutdown = true;\n    this._shuttingDownPromise = new Promise(function (resolve, reject) {\n      Promise.resolve().then(function () {\n        return Promise.all(Array.from(_this._meters, function (_a) {\n          var _ = _a[0],\n            meter = _a[1];\n          return meter.shutdown();\n        }));\n      }).then(function () {\n        if (_this._config.exporter) {\n          return _this._config.exporter.shutdown();\n        }\n        return;\n      }).then(resolve).catch(function (e) {\n        reject(e);\n      });\n    });\n    return this._shuttingDownPromise;\n  };\n  return MeterProvider;\n}();\nexport { MeterProvider };","map":{"version":3,"names":["Resource","Meter","DEFAULT_CONFIG","merge","require","MeterProvider","config","_meters","Map","_shuttingDownPromise","Promise","resolve","_isShutdown","mergedConfig","resource","empty","default","_config","Object","assign","prototype","getMeter","name","version","key","has","set","get","shutdown","_this","reject","then","all","Array","from","_a","_","meter","exporter","catch","e"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-metrics-base\\src\\MeterProvider.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { Resource } from '@opentelemetry/resources';\nimport { Meter } from '.';\nimport { DEFAULT_CONFIG, MeterConfig } from './types';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst merge = require('lodash.merge');\n\n/**\n * This class represents a meter provider which platform libraries can extend\n */\nexport class MeterProvider implements api.MeterProvider {\n  private readonly _config: MeterConfig;\n  private readonly _meters: Map<string, Meter> = new Map();\n  private _shuttingDownPromise: Promise<void> = Promise.resolve();\n  private _isShutdown = false;\n  readonly resource: Resource;\n\n  constructor(config: MeterConfig = {}) {\n    const mergedConfig = merge({}, DEFAULT_CONFIG, config);\n    this.resource = mergedConfig.resource || Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource,\n    });\n  }\n\n  /**\n   * Returns a Meter, creating one if one with the given name and version is not already created\n   *\n   * @returns Meter A Meter with the given name and version\n   */\n  getMeter(name: string, version?: string, config?: MeterConfig): Meter {\n    const key = `${name}@${version || ''}`;\n    if (!this._meters.has(key)) {\n      this._meters.set(\n        key,\n        new Meter({ name, version }, config || this._config)\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._meters.get(key)!;\n  }\n\n  shutdown(): Promise<void> {\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n    this._isShutdown = true;\n\n    this._shuttingDownPromise = new Promise((resolve, reject) => {\n      Promise.resolve()\n        .then(() => {\n          return Promise.all(\n            Array.from(this._meters, ([_, meter]) => meter.shutdown())\n          );\n        })\n        .then(() => {\n          if (this._config.exporter) {\n            return this._config.exporter.shutdown();\n          }\n          return;\n        })\n        .then(resolve)\n        .catch(e => {\n          reject(e);\n        });\n    });\n    return this._shuttingDownPromise;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA,SAASA,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,KAAK,QAAQ,GAAG;AACzB,SAASC,cAAc,QAAqB,SAAS;AACrD;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,cAAc,CAAC;AAErC;;;AAGA,IAAAC,aAAA;EAOE,SAAAA,cAAYC,MAAwB;IAAxB,IAAAA,MAAA;MAAAA,MAAA,KAAwB;IAAA;IALnB,KAAAC,OAAO,GAAuB,IAAIC,GAAG,EAAE;IAChD,KAAAC,oBAAoB,GAAkBC,OAAO,CAACC,OAAO,EAAE;IACvD,KAAAC,WAAW,GAAG,KAAK;IAIzB,IAAMC,YAAY,GAAGV,KAAK,CAAC,EAAE,EAAED,cAAc,EAAEI,MAAM,CAAC;IACtD,IAAI,CAACQ,QAAQ,GAAGD,YAAY,CAACC,QAAQ,IAAId,QAAQ,CAACe,KAAK,EAAE;IACzD,IAAI,CAACD,QAAQ,GAAGd,QAAQ,CAACgB,OAAO,EAAE,CAACb,KAAK,CAAC,IAAI,CAACW,QAAQ,CAAC;IACvD,IAAI,CAACG,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEN,YAAY,EAAE;MAC7CC,QAAQ,EAAE,IAAI,CAACA;KAChB,CAAC;EACJ;EAEA;;;;;EAKAT,aAAA,CAAAe,SAAA,CAAAC,QAAQ,GAAR,UAASC,IAAY,EAAEC,OAAgB,EAAEjB,MAAoB;IAC3D,IAAMkB,GAAG,GAAMF,IAAI,UAAIC,OAAO,IAAI,EAAE,CAAE;IACtC,IAAI,CAAC,IAAI,CAAChB,OAAO,CAACkB,GAAG,CAACD,GAAG,CAAC,EAAE;MAC1B,IAAI,CAACjB,OAAO,CAACmB,GAAG,CACdF,GAAG,EACH,IAAIvB,KAAK,CAAC;QAAEqB,IAAI,EAAAA,IAAA;QAAEC,OAAO,EAAAA;MAAA,CAAE,EAAEjB,MAAM,IAAI,IAAI,CAACW,OAAO,CAAC,CACrD;;IAGH;IACA,OAAO,IAAI,CAACV,OAAO,CAACoB,GAAG,CAACH,GAAG,CAAE;EAC/B,CAAC;EAEDnB,aAAA,CAAAe,SAAA,CAAAQ,QAAQ,GAAR;IAAA,IAAAC,KAAA;IACE,IAAI,IAAI,CAACjB,WAAW,EAAE;MACpB,OAAO,IAAI,CAACH,oBAAoB;;IAElC,IAAI,CAACG,WAAW,GAAG,IAAI;IAEvB,IAAI,CAACH,oBAAoB,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEmB,MAAM;MACtDpB,OAAO,CAACC,OAAO,EAAE,CACdoB,IAAI,CAAC;QACJ,OAAOrB,OAAO,CAACsB,GAAG,CAChBC,KAAK,CAACC,IAAI,CAACL,KAAI,CAACtB,OAAO,EAAE,UAAC4B,EAAU;cAATC,CAAC,GAAAD,EAAA;YAAEE,KAAK,GAAAF,EAAA;UAAM,OAAAE,KAAK,CAACT,QAAQ,EAAE;QAAhB,CAAgB,CAAC,CAC3D;MACH,CAAC,CAAC,CACDG,IAAI,CAAC;QACJ,IAAIF,KAAI,CAACZ,OAAO,CAACqB,QAAQ,EAAE;UACzB,OAAOT,KAAI,CAACZ,OAAO,CAACqB,QAAQ,CAACV,QAAQ,EAAE;;QAEzC;MACF,CAAC,CAAC,CACDG,IAAI,CAACpB,OAAO,CAAC,CACb4B,KAAK,CAAC,UAAAC,CAAC;QACNV,MAAM,CAACU,CAAC,CAAC;MACX,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI,CAAC/B,oBAAoB;EAClC,CAAC;EACH,OAAAJ,aAAC;AAAD,CAAC,CA5DD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}