{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { InstrumentationAbstract } from '../../instrumentation';\n/**\n * Base abstract class for instrumenting web plugins\n */\nexport class InstrumentationBase extends InstrumentationAbstract {\n  constructor(instrumentationName, instrumentationVersion, config) {\n    super(instrumentationName, instrumentationVersion, config);\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n}","map":{"version":3,"names":["InstrumentationAbstract","InstrumentationBase","constructor","instrumentationName","instrumentationVersion","config","_config","enabled","enable"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\instrumentation\\src\\platform\\browser\\instrumentation.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationAbstract } from '../../instrumentation';\nimport * as types from '../../types';\nimport { InstrumentationConfig } from '../../types';\n\n/**\n * Base abstract class for instrumenting web plugins\n */\nexport abstract class InstrumentationBase<\n    ConfigType extends InstrumentationConfig = InstrumentationConfig,\n  >\n  extends InstrumentationAbstract<ConfigType>\n  implements types.Instrumentation<ConfigType>\n{\n  constructor(\n    instrumentationName: string,\n    instrumentationVersion: string,\n    config: ConfigType\n  ) {\n    super(instrumentationName, instrumentationVersion, config);\n\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,uBAAuB,QAAQ,uBAAuB;AAI/D;;;AAGA,OAAM,MAAgBC,mBAGpB,SAAQD,uBAAmC;EAG3CE,YACEC,mBAA2B,EAC3BC,sBAA8B,EAC9BC,MAAkB;IAElB,KAAK,CAACF,mBAAmB,EAAEC,sBAAsB,EAAEC,MAAM,CAAC;IAE1D,IAAI,IAAI,CAACC,OAAO,CAACC,OAAO,EAAE;MACxB,IAAI,CAACC,MAAM,EAAE;;EAEjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}