{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { emptyResource, resourceFromDetectedResource } from './ResourceImpl';\n/**\n * Runs all resource detectors and returns the results merged into a single Resource.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResources = (config = {}) => {\n  const resources = (config.detectors || []).map(d => {\n    try {\n      const resource = resourceFromDetectedResource(d.detect(config));\n      diag.debug(`${d.constructor.name} found resource.`, resource);\n      return resource;\n    } catch (e) {\n      diag.debug(`${d.constructor.name} failed: ${e.message}`);\n      return emptyResource();\n    }\n  });\n  return resources.reduce((acc, resource) => acc.merge(resource), emptyResource());\n};","map":{"version":3,"names":["diag","emptyResource","resourceFromDetectedResource","detectResources","config","resources","detectors","map","d","resource","detect","debug","constructor","name","e","message","reduce","acc","merge"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\resources\\src\\detect-resources.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { Resource } from './Resource';\nimport { emptyResource, resourceFromDetectedResource } from './ResourceImpl';\nimport { ResourceDetectionConfig } from './config';\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResources = (\n  config: ResourceDetectionConfig = {}\n): Resource => {\n  const resources: Resource[] = (config.detectors || []).map(d => {\n    try {\n      const resource = resourceFromDetectedResource(d.detect(config));\n      diag.debug(`${d.constructor.name} found resource.`, resource);\n      return resource;\n    } catch (e) {\n      diag.debug(`${d.constructor.name} failed: ${e.message}`);\n      return emptyResource();\n    }\n  });\n\n  return resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    emptyResource()\n  );\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,IAAI,QAAQ,oBAAoB;AAEzC,SAASC,aAAa,EAAEC,4BAA4B,QAAQ,gBAAgB;AAG5E;;;;;AAKA,OAAO,MAAMC,eAAe,GAAGA,CAC7BC,MAAA,GAAkC,EAAE,KACxB;EACZ,MAAMC,SAAS,GAAe,CAACD,MAAM,CAACE,SAAS,IAAI,EAAE,EAAEC,GAAG,CAACC,CAAC,IAAG;IAC7D,IAAI;MACF,MAAMC,QAAQ,GAAGP,4BAA4B,CAACM,CAAC,CAACE,MAAM,CAACN,MAAM,CAAC,CAAC;MAC/DJ,IAAI,CAACW,KAAK,CAAC,GAAGH,CAAC,CAACI,WAAW,CAACC,IAAI,kBAAkB,EAAEJ,QAAQ,CAAC;MAC7D,OAAOA,QAAQ;KAChB,CAAC,OAAOK,CAAC,EAAE;MACVd,IAAI,CAACW,KAAK,CAAC,GAAGH,CAAC,CAACI,WAAW,CAACC,IAAI,YAAYC,CAAC,CAACC,OAAO,EAAE,CAAC;MACxD,OAAOd,aAAa,EAAE;;EAE1B,CAAC,CAAC;EAEF,OAAOI,SAAS,CAACW,MAAM,CACrB,CAACC,GAAG,EAAER,QAAQ,KAAKQ,GAAG,CAACC,KAAK,CAACT,QAAQ,CAAC,EACtCR,aAAa,EAAE,CAChB;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}