{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */function () {\n  function Resource(\n  /**\n   * A dictionary of attributes with string keys and values that provide\n   * information about the entity as numbers, strings or booleans\n   * TODO: Consider to add check/validation on attributes.\n   */\n  attributes) {\n    this.attributes = attributes;\n  }\n  /**\n   * Returns an empty Resource\n   */\n  Resource.empty = function () {\n    return Resource.EMPTY;\n  };\n  /**\n   * Returns a Resource that indentifies the SDK in use.\n   */\n  Resource.default = function () {\n    var _a;\n    return new Resource((_a = {}, _a[SemanticResourceAttributes.SERVICE_NAME] = defaultServiceName(), _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE], _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME], _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION], _a));\n  };\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  Resource.prototype.merge = function (other) {\n    if (!other || !Object.keys(other.attributes).length) return this;\n    // SpanAttributes from resource overwrite attributes from other resource.\n    var mergedAttributes = Object.assign({}, this.attributes, other.attributes);\n    return new Resource(mergedAttributes);\n  };\n  Resource.EMPTY = new Resource({});\n  return Resource;\n}();\nexport { Resource };","map":{"version":3,"names":["SemanticResourceAttributes","SDK_INFO","defaultServiceName","Resource","attributes","empty","EMPTY","default","_a","SERVICE_NAME","TELEMETRY_SDK_LANGUAGE","TELEMETRY_SDK_NAME","TELEMETRY_SDK_VERSION","prototype","merge","other","Object","keys","length","mergedAttributes","assign"],"sources":["../../src/Resource.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,0BAA0B,QAAQ,qCAAqC;AAChF,SAASC,QAAQ,QAAQ,qBAAqB;AAE9C,SAASC,kBAAkB,QAAQ,YAAY;AAE/C;;;;AAIA,IAAAC,QAAA;EAyBE,SAAAA;EACE;;;;;EAKSC,UAA8B;IAA9B,KAAAA,UAAU,GAAVA,UAAU;EAClB;EA7BH;;;EAGOD,QAAA,CAAAE,KAAK,GAAZ;IACE,OAAOF,QAAQ,CAACG,KAAK;EACvB,CAAC;EAED;;;EAGOH,QAAA,CAAAI,OAAO,GAAd;;IACE,OAAO,IAAIJ,QAAQ,EAAAK,EAAA,OACjBA,EAAA,CAACR,0BAA0B,CAACS,YAAY,IAAGP,kBAAkB,EAAE,EAC/DM,EAAA,CAACR,0BAA0B,CAACU,sBAAsB,IAChDT,QAAQ,CAACD,0BAA0B,CAACU,sBAAsB,CAAC,EAC7DF,EAAA,CAACR,0BAA0B,CAACW,kBAAkB,IAC5CV,QAAQ,CAACD,0BAA0B,CAACW,kBAAkB,CAAC,EACzDH,EAAA,CAACR,0BAA0B,CAACY,qBAAqB,IAC/CX,QAAQ,CAACD,0BAA0B,CAACY,qBAAqB,CAAC,E,IAC5D;EACJ,CAAC;EAWD;;;;;;;;EAQAT,QAAA,CAAAU,SAAA,CAAAC,KAAK,GAAL,UAAMC,KAAsB;IAC1B,IAAI,CAACA,KAAK,IAAI,CAACC,MAAM,CAACC,IAAI,CAACF,KAAK,CAACX,UAAU,CAAC,CAACc,MAAM,EAAE,OAAO,IAAI;IAEhE;IACA,IAAMC,gBAAgB,GAAGH,MAAM,CAACI,MAAM,CACpC,EAAE,EACF,IAAI,CAAChB,UAAU,EACfW,KAAK,CAACX,UAAU,CACjB;IACD,OAAO,IAAID,QAAQ,CAACgB,gBAAgB,CAAC;EACvC,CAAC;EAnDehB,QAAA,CAAAG,KAAK,GAAG,IAAIH,QAAQ,CAAC,EAAE,CAAC;EAoD1C,OAAAA,QAAC;CAAA,CArDD;SAAaA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}