{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { sanitizeAttributes, isTracingSuppressed } from '@opentelemetry/core';\nimport { SpanImpl } from './Span';\nimport { mergeConfig } from './utility';\nimport { RandomIdGenerator } from './platform';\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer {\n  _sampler;\n  _generalLimits;\n  _spanLimits;\n  _idGenerator;\n  instrumentationScope;\n  _resource;\n  _spanProcessor;\n  /**\n   * Constructs a new Tracer instance.\n   */\n  constructor(instrumentationScope, config, resource, spanProcessor) {\n    const localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this._resource = resource;\n    this._spanProcessor = spanProcessor;\n    this.instrumentationScope = instrumentationScope;\n  }\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  startSpan(name, options = {}, context = api.context.active()) {\n    // remove span from context in case a root span is requested via options\n    if (options.root) {\n      context = api.trace.deleteSpan(context);\n    }\n    const parentSpan = api.trace.getSpan(context);\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n      return nonRecordingSpan;\n    }\n    const parentSpanContext = parentSpan?.spanContext();\n    const spanId = this._idGenerator.generateSpanId();\n    let validParentSpanContext;\n    let traceId;\n    let traceState;\n    if (!parentSpanContext || !api.trace.isSpanContextValid(parentSpanContext)) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentSpanContext.traceId;\n      traceState = parentSpanContext.traceState;\n      validParentSpanContext = parentSpanContext;\n    }\n    const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n    const links = (options.links ?? []).map(link => {\n      return {\n        context: link.context,\n        attributes: sanitizeAttributes(link.attributes)\n      };\n    });\n    const attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    const samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n    traceState = samplingResult.traceState ?? traceState;\n    const traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE;\n    const spanContext = {\n      traceId,\n      spanId,\n      traceFlags,\n      traceState\n    };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug('Recording is off, propagating context in a non-recording span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n      return nonRecordingSpan;\n    }\n    // Set initial span attributes. The attributes object may have been mutated\n    // by the sampler, so we sanitize the merged attributes before setting them.\n    const initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n    const span = new SpanImpl({\n      resource: this._resource,\n      scope: this.instrumentationScope,\n      context,\n      spanContext,\n      name,\n      kind: spanKind,\n      links,\n      parentSpanContext: validParentSpanContext,\n      attributes: initAttributes,\n      startTime: options.startTime,\n      spanProcessor: this._spanProcessor,\n      spanLimits: this._spanLimits\n    });\n    return span;\n  }\n  startActiveSpan(name, arg2, arg3, arg4) {\n    let opts;\n    let ctx;\n    let fn;\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2;\n    } else if (arguments.length === 3) {\n      opts = arg2;\n      fn = arg3;\n    } else {\n      opts = arg2;\n      ctx = arg3;\n      fn = arg4;\n    }\n    const parentContext = ctx ?? api.context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  }\n  /** Returns the active {@link GeneralLimits}. */\n  getGeneralLimits() {\n    return this._generalLimits;\n  }\n  /** Returns the active {@link SpanLimits}. */\n  getSpanLimits() {\n    return this._spanLimits;\n  }\n}","map":{"version":3,"names":["api","sanitizeAttributes","isTracingSuppressed","SpanImpl","mergeConfig","RandomIdGenerator","Tracer","_sampler","_generalLimits","_spanLimits","_idGenerator","instrumentationScope","_resource","_spanProcessor","constructor","config","resource","spanProcessor","localConfig","sampler","generalLimits","spanLimits","idGenerator","startSpan","name","options","context","active","root","trace","deleteSpan","parentSpan","getSpan","diag","debug","nonRecordingSpan","wrapSpanContext","INVALID_SPAN_CONTEXT","parentSpanContext","spanContext","spanId","generateSpanId","validParentSpanContext","traceId","traceState","isSpanContextValid","generateTraceId","spanKind","kind","SpanKind","INTERNAL","links","map","link","attributes","samplingResult","shouldSample","traceFlags","decision","SamplingDecision","RECORD_AND_SAMPLED","TraceFlags","SAMPLED","NONE","NOT_RECORD","initAttributes","Object","assign","span","scope","startTime","startActiveSpan","arg2","arg3","arg4","opts","ctx","fn","arguments","length","parentContext","contextWithSpanSet","setSpan","with","undefined","getGeneralLimits","getSpanLimits"],"sources":["C:/Users/Sartaj/Desktop/ObservaCart/observacart/frontend/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { sanitizeAttributes, isTracingSuppressed, } from '@opentelemetry/core';\nimport { SpanImpl } from './Span';\nimport { mergeConfig } from './utility';\nimport { RandomIdGenerator } from './platform';\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer {\n    _sampler;\n    _generalLimits;\n    _spanLimits;\n    _idGenerator;\n    instrumentationScope;\n    _resource;\n    _spanProcessor;\n    /**\n     * Constructs a new Tracer instance.\n     */\n    constructor(instrumentationScope, config, resource, spanProcessor) {\n        const localConfig = mergeConfig(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new RandomIdGenerator();\n        this._resource = resource;\n        this._spanProcessor = spanProcessor;\n        this.instrumentationScope = instrumentationScope;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    startSpan(name, options = {}, context = api.context.active()) {\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = api.trace.deleteSpan(context);\n        }\n        const parentSpan = api.trace.getSpan(context);\n        if (isTracingSuppressed(context)) {\n            api.diag.debug('Instrumentation suppressed, returning Noop Span');\n            const nonRecordingSpan = api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        const parentSpanContext = parentSpan?.spanContext();\n        const spanId = this._idGenerator.generateSpanId();\n        let validParentSpanContext;\n        let traceId;\n        let traceState;\n        if (!parentSpanContext ||\n            !api.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            validParentSpanContext = parentSpanContext;\n        }\n        const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n        const links = (options.links ?? []).map(link => {\n            return {\n                context: link.context,\n                attributes: sanitizeAttributes(link.attributes),\n            };\n        });\n        const attributes = sanitizeAttributes(options.attributes);\n        // make sampling decision\n        const samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = samplingResult.traceState ?? traceState;\n        const traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n            ? api.TraceFlags.SAMPLED\n            : api.TraceFlags.NONE;\n        const spanContext = { traceId, spanId, traceFlags, traceState };\n        if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n            api.diag.debug('Recording is off, propagating context in a non-recording span');\n            const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        const initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n        const span = new SpanImpl({\n            resource: this._resource,\n            scope: this.instrumentationScope,\n            context,\n            spanContext,\n            name,\n            kind: spanKind,\n            links,\n            parentSpanContext: validParentSpanContext,\n            attributes: initAttributes,\n            startTime: options.startTime,\n            spanProcessor: this._spanProcessor,\n            spanLimits: this._spanLimits,\n        });\n        return span;\n    }\n    startActiveSpan(name, arg2, arg3, arg4) {\n        let opts;\n        let ctx;\n        let fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        const parentContext = ctx ?? api.context.active();\n        const span = this.startSpan(name, opts, parentContext);\n        const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n        return api.context.with(contextWithSpanSet, fn, undefined, span);\n    }\n    /** Returns the active {@link GeneralLimits}. */\n    getGeneralLimits() {\n        return this._generalLimits;\n    }\n    /** Returns the active {@link SpanLimits}. */\n    getSpanLimits() {\n        return this._spanLimits;\n    }\n}\n//# sourceMappingURL=Tracer.js.map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,GAAG,MAAM,oBAAoB;AACzC,SAASC,kBAAkB,EAAEC,mBAAmB,QAAS,qBAAqB;AAC9E,SAASC,QAAQ,QAAQ,QAAQ;AACjC,SAASC,WAAW,QAAQ,WAAW;AACvC,SAASC,iBAAiB,QAAQ,YAAY;AAC9C;AACA;AACA;AACA,OAAO,MAAMC,MAAM,CAAC;EAChBC,QAAQ;EACRC,cAAc;EACdC,WAAW;EACXC,YAAY;EACZC,oBAAoB;EACpBC,SAAS;EACTC,cAAc;EACd;AACJ;AACA;EACIC,WAAWA,CAACH,oBAAoB,EAAEI,MAAM,EAAEC,QAAQ,EAAEC,aAAa,EAAE;IAC/D,MAAMC,WAAW,GAAGd,WAAW,CAACW,MAAM,CAAC;IACvC,IAAI,CAACR,QAAQ,GAAGW,WAAW,CAACC,OAAO;IACnC,IAAI,CAACX,cAAc,GAAGU,WAAW,CAACE,aAAa;IAC/C,IAAI,CAACX,WAAW,GAAGS,WAAW,CAACG,UAAU;IACzC,IAAI,CAACX,YAAY,GAAGK,MAAM,CAACO,WAAW,IAAI,IAAIjB,iBAAiB,CAAC,CAAC;IACjE,IAAI,CAACO,SAAS,GAAGI,QAAQ;IACzB,IAAI,CAACH,cAAc,GAAGI,aAAa;IACnC,IAAI,CAACN,oBAAoB,GAAGA,oBAAoB;EACpD;EACA;AACJ;AACA;AACA;EACIY,SAASA,CAACC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,OAAO,GAAG1B,GAAG,CAAC0B,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;IAC1D;IACA,IAAIF,OAAO,CAACG,IAAI,EAAE;MACdF,OAAO,GAAG1B,GAAG,CAAC6B,KAAK,CAACC,UAAU,CAACJ,OAAO,CAAC;IAC3C;IACA,MAAMK,UAAU,GAAG/B,GAAG,CAAC6B,KAAK,CAACG,OAAO,CAACN,OAAO,CAAC;IAC7C,IAAIxB,mBAAmB,CAACwB,OAAO,CAAC,EAAE;MAC9B1B,GAAG,CAACiC,IAAI,CAACC,KAAK,CAAC,iDAAiD,CAAC;MACjE,MAAMC,gBAAgB,GAAGnC,GAAG,CAAC6B,KAAK,CAACO,eAAe,CAACpC,GAAG,CAACqC,oBAAoB,CAAC;MAC5E,OAAOF,gBAAgB;IAC3B;IACA,MAAMG,iBAAiB,GAAGP,UAAU,EAAEQ,WAAW,CAAC,CAAC;IACnD,MAAMC,MAAM,GAAG,IAAI,CAAC9B,YAAY,CAAC+B,cAAc,CAAC,CAAC;IACjD,IAAIC,sBAAsB;IAC1B,IAAIC,OAAO;IACX,IAAIC,UAAU;IACd,IAAI,CAACN,iBAAiB,IAClB,CAACtC,GAAG,CAAC6B,KAAK,CAACgB,kBAAkB,CAACP,iBAAiB,CAAC,EAAE;MAClD;MACAK,OAAO,GAAG,IAAI,CAACjC,YAAY,CAACoC,eAAe,CAAC,CAAC;IACjD,CAAC,MACI;MACD;MACAH,OAAO,GAAGL,iBAAiB,CAACK,OAAO;MACnCC,UAAU,GAAGN,iBAAiB,CAACM,UAAU;MACzCF,sBAAsB,GAAGJ,iBAAiB;IAC9C;IACA,MAAMS,QAAQ,GAAGtB,OAAO,CAACuB,IAAI,IAAIhD,GAAG,CAACiD,QAAQ,CAACC,QAAQ;IACtD,MAAMC,KAAK,GAAG,CAAC1B,OAAO,CAAC0B,KAAK,IAAI,EAAE,EAAEC,GAAG,CAACC,IAAI,IAAI;MAC5C,OAAO;QACH3B,OAAO,EAAE2B,IAAI,CAAC3B,OAAO;QACrB4B,UAAU,EAAErD,kBAAkB,CAACoD,IAAI,CAACC,UAAU;MAClD,CAAC;IACL,CAAC,CAAC;IACF,MAAMA,UAAU,GAAGrD,kBAAkB,CAACwB,OAAO,CAAC6B,UAAU,CAAC;IACzD;IACA,MAAMC,cAAc,GAAG,IAAI,CAAChD,QAAQ,CAACiD,YAAY,CAAC9B,OAAO,EAAEiB,OAAO,EAAEnB,IAAI,EAAEuB,QAAQ,EAAEO,UAAU,EAAEH,KAAK,CAAC;IACtGP,UAAU,GAAGW,cAAc,CAACX,UAAU,IAAIA,UAAU;IACpD,MAAMa,UAAU,GAAGF,cAAc,CAACG,QAAQ,KAAK1D,GAAG,CAAC2D,gBAAgB,CAACC,kBAAkB,GAChF5D,GAAG,CAAC6D,UAAU,CAACC,OAAO,GACtB9D,GAAG,CAAC6D,UAAU,CAACE,IAAI;IACzB,MAAMxB,WAAW,GAAG;MAAEI,OAAO;MAAEH,MAAM;MAAEiB,UAAU;MAAEb;IAAW,CAAC;IAC/D,IAAIW,cAAc,CAACG,QAAQ,KAAK1D,GAAG,CAAC2D,gBAAgB,CAACK,UAAU,EAAE;MAC7DhE,GAAG,CAACiC,IAAI,CAACC,KAAK,CAAC,+DAA+D,CAAC;MAC/E,MAAMC,gBAAgB,GAAGnC,GAAG,CAAC6B,KAAK,CAACO,eAAe,CAACG,WAAW,CAAC;MAC/D,OAAOJ,gBAAgB;IAC3B;IACA;IACA;IACA,MAAM8B,cAAc,GAAGhE,kBAAkB,CAACiE,MAAM,CAACC,MAAM,CAACb,UAAU,EAAEC,cAAc,CAACD,UAAU,CAAC,CAAC;IAC/F,MAAMc,IAAI,GAAG,IAAIjE,QAAQ,CAAC;MACtBa,QAAQ,EAAE,IAAI,CAACJ,SAAS;MACxByD,KAAK,EAAE,IAAI,CAAC1D,oBAAoB;MAChCe,OAAO;MACPa,WAAW;MACXf,IAAI;MACJwB,IAAI,EAAED,QAAQ;MACdI,KAAK;MACLb,iBAAiB,EAAEI,sBAAsB;MACzCY,UAAU,EAAEW,cAAc;MAC1BK,SAAS,EAAE7C,OAAO,CAAC6C,SAAS;MAC5BrD,aAAa,EAAE,IAAI,CAACJ,cAAc;MAClCQ,UAAU,EAAE,IAAI,CAACZ;IACrB,CAAC,CAAC;IACF,OAAO2D,IAAI;EACf;EACAG,eAAeA,CAAC/C,IAAI,EAAEgD,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACpC,IAAIC,IAAI;IACR,IAAIC,GAAG;IACP,IAAIC,EAAE;IACN,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACtB;IACJ,CAAC,MACI,IAAID,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7BF,EAAE,GAAGL,IAAI;IACb,CAAC,MACI,IAAIM,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7BJ,IAAI,GAAGH,IAAI;MACXK,EAAE,GAAGJ,IAAI;IACb,CAAC,MACI;MACDE,IAAI,GAAGH,IAAI;MACXI,GAAG,GAAGH,IAAI;MACVI,EAAE,GAAGH,IAAI;IACb;IACA,MAAMM,aAAa,GAAGJ,GAAG,IAAI5E,GAAG,CAAC0B,OAAO,CAACC,MAAM,CAAC,CAAC;IACjD,MAAMyC,IAAI,GAAG,IAAI,CAAC7C,SAAS,CAACC,IAAI,EAAEmD,IAAI,EAAEK,aAAa,CAAC;IACtD,MAAMC,kBAAkB,GAAGjF,GAAG,CAAC6B,KAAK,CAACqD,OAAO,CAACF,aAAa,EAAEZ,IAAI,CAAC;IACjE,OAAOpE,GAAG,CAAC0B,OAAO,CAACyD,IAAI,CAACF,kBAAkB,EAAEJ,EAAE,EAAEO,SAAS,EAAEhB,IAAI,CAAC;EACpE;EACA;EACAiB,gBAAgBA,CAAA,EAAG;IACf,OAAO,IAAI,CAAC7E,cAAc;EAC9B;EACA;EACA8E,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC7E,WAAW;EAC3B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}