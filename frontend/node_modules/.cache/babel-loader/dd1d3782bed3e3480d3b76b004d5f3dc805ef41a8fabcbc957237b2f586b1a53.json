{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { getNumberFromEnv, getStringFromEnv } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\nconst DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: getNumberFromEnv('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n      attributeCountLimit: getNumberFromEnv('OTEL_ATTRIBUTE_COUNT_LIMIT') ?? 128\n    },\n    spanLimits: {\n      attributeValueLengthLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n      attributeCountLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n      linkCountLimit: getNumberFromEnv('OTEL_SPAN_LINK_COUNT_LIMIT') ?? 128,\n      eventCountLimit: getNumberFromEnv('OTEL_SPAN_EVENT_COUNT_LIMIT') ?? 128,\n      attributePerEventCountLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT') ?? 128,\n      attributePerLinkCountLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT') ?? 128\n    }\n  };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n */\nexport function buildSamplerFromEnv() {\n  const sampler = getStringFromEnv('OTEL_TRACES_SAMPLER') ?? \"parentbased_always_on\" /* TracesSamplerValues.ParentBasedAlwaysOn */;\n  switch (sampler) {\n    case \"always_on\" /* TracesSamplerValues.AlwaysOn */:\n      return new AlwaysOnSampler();\n    case \"always_off\" /* TracesSamplerValues.AlwaysOff */:\n      return new AlwaysOffSampler();\n    case \"parentbased_always_on\" /* TracesSamplerValues.ParentBasedAlwaysOn */:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler()\n      });\n    case \"parentbased_always_off\" /* TracesSamplerValues.ParentBasedAlwaysOff */:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler()\n      });\n    case \"traceidratio\" /* TracesSamplerValues.TraceIdRatio */:\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv());\n    case \"parentbased_traceidratio\" /* TracesSamplerValues.ParentBasedTraceIdRatio */:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv())\n      });\n    default:\n      diag.error(`OTEL_TRACES_SAMPLER value \"${sampler}\" invalid, defaulting to \"${\"parentbased_always_on\" /* TracesSamplerValues.ParentBasedAlwaysOn */}\".`);\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler()\n      });\n  }\n}\nfunction getSamplerProbabilityFromEnv() {\n  const probability = getNumberFromEnv('OTEL_TRACES_SAMPLER_ARG');\n  if (probability == null) {\n    diag.error(`OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`);\n    return DEFAULT_RATIO;\n  }\n  if (probability < 0 || probability > 1) {\n    diag.error(`OTEL_TRACES_SAMPLER_ARG=${probability} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`);\n    return DEFAULT_RATIO;\n  }\n  return probability;\n}","map":{"version":3,"names":["diag","getNumberFromEnv","getStringFromEnv","AlwaysOffSampler","AlwaysOnSampler","ParentBasedSampler","TraceIdRatioBasedSampler","DEFAULT_RATIO","loadDefaultConfig","sampler","buildSamplerFromEnv","forceFlushTimeoutMillis","generalLimits","attributeValueLengthLimit","Infinity","attributeCountLimit","spanLimits","linkCountLimit","eventCountLimit","attributePerEventCountLimit","attributePerLinkCountLimit","root","getSamplerProbabilityFromEnv","error","probability"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-web\\node_modules\\@opentelemetry\\sdk-trace-base\\src\\config.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getNumberFromEnv, getStringFromEnv } from '@opentelemetry/core';\nimport { Sampler } from './Sampler';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\n\nconst enum TracesSamplerValues {\n  AlwaysOff = 'always_off',\n  AlwaysOn = 'always_on',\n  ParentBasedAlwaysOff = 'parentbased_always_off',\n  ParentBasedAlwaysOn = 'parentbased_always_on',\n  ParentBasedTraceIdRatio = 'parentbased_traceidratio',\n  TraceIdRatio = 'traceidratio',\n}\n\nconst DEFAULT_RATIO = 1;\n\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit:\n        getNumberFromEnv('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n      attributeCountLimit:\n        getNumberFromEnv('OTEL_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n    },\n    spanLimits: {\n      attributeValueLengthLimit:\n        getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n      attributeCountLimit:\n        getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n      linkCountLimit: getNumberFromEnv('OTEL_SPAN_LINK_COUNT_LIMIT') ?? 128,\n      eventCountLimit: getNumberFromEnv('OTEL_SPAN_EVENT_COUNT_LIMIT') ?? 128,\n      attributePerEventCountLimit:\n        getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT') ?? 128,\n      attributePerLinkCountLimit:\n        getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT') ?? 128,\n    },\n  };\n}\n\n/**\n * Based on environment, builds a sampler, complies with specification.\n */\nexport function buildSamplerFromEnv(): Sampler {\n  const sampler =\n    getStringFromEnv('OTEL_TRACES_SAMPLER') ??\n    TracesSamplerValues.ParentBasedAlwaysOn;\n  switch (sampler) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv());\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv()),\n      });\n    default:\n      diag.error(\n        `OTEL_TRACES_SAMPLER value \"${sampler}\" invalid, defaulting to \"${TracesSamplerValues.ParentBasedAlwaysOn}\".`\n      );\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(): number | undefined {\n  const probability = getNumberFromEnv('OTEL_TRACES_SAMPLER_ARG');\n  if (probability == null) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${probability} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,IAAI,QAAQ,oBAAoB;AACzC,SAASC,gBAAgB,EAAEC,gBAAgB,QAAQ,qBAAqB;AAExE,SAASC,gBAAgB,QAAQ,4BAA4B;AAC7D,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,wBAAwB,QAAQ,oCAAoC;AAW7E,MAAMC,aAAa,GAAG,CAAC;AAEvB;;;;;;AAOA;AACA;AACA,OAAM,SAAUC,iBAAiBA,CAAA;EAC/B,OAAO;IACLC,OAAO,EAAEC,mBAAmB,EAAE;IAC9BC,uBAAuB,EAAE,KAAK;IAC9BC,aAAa,EAAE;MACbC,yBAAyB,EACvBZ,gBAAgB,CAAC,mCAAmC,CAAC,IAAIa,QAAQ;MACnEC,mBAAmB,EACjBd,gBAAgB,CAAC,4BAA4B,CAAC,IAAI;KACrD;IACDe,UAAU,EAAE;MACVH,yBAAyB,EACvBZ,gBAAgB,CAAC,wCAAwC,CAAC,IAAIa,QAAQ;MACxEC,mBAAmB,EACjBd,gBAAgB,CAAC,iCAAiC,CAAC,IAAI,GAAG;MAC5DgB,cAAc,EAAEhB,gBAAgB,CAAC,4BAA4B,CAAC,IAAI,GAAG;MACrEiB,eAAe,EAAEjB,gBAAgB,CAAC,6BAA6B,CAAC,IAAI,GAAG;MACvEkB,2BAA2B,EACzBlB,gBAAgB,CAAC,2CAA2C,CAAC,IAAI,GAAG;MACtEmB,0BAA0B,EACxBnB,gBAAgB,CAAC,0CAA0C,CAAC,IAAI;;GAErE;AACH;AAEA;;;AAGA,OAAM,SAAUS,mBAAmBA,CAAA;EACjC,MAAMD,OAAO,GACXP,gBAAgB,CAAC,qBAAqB,CAAC,I;EAEzC,QAAQO,OAAO;IACb;MACE,OAAO,IAAIL,eAAe,EAAE;IAC9B;MACE,OAAO,IAAID,gBAAgB,EAAE;IAC/B;MACE,OAAO,IAAIE,kBAAkB,CAAC;QAC5BgB,IAAI,EAAE,IAAIjB,eAAe;OAC1B,CAAC;IACJ;MACE,OAAO,IAAIC,kBAAkB,CAAC;QAC5BgB,IAAI,EAAE,IAAIlB,gBAAgB;OAC3B,CAAC;IACJ;MACE,OAAO,IAAIG,wBAAwB,CAACgB,4BAA4B,EAAE,CAAC;IACrE;MACE,OAAO,IAAIjB,kBAAkB,CAAC;QAC5BgB,IAAI,EAAE,IAAIf,wBAAwB,CAACgB,4BAA4B,EAAE;OAClE,CAAC;IACJ;MACEtB,IAAI,CAACuB,KAAK,CACR,8BAA8Bd,OAAO,6BAA6B,yEAA2C,CAC9G;MACD,OAAO,IAAIJ,kBAAkB,CAAC;QAC5BgB,IAAI,EAAE,IAAIjB,eAAe;OAC1B,CAAC;;AAER;AAEA,SAASkB,4BAA4BA,CAAA;EACnC,MAAME,WAAW,GAAGvB,gBAAgB,CAAC,yBAAyB,CAAC;EAC/D,IAAIuB,WAAW,IAAI,IAAI,EAAE;IACvBxB,IAAI,CAACuB,KAAK,CACR,mDAAmDhB,aAAa,GAAG,CACpE;IACD,OAAOA,aAAa;;EAGtB,IAAIiB,WAAW,GAAG,CAAC,IAAIA,WAAW,GAAG,CAAC,EAAE;IACtCxB,IAAI,CAACuB,KAAK,CACR,2BAA2BC,WAAW,8DAA8DjB,aAAa,GAAG,CACrH;IACD,OAAOA,aAAa;;EAGtB,OAAOiB,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}