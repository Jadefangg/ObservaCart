{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { OTLPExporterBrowserBase } from './OTLPExporterBrowserBase';\nimport { toOTLPExportTraceServiceRequest } from '../../transform';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { appendResourcePathToUrlIfNotPresent } from '../../util';\nvar DEFAULT_COLLECTOR_RESOURCE_PATH = '/v1/traces';\nvar DEFAULT_COLLECTOR_URL = \"http://localhost:55681\" + DEFAULT_COLLECTOR_RESOURCE_PATH;\n/**\n * Collector Trace Exporter for Web\n */\nvar OTLPTraceExporter = /** @class */function (_super) {\n  __extends(OTLPTraceExporter, _super);\n  function OTLPTraceExporter(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this, config) || this;\n    _this._headers = Object.assign(_this._headers, baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_TRACES_HEADERS));\n    return _this;\n  }\n  OTLPTraceExporter.prototype.convert = function (spans) {\n    return toOTLPExportTraceServiceRequest(spans, this, true);\n  };\n  OTLPTraceExporter.prototype.getDefaultUrl = function (config) {\n    return typeof config.url === 'string' ? config.url : getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0 ? getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0 ? appendResourcePathToUrlIfNotPresent(getEnv().OTEL_EXPORTER_OTLP_ENDPOINT, DEFAULT_COLLECTOR_RESOURCE_PATH) : DEFAULT_COLLECTOR_URL;\n  };\n  return OTLPTraceExporter;\n}(OTLPExporterBrowserBase);\nexport { OTLPTraceExporter };","map":{"version":3,"names":["OTLPExporterBrowserBase","toOTLPExportTraceServiceRequest","getEnv","baggageUtils","appendResourcePathToUrlIfNotPresent","DEFAULT_COLLECTOR_RESOURCE_PATH","DEFAULT_COLLECTOR_URL","OTLPTraceExporter","_super","__extends","config","_this","call","_headers","Object","assign","parseKeyPairsIntoRecord","OTEL_EXPORTER_OTLP_TRACES_HEADERS","prototype","convert","spans","getDefaultUrl","url","OTEL_EXPORTER_OTLP_TRACES_ENDPOINT","length","OTEL_EXPORTER_OTLP_ENDPOINT"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\exporter-otlp-http\\src\\platform\\browser\\OTLPTraceExporter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPExporterConfigBase } from '../../types';\nimport { OTLPExporterBrowserBase } from './OTLPExporterBrowserBase';\nimport { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-base';\nimport { toOTLPExportTraceServiceRequest } from '../../transform';\nimport * as otlpTypes from '../../types';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { appendResourcePathToUrlIfNotPresent } from '../../util';\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = '/v1/traces';\nconst DEFAULT_COLLECTOR_URL=`http://localhost:55681${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\n\n/**\n * Collector Trace Exporter for Web\n */\nexport class OTLPTraceExporter\n  extends OTLPExporterBrowserBase<\n    ReadableSpan,\n    otlpTypes.opentelemetryProto.collector.trace.v1.ExportTraceServiceRequest\n  >\n  implements SpanExporter {\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n    this._headers = Object.assign(\n      this._headers,\n      baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_TRACES_HEADERS\n      )\n    );\n  }\n  convert(\n    spans: ReadableSpan[]\n  ): otlpTypes.opentelemetryProto.collector.trace.v1.ExportTraceServiceRequest {\n    return toOTLPExportTraceServiceRequest(spans, this, true);\n  }\n\n  getDefaultUrl(config: OTLPExporterConfigBase): string {\n    return typeof config.url === 'string'\n      ? config.url\n      : getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0\n      ? getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? appendResourcePathToUrlIfNotPresent(getEnv().OTEL_EXPORTER_OTLP_ENDPOINT, DEFAULT_COLLECTOR_RESOURCE_PATH)\n      : DEFAULT_COLLECTOR_URL;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,uBAAuB,QAAQ,2BAA2B;AAEnE,SAASC,+BAA+B,QAAQ,iBAAiB;AAEjE,SAASC,MAAM,EAAEC,YAAY,QAAQ,qBAAqB;AAC1D,SAASC,mCAAmC,QAAQ,YAAY;AAEhE,IAAMC,+BAA+B,GAAG,YAAY;AACpD,IAAMC,qBAAqB,GAAC,2BAAyBD,+BAAiC;AAEtF;;;AAGA,IAAAE,iBAAA,0BAAAC,MAAA;EACUC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAKR,SAAAD,kBAAYG,MAAmC;IAAnC,IAAAA,MAAA;MAAAA,MAAA,KAAmC;IAAA;IAA/C,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,MAAM,CAAC;IACbC,KAAI,CAACE,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAC3BJ,KAAI,CAACE,QAAQ,EACbV,YAAY,CAACa,uBAAuB,CAClCd,MAAM,EAAE,CAACe,iCAAiC,CAC3C,CACF;;EACH;EACAV,iBAAA,CAAAW,SAAA,CAAAC,OAAO,GAAP,UACEC,KAAqB;IAErB,OAAOnB,+BAA+B,CAACmB,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;EAC3D,CAAC;EAEDb,iBAAA,CAAAW,SAAA,CAAAG,aAAa,GAAb,UAAcX,MAA8B;IAC1C,OAAO,OAAOA,MAAM,CAACY,GAAG,KAAK,QAAQ,GACjCZ,MAAM,CAACY,GAAG,GACVpB,MAAM,EAAE,CAACqB,kCAAkC,CAACC,MAAM,GAAG,CAAC,GACtDtB,MAAM,EAAE,CAACqB,kCAAkC,GAC3CrB,MAAM,EAAE,CAACuB,2BAA2B,CAACD,MAAM,GAAG,CAAC,GAC/CpB,mCAAmC,CAACF,MAAM,EAAE,CAACuB,2BAA2B,EAAEpB,+BAA+B,CAAC,GAC1GC,qBAAqB;EAC3B,CAAC;EACH,OAAAC,iBAAC;AAAD,CAAC,CA7BSP,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}