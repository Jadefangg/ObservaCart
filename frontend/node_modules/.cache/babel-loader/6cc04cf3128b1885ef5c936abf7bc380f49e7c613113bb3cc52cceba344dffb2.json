{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { BatchObserverResult } from './BatchObserverResult';\nvar NOOP_CALLBACK = function () {};\nvar MAX_TIMEOUT_UPDATE_MS = 500;\n/** This is a SDK implementation of Batch Observer. */\nvar BatchObserver = /** @class */function () {\n  function BatchObserver(options, callback) {\n    var _a;\n    this._maxTimeoutUpdateMS = (_a = options.maxTimeoutUpdateMS) !== null && _a !== void 0 ? _a : MAX_TIMEOUT_UPDATE_MS;\n    this._callback = callback || NOOP_CALLBACK;\n  }\n  BatchObserver.prototype.collect = function () {\n    var _this = this;\n    diag.debug('getMetricRecord - start');\n    return new Promise(function (resolve) {\n      var observerResult = new BatchObserverResult();\n      // cancels after MAX_TIMEOUT_MS - no more waiting for results\n      var timer = setTimeout(function () {\n        observerResult.cancelled = true;\n        // remove callback to prevent user from updating the values later if\n        // for any reason the observerBatchResult will be referenced\n        observerResult.onObserveCalled();\n        resolve();\n        diag.debug('getMetricRecord - timeout');\n      }, _this._maxTimeoutUpdateMS);\n      // sets callback for each \"observe\" method\n      observerResult.onObserveCalled(function () {\n        clearTimeout(timer);\n        resolve();\n        diag.debug('getMetricRecord - end');\n      });\n      // calls the BatchObserverResult callback\n      _this._callback(observerResult);\n    });\n  };\n  return BatchObserver;\n}();\nexport { BatchObserver };","map":{"version":3,"names":["diag","BatchObserverResult","NOOP_CALLBACK","MAX_TIMEOUT_UPDATE_MS","BatchObserver","options","callback","_maxTimeoutUpdateMS","_a","maxTimeoutUpdateMS","_callback","prototype","collect","_this","debug","Promise","resolve","observerResult","timer","setTimeout","cancelled","onObserveCalled","clearTimeout"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-metrics-base\\src\\BatchObserver.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { diag } from '@opentelemetry/api';\nimport { BatchObserverResult } from './BatchObserverResult';\n\nconst NOOP_CALLBACK = () => {};\nconst MAX_TIMEOUT_UPDATE_MS = 500;\n\n/** This is a SDK implementation of Batch Observer. */\nexport class BatchObserver {\n  private _callback: (observerResult: api.BatchObserverResult) => void;\n  private _maxTimeoutUpdateMS: number;\n\n  constructor(\n    options: api.BatchObserverOptions,\n    callback?: (observerResult: api.BatchObserverResult) => void\n  ) {\n    this._maxTimeoutUpdateMS =\n      options.maxTimeoutUpdateMS ?? MAX_TIMEOUT_UPDATE_MS;\n    this._callback = callback || NOOP_CALLBACK;\n  }\n\n  collect(): Promise<void> {\n    diag.debug('getMetricRecord - start');\n    return new Promise(resolve => {\n      const observerResult = new BatchObserverResult();\n\n      // cancels after MAX_TIMEOUT_MS - no more waiting for results\n      const timer = setTimeout(() => {\n        observerResult.cancelled = true;\n        // remove callback to prevent user from updating the values later if\n        // for any reason the observerBatchResult will be referenced\n        observerResult.onObserveCalled();\n        resolve();\n        diag.debug('getMetricRecord - timeout');\n      }, this._maxTimeoutUpdateMS);\n\n      // sets callback for each \"observe\" method\n      observerResult.onObserveCalled(() => {\n        clearTimeout(timer);\n        resolve();\n        diag.debug('getMetricRecord - end');\n      });\n\n      // calls the BatchObserverResult callback\n      this._callback(observerResult);\n    });\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA,SAASA,IAAI,QAAQ,oBAAoB;AACzC,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,IAAMC,aAAa,GAAG,SAAAA,CAAA,GAAO,CAAC;AAC9B,IAAMC,qBAAqB,GAAG,GAAG;AAEjC;AACA,IAAAC,aAAA;EAIE,SAAAA,cACEC,OAAiC,EACjCC,QAA4D;;IAE5D,IAAI,CAACC,mBAAmB,GACtB,CAAAC,EAAA,GAAAH,OAAO,CAACI,kBAAkB,cAAAD,EAAA,cAAAA,EAAA,GAAIL,qBAAqB;IACrD,IAAI,CAACO,SAAS,GAAGJ,QAAQ,IAAIJ,aAAa;EAC5C;EAEAE,aAAA,CAAAO,SAAA,CAAAC,OAAO,GAAP;IAAA,IAAAC,KAAA;IACEb,IAAI,CAACc,KAAK,CAAC,yBAAyB,CAAC;IACrC,OAAO,IAAIC,OAAO,CAAC,UAAAC,OAAO;MACxB,IAAMC,cAAc,GAAG,IAAIhB,mBAAmB,EAAE;MAEhD;MACA,IAAMiB,KAAK,GAAGC,UAAU,CAAC;QACvBF,cAAc,CAACG,SAAS,GAAG,IAAI;QAC/B;QACA;QACAH,cAAc,CAACI,eAAe,EAAE;QAChCL,OAAO,EAAE;QACThB,IAAI,CAACc,KAAK,CAAC,2BAA2B,CAAC;MACzC,CAAC,EAAED,KAAI,CAACN,mBAAmB,CAAC;MAE5B;MACAU,cAAc,CAACI,eAAe,CAAC;QAC7BC,YAAY,CAACJ,KAAK,CAAC;QACnBF,OAAO,EAAE;QACThB,IAAI,CAACc,KAAK,CAAC,uBAAuB,CAAC;MACrC,CAAC,CAAC;MAEF;MACAD,KAAI,CAACH,SAAS,CAACO,cAAc,CAAC;IAChC,CAAC,CAAC;EACJ,CAAC;EACH,OAAAb,aAAC;AAAD,CAAC,CAvCD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}