{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { sanitizeAttributes, isTracingSuppressed } from '@opentelemetry/core';\nimport { SpanImpl } from './Span';\nimport { mergeConfig } from './utility';\nimport { RandomIdGenerator } from './platform';\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer {\n  _sampler;\n  _generalLimits;\n  _spanLimits;\n  _idGenerator;\n  instrumentationScope;\n  _resource;\n  _spanProcessor;\n  /**\n   * Constructs a new Tracer instance.\n   */\n  constructor(instrumentationScope, config, resource, spanProcessor) {\n    const localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this._resource = resource;\n    this._spanProcessor = spanProcessor;\n    this.instrumentationScope = instrumentationScope;\n  }\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  startSpan(name, options = {}, context = api.context.active()) {\n    // remove span from context in case a root span is requested via options\n    if (options.root) {\n      context = api.trace.deleteSpan(context);\n    }\n    const parentSpan = api.trace.getSpan(context);\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n      return nonRecordingSpan;\n    }\n    const parentSpanContext = parentSpan?.spanContext();\n    const spanId = this._idGenerator.generateSpanId();\n    let validParentSpanContext;\n    let traceId;\n    let traceState;\n    if (!parentSpanContext || !api.trace.isSpanContextValid(parentSpanContext)) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentSpanContext.traceId;\n      traceState = parentSpanContext.traceState;\n      validParentSpanContext = parentSpanContext;\n    }\n    const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n    const links = (options.links ?? []).map(link => {\n      return {\n        context: link.context,\n        attributes: sanitizeAttributes(link.attributes)\n      };\n    });\n    const attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    const samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n    traceState = samplingResult.traceState ?? traceState;\n    const traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE;\n    const spanContext = {\n      traceId,\n      spanId,\n      traceFlags,\n      traceState\n    };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug('Recording is off, propagating context in a non-recording span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n      return nonRecordingSpan;\n    }\n    // Set initial span attributes. The attributes object may have been mutated\n    // by the sampler, so we sanitize the merged attributes before setting them.\n    const initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n    const span = new SpanImpl({\n      resource: this._resource,\n      scope: this.instrumentationScope,\n      context,\n      spanContext,\n      name,\n      kind: spanKind,\n      links,\n      parentSpanContext: validParentSpanContext,\n      attributes: initAttributes,\n      startTime: options.startTime,\n      spanProcessor: this._spanProcessor,\n      spanLimits: this._spanLimits\n    });\n    return span;\n  }\n  startActiveSpan(name, arg2, arg3, arg4) {\n    let opts;\n    let ctx;\n    let fn;\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2;\n    } else if (arguments.length === 3) {\n      opts = arg2;\n      fn = arg3;\n    } else {\n      opts = arg2;\n      ctx = arg3;\n      fn = arg4;\n    }\n    const parentContext = ctx ?? api.context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  }\n  /** Returns the active {@link GeneralLimits}. */\n  getGeneralLimits() {\n    return this._generalLimits;\n  }\n  /** Returns the active {@link SpanLimits}. */\n  getSpanLimits() {\n    return this._spanLimits;\n  }\n}","map":{"version":3,"names":["api","sanitizeAttributes","isTracingSuppressed","SpanImpl","mergeConfig","RandomIdGenerator","Tracer","_sampler","_generalLimits","_spanLimits","_idGenerator","instrumentationScope","_resource","_spanProcessor","constructor","config","resource","spanProcessor","localConfig","sampler","generalLimits","spanLimits","idGenerator","startSpan","name","options","context","active","root","trace","deleteSpan","parentSpan","getSpan","diag","debug","nonRecordingSpan","wrapSpanContext","INVALID_SPAN_CONTEXT","parentSpanContext","spanContext","spanId","generateSpanId","validParentSpanContext","traceId","traceState","isSpanContextValid","generateTraceId","spanKind","kind","SpanKind","INTERNAL","links","map","link","attributes","samplingResult","shouldSample","traceFlags","decision","SamplingDecision","RECORD_AND_SAMPLED","TraceFlags","SAMPLED","NONE","NOT_RECORD","initAttributes","Object","assign","span","scope","startTime","startActiveSpan","arg2","arg3","arg4","opts","ctx","fn","arguments","length","parentContext","contextWithSpanSet","setSpan","with","undefined","getGeneralLimits","getSpanLimits"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-base\\src\\Tracer.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  InstrumentationScope,\n  sanitizeAttributes,\n  isTracingSuppressed,\n} from '@opentelemetry/core';\nimport { SpanImpl } from './Span';\nimport { GeneralLimits, SpanLimits, TracerConfig } from './types';\nimport { mergeConfig } from './utility';\nimport { SpanProcessor } from './SpanProcessor';\nimport { Sampler } from './Sampler';\nimport { IdGenerator } from './IdGenerator';\nimport { RandomIdGenerator } from './platform';\nimport { Resource } from '@opentelemetry/resources';\n\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer implements api.Tracer {\n  private readonly _sampler: Sampler;\n  private readonly _generalLimits: GeneralLimits;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _idGenerator: IdGenerator;\n  readonly instrumentationScope: InstrumentationScope;\n\n  private readonly _resource: Resource;\n  private readonly _spanProcessor: SpanProcessor;\n\n  /**\n   * Constructs a new Tracer instance.\n   */\n  constructor(\n    instrumentationScope: InstrumentationScope,\n    config: TracerConfig,\n    resource: Resource,\n    spanProcessor: SpanProcessor\n  ) {\n    const localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this._resource = resource;\n    this._spanProcessor = spanProcessor;\n    this.instrumentationScope = instrumentationScope;\n  }\n\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  startSpan(\n    name: string,\n    options: api.SpanOptions = {},\n    context = api.context.active()\n  ): api.Span {\n    // remove span from context in case a root span is requested via options\n    if (options.root) {\n      context = api.trace.deleteSpan(context);\n    }\n    const parentSpan = api.trace.getSpan(context);\n\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(\n        api.INVALID_SPAN_CONTEXT\n      );\n      return nonRecordingSpan;\n    }\n\n    const parentSpanContext = parentSpan?.spanContext();\n    const spanId = this._idGenerator.generateSpanId();\n    let validParentSpanContext;\n    let traceId;\n    let traceState;\n    if (\n      !parentSpanContext ||\n      !api.trace.isSpanContextValid(parentSpanContext)\n    ) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentSpanContext.traceId;\n      traceState = parentSpanContext.traceState;\n      validParentSpanContext = parentSpanContext;\n    }\n\n    const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n    const links = (options.links ?? []).map(link => {\n      return {\n        context: link.context,\n        attributes: sanitizeAttributes(link.attributes),\n      };\n    });\n    const attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    const samplingResult = this._sampler.shouldSample(\n      context,\n      traceId,\n      name,\n      spanKind,\n      attributes,\n      links\n    );\n\n    traceState = samplingResult.traceState ?? traceState;\n\n    const traceFlags =\n      samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n        ? api.TraceFlags.SAMPLED\n        : api.TraceFlags.NONE;\n    const spanContext = { traceId, spanId, traceFlags, traceState };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug(\n        'Recording is off, propagating context in a non-recording span'\n      );\n      const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n      return nonRecordingSpan;\n    }\n\n    // Set initial span attributes. The attributes object may have been mutated\n    // by the sampler, so we sanitize the merged attributes before setting them.\n    const initAttributes = sanitizeAttributes(\n      Object.assign(attributes, samplingResult.attributes)\n    );\n\n    const span = new SpanImpl({\n      resource: this._resource,\n      scope: this.instrumentationScope,\n      context,\n      spanContext,\n      name,\n      kind: spanKind,\n      links,\n      parentSpanContext: validParentSpanContext,\n      attributes: initAttributes,\n      startTime: options.startTime,\n      spanProcessor: this._spanProcessor,\n      spanLimits: this._spanLimits,\n    });\n    return span;\n  }\n\n  /**\n   * Starts a new {@link Span} and calls the given function passing it the\n   * created span as first argument.\n   * Additionally the new span gets set in context and this context is activated\n   * for the duration of the function call.\n   *\n   * @param name The name of the span\n   * @param [options] SpanOptions used for span creation\n   * @param [context] Context to use to extract parent\n   * @param fn function called in the context of the span and receives the newly created span as an argument\n   * @returns return value of fn\n   * @example\n   *   const something = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       span.setStatus({code: SpanStatusCode.OK});\n   *       return something;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     } finally {\n   *       span.end();\n   *     }\n   *   });\n   * @example\n   *   const span = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       return span;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     }\n   *   });\n   *   do some more work\n   *   span.end();\n   */\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    ctx: api.Context,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | api.SpanOptions,\n    arg3?: F | api.Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: api.SpanOptions | undefined;\n    let ctx: api.Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as api.SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as api.SpanOptions | undefined;\n      ctx = arg3 as api.Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? api.context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  }\n\n  /** Returns the active {@link GeneralLimits}. */\n  getGeneralLimits(): GeneralLimits {\n    return this._generalLimits;\n  }\n\n  /** Returns the active {@link SpanLimits}. */\n  getSpanLimits(): SpanLimits {\n    return this._spanLimits;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}