{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_LOGGER } from './NoopLogger';\nexport class ProxyLogger {\n  constructor(_provider, name, version, options) {\n    this._provider = _provider;\n    this.name = name;\n    this.version = version;\n    this.options = options;\n  }\n  /**\n   * Emit a log record. This method should only be used by log appenders.\n   *\n   * @param logRecord\n   */\n  emit(logRecord) {\n    this._getLogger().emit(logRecord);\n  }\n  /**\n   * Try to get a logger from the proxy logger provider.\n   * If the proxy logger provider has no delegate, return a noop logger.\n   */\n  _getLogger() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n    const logger = this._provider.getDelegateLogger(this.name, this.version, this.options);\n    if (!logger) {\n      return NOOP_LOGGER;\n    }\n    this._delegate = logger;\n    return this._delegate;\n  }\n}","map":{"version":3,"names":["NOOP_LOGGER","ProxyLogger","constructor","_provider","name","version","options","emit","logRecord","_getLogger","_delegate","logger","getDelegateLogger"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\api-logs\\src\\ProxyLogger.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NOOP_LOGGER } from './NoopLogger';\nimport { Logger } from './types/Logger';\nimport { LoggerOptions } from './types/LoggerOptions';\nimport { LogRecord } from './types/LogRecord';\n\nexport class ProxyLogger implements Logger {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Logger;\n\n  constructor(\n    private _provider: LoggerDelegator,\n    public readonly name: string,\n    public readonly version?: string | undefined,\n    public readonly options?: LoggerOptions | undefined\n  ) {}\n\n  /**\n   * Emit a log record. This method should only be used by log appenders.\n   *\n   * @param logRecord\n   */\n  emit(logRecord: LogRecord): void {\n    this._getLogger().emit(logRecord);\n  }\n\n  /**\n   * Try to get a logger from the proxy logger provider.\n   * If the proxy logger provider has no delegate, return a noop logger.\n   */\n  private _getLogger() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n    const logger = this._provider.getDelegateLogger(\n      this.name,\n      this.version,\n      this.options\n    );\n    if (!logger) {\n      return NOOP_LOGGER;\n    }\n    this._delegate = logger;\n    return this._delegate;\n  }\n}\n\nexport interface LoggerDelegator {\n  getDelegateLogger(\n    name: string,\n    version?: string,\n    options?: LoggerOptions\n  ): Logger | undefined;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,WAAW,QAAQ,cAAc;AAK1C,OAAM,MAAOC,WAAW;EAItBC,YACUC,SAA0B,EAClBC,IAAY,EACZC,OAA4B,EAC5BC,OAAmC;IAH3C,KAAAH,SAAS,GAATA,SAAS;IACD,KAAAC,IAAI,GAAJA,IAAI;IACJ,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,OAAO,GAAPA,OAAO;EACtB;EAEH;;;;;EAKAC,IAAIA,CAACC,SAAoB;IACvB,IAAI,CAACC,UAAU,EAAE,CAACF,IAAI,CAACC,SAAS,CAAC;EACnC;EAEA;;;;EAIQC,UAAUA,CAAA;IAChB,IAAI,IAAI,CAACC,SAAS,EAAE;MAClB,OAAO,IAAI,CAACA,SAAS;;IAEvB,MAAMC,MAAM,GAAG,IAAI,CAACR,SAAS,CAACS,iBAAiB,CAC7C,IAAI,CAACR,IAAI,EACT,IAAI,CAACC,OAAO,EACZ,IAAI,CAACC,OAAO,CACb;IACD,IAAI,CAACK,MAAM,EAAE;MACX,OAAOX,WAAW;;IAEpB,IAAI,CAACU,SAAS,GAAGC,MAAM;IACvB,OAAO,IAAI,CAACD,SAAS;EACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}