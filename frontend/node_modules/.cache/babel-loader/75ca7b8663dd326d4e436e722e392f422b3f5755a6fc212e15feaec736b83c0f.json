{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nvar NANOSECOND_DIGITS = 9;\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number to HrTime\n * @param epochMillis\n */\nfunction numberToHrtime(epochMillis) {\n  var epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  var seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  var nanos = Number((epochSeconds - seconds).toFixed(NANOSECOND_DIGITS)) * SECOND_TO_NANOSECONDS;\n  return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n  var timeOrigin = performance.timeOrigin;\n  if (typeof timeOrigin !== 'number') {\n    var perf = performance;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n  var timeOrigin = numberToHrtime(getTimeOrigin());\n  var now = numberToHrtime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n  var seconds = timeOrigin[0] + now[0];\n  var nanos = timeOrigin[1] + now[1];\n  // Nanoseconds\n  if (nanos > SECOND_TO_NANOSECONDS) {\n    nanos -= SECOND_TO_NANOSECONDS;\n    seconds += 1;\n  }\n  return [seconds, nanos];\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n  // process.hrtime\n  if (isTimeInputHrTime(time)) {\n    return time;\n  } else if (typeof time === 'number') {\n    // Must be a performance.now() if it's smaller than process start time.\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      // epoch milliseconds or performance.timeOrigin\n      return numberToHrtime(time);\n    }\n  } else if (time instanceof Date) {\n    return numberToHrtime(time.getTime());\n  } else {\n    throw TypeError('Invalid input type');\n  }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n  var seconds = endTime[0] - startTime[0];\n  var nanos = endTime[1] - startTime[1];\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n  return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time) {\n  var precision = NANOSECOND_DIGITS;\n  var tmp = \"\" + '0'.repeat(precision) + time[1] + \"Z\";\n  var nanoString = tmp.substr(tmp.length - precision - 1);\n  var date = new Date(time[0] * 1000).toISOString();\n  return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time) {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time) {\n  return Math.round(time[0] * 1e3 + time[1] / 1e6);\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time) {\n  return Math.round(time[0] * 1e6 + time[1] / 1e3);\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n  return Array.isArray(value) && value.length === 2 && typeof value[0] === 'number' && typeof value[1] === 'number';\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n  return isTimeInputHrTime(value) || typeof value === 'number' || value instanceof Date;\n}","map":{"version":3,"names":["otperformance","performance","NANOSECOND_DIGITS","SECOND_TO_NANOSECONDS","Math","pow","numberToHrtime","epochMillis","epochSeconds","seconds","trunc","nanos","Number","toFixed","getTimeOrigin","timeOrigin","perf","timing","fetchStart","hrTime","performanceNow","now","timeInputToHrTime","time","isTimeInputHrTime","Date","getTime","TypeError","hrTimeDuration","startTime","endTime","hrTimeToTimeStamp","precision","tmp","repeat","nanoString","substr","length","date","toISOString","replace","hrTimeToNanoseconds","hrTimeToMilliseconds","round","hrTimeToMicroseconds","value","Array","isArray","isTimeInput"],"sources":["../../../src/common/time.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}