{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode, hrTimeToMicroseconds } from '@opentelemetry/core';\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n/* eslint-disable no-console */\nvar ConsoleSpanExporter = /** @class */function () {\n  function ConsoleSpanExporter() {}\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  ConsoleSpanExporter.prototype.export = function (spans, resultCallback) {\n    return this._sendSpans(spans, resultCallback);\n  };\n  /**\n   * Shutdown the exporter.\n   */\n  ConsoleSpanExporter.prototype.shutdown = function () {\n    this._sendSpans([]);\n    return Promise.resolve();\n  };\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n  ConsoleSpanExporter.prototype._exportInfo = function (span) {\n    return {\n      traceId: span.spanContext().traceId,\n      parentId: span.parentSpanId,\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events\n    };\n  };\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n  ConsoleSpanExporter.prototype._sendSpans = function (spans, done) {\n    for (var _i = 0, spans_1 = spans; _i < spans_1.length; _i++) {\n      var span = spans_1[_i];\n      console.log(this._exportInfo(span));\n    }\n    if (done) {\n      return done({\n        code: ExportResultCode.SUCCESS\n      });\n    }\n  };\n  return ConsoleSpanExporter;\n}();\nexport { ConsoleSpanExporter };","map":{"version":3,"names":["ExportResultCode","hrTimeToMicroseconds","ConsoleSpanExporter","prototype","export","spans","resultCallback","_sendSpans","shutdown","Promise","resolve","_exportInfo","span","traceId","spanContext","parentId","parentSpanId","name","id","spanId","kind","timestamp","startTime","duration","attributes","status","events","done","_i","spans_1","length","console","log","code","SUCCESS"],"sources":["../../../src/export/ConsoleSpanExporter.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAEEA,gBAAgB,EAChBC,oBAAoB,QACf,qBAAqB;AAE5B;;;;AAKA;AACA,IAAAC,mBAAA;EAAA,SAAAA,oBAAA,GAwDA;EAvDE;;;;;EAKAA,mBAAA,CAAAC,SAAA,CAAAC,MAAM,GAAN,UACEC,KAAqB,EACrBC,cAA8C;IAE9C,OAAO,IAAI,CAACC,UAAU,CAACF,KAAK,EAAEC,cAAc,CAAC;EAC/C,CAAC;EAED;;;EAGAJ,mBAAA,CAAAC,SAAA,CAAAK,QAAQ,GAAR;IACE,IAAI,CAACD,UAAU,CAAC,EAAE,CAAC;IACnB,OAAOE,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EAED;;;;EAIQR,mBAAA,CAAAC,SAAA,CAAAQ,WAAW,GAAnB,UAAoBC,IAAkB;IACpC,OAAO;MACLC,OAAO,EAAED,IAAI,CAACE,WAAW,EAAE,CAACD,OAAO;MACnCE,QAAQ,EAAEH,IAAI,CAACI,YAAY;MAC3BC,IAAI,EAAEL,IAAI,CAACK,IAAI;MACfC,EAAE,EAAEN,IAAI,CAACE,WAAW,EAAE,CAACK,MAAM;MAC7BC,IAAI,EAAER,IAAI,CAACQ,IAAI;MACfC,SAAS,EAAEpB,oBAAoB,CAACW,IAAI,CAACU,SAAS,CAAC;MAC/CC,QAAQ,EAAEtB,oBAAoB,CAACW,IAAI,CAACW,QAAQ,CAAC;MAC7CC,UAAU,EAAEZ,IAAI,CAACY,UAAU;MAC3BC,MAAM,EAAEb,IAAI,CAACa,MAAM;MACnBC,MAAM,EAAEd,IAAI,CAACc;KACd;EACH,CAAC;EAED;;;;;EAKQxB,mBAAA,CAAAC,SAAA,CAAAI,UAAU,GAAlB,UACEF,KAAqB,EACrBsB,IAAqC;IAErC,KAAmB,IAAAC,EAAA,IAAK,EAALC,OAAA,GAAAxB,KAAK,EAALuB,EAAA,GAAAC,OAAA,CAAAC,MAAK,EAALF,EAAA,EAAK,EAAE;MAArB,IAAMhB,IAAI,GAAAiB,OAAA,CAAAD,EAAA;MACbG,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrB,WAAW,CAACC,IAAI,CAAC,CAAC;;IAErC,IAAIe,IAAI,EAAE;MACR,OAAOA,IAAI,CAAC;QAAEM,IAAI,EAAEjC,gBAAgB,CAACkC;MAAO,CAAE,CAAC;;EAEnD,CAAC;EACH,OAAAhC,mBAAC;AAAD,CAAC,CAxDD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}