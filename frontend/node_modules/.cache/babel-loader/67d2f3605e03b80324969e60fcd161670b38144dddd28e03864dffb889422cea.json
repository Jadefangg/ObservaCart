{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nexport class InMemorySpanExporter {\n  _finishedSpans = [];\n  /**\n   * Indicates if the exporter has been \"shutdown.\"\n   * When false, exported spans will not be stored in-memory.\n   */\n  _stopped = false;\n  export(spans, resultCallback) {\n    if (this._stopped) return resultCallback({\n      code: ExportResultCode.FAILED,\n      error: new Error('Exporter has been stopped')\n    });\n    this._finishedSpans.push(...spans);\n    setTimeout(() => resultCallback({\n      code: ExportResultCode.SUCCESS\n    }), 0);\n  }\n  shutdown() {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return this.forceFlush();\n  }\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush() {\n    return Promise.resolve();\n  }\n  reset() {\n    this._finishedSpans = [];\n  }\n  getFinishedSpans() {\n    return this._finishedSpans;\n  }\n}","map":{"version":3,"names":["ExportResultCode","InMemorySpanExporter","_finishedSpans","_stopped","export","spans","resultCallback","code","FAILED","error","Error","push","setTimeout","SUCCESS","shutdown","forceFlush","Promise","resolve","reset","getFinishedSpans"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-base\\src\\export\\InMemorySpanExporter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nexport class InMemorySpanExporter implements SpanExporter {\n  private _finishedSpans: ReadableSpan[] = [];\n  /**\n   * Indicates if the exporter has been \"shutdown.\"\n   * When false, exported spans will not be stored in-memory.\n   */\n  protected _stopped = false;\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._stopped)\n      return resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been stopped'),\n      });\n    this._finishedSpans.push(...spans);\n\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  shutdown(): Promise<void> {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset(): void {\n    this._finishedSpans = [];\n  }\n\n  getFinishedSpans(): ReadableSpan[] {\n    return this._finishedSpans;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAAuBA,gBAAgB,QAAQ,qBAAqB;AAEpE;;;;;AAKA,OAAM,MAAOC,oBAAoB;EACvBC,cAAc,GAAmB,EAAE;EAC3C;;;;EAIUC,QAAQ,GAAG,KAAK;EAE1BC,MAAMA,CACJC,KAAqB,EACrBC,cAA8C;IAE9C,IAAI,IAAI,CAACH,QAAQ,EACf,OAAOG,cAAc,CAAC;MACpBC,IAAI,EAAEP,gBAAgB,CAACQ,MAAM;MAC7BC,KAAK,EAAE,IAAIC,KAAK,CAAC,2BAA2B;KAC7C,CAAC;IACJ,IAAI,CAACR,cAAc,CAACS,IAAI,CAAC,GAAGN,KAAK,CAAC;IAElCO,UAAU,CAAC,MAAMN,cAAc,CAAC;MAAEC,IAAI,EAAEP,gBAAgB,CAACa;IAAO,CAAE,CAAC,EAAE,CAAC,CAAC;EACzE;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACX,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACD,cAAc,GAAG,EAAE;IACxB,OAAO,IAAI,CAACa,UAAU,EAAE;EAC1B;EAEA;;;EAGAA,UAAUA,CAAA;IACR,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B;EAEAC,KAAKA,CAAA;IACH,IAAI,CAAChB,cAAc,GAAG,EAAE;EAC1B;EAEAiB,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACjB,cAAc;EAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}