{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Much of the logic here overlaps with the same utils file in opentelemetry-instrumentation-fetch\n// These may be unified in the future.\nimport * as api from '@opentelemetry/api';\nimport { getStringListFromEnv } from '@opentelemetry/core';\nconst DIAG_LOGGER = api.diag.createComponentLogger({\n  namespace: '@opentelemetry/opentelemetry-instrumentation-xml-http-request/utils'\n});\nfunction isDocument(value) {\n  return typeof Document !== 'undefined' && value instanceof Document;\n}\n/**\n * Helper function to determine payload content length for XHR requests\n * @param body\n * @returns content length\n */\nexport function getXHRBodyLength(body) {\n  if (isDocument(body)) {\n    return new XMLSerializer().serializeToString(document).length;\n  }\n  // XMLHttpRequestBodyInit expands to the following:\n  if (typeof body === 'string') {\n    return getByteLength(body);\n  }\n  if (body instanceof Blob) {\n    return body.size;\n  }\n  if (body instanceof FormData) {\n    return getFormDataSize(body);\n  }\n  if (body instanceof URLSearchParams) {\n    return getByteLength(body.toString());\n  }\n  // ArrayBuffer | ArrayBufferView\n  if (body.byteLength !== undefined) {\n    return body.byteLength;\n  }\n  DIAG_LOGGER.warn('unknown body type');\n  return undefined;\n}\nconst TEXT_ENCODER = new TextEncoder();\nfunction getByteLength(s) {\n  return TEXT_ENCODER.encode(s).byteLength;\n}\nfunction getFormDataSize(formData) {\n  let size = 0;\n  for (const [key, value] of formData.entries()) {\n    size += key.length;\n    if (value instanceof Blob) {\n      size += value.size;\n    } else {\n      size += value.length;\n    }\n  }\n  return size;\n}\n/**\n * Normalize an HTTP request method string per `http.request.method` spec\n * https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md#http-client-span\n */\nexport function normalizeHttpRequestMethod(method) {\n  const knownMethods = getKnownMethods();\n  const methUpper = method.toUpperCase();\n  if (methUpper in knownMethods) {\n    return methUpper;\n  } else {\n    return '_OTHER';\n  }\n}\nconst DEFAULT_KNOWN_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true\n};\nlet knownMethods;\nfunction getKnownMethods() {\n  if (knownMethods === undefined) {\n    const cfgMethods = getStringListFromEnv('OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS');\n    if (cfgMethods && cfgMethods.length > 0) {\n      knownMethods = {};\n      cfgMethods.forEach(m => {\n        knownMethods[m] = true;\n      });\n    } else {\n      knownMethods = DEFAULT_KNOWN_METHODS;\n    }\n  }\n  return knownMethods;\n}\nconst HTTP_PORT_FROM_PROTOCOL = {\n  'https:': '443',\n  'http:': '80'\n};\nexport function serverPortFromUrl(url) {\n  const serverPort = Number(url.port || HTTP_PORT_FROM_PROTOCOL[url.protocol]);\n  // Guard with `if (serverPort)` because `Number('') === 0`.\n  if (serverPort && !isNaN(serverPort)) {\n    return serverPort;\n  } else {\n    return undefined;\n  }\n}","map":{"version":3,"names":["api","getStringListFromEnv","DIAG_LOGGER","diag","createComponentLogger","namespace","isDocument","value","Document","getXHRBodyLength","body","XMLSerializer","serializeToString","document","length","getByteLength","Blob","size","FormData","getFormDataSize","URLSearchParams","toString","byteLength","undefined","warn","TEXT_ENCODER","TextEncoder","s","encode","formData","key","entries","normalizeHttpRequestMethod","method","knownMethods","getKnownMethods","methUpper","toUpperCase","DEFAULT_KNOWN_METHODS","CONNECT","DELETE","GET","HEAD","OPTIONS","PATCH","POST","PUT","TRACE","cfgMethods","forEach","m","HTTP_PORT_FROM_PROTOCOL","serverPortFromUrl","url","serverPort","Number","port","protocol","isNaN"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\instrumentation-xml-http-request\\src\\utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Much of the logic here overlaps with the same utils file in opentelemetry-instrumentation-fetch\n// These may be unified in the future.\n\nimport * as api from '@opentelemetry/api';\nimport { getStringListFromEnv } from '@opentelemetry/core';\nimport { URLLike } from '@opentelemetry/sdk-trace-web';\n\nconst DIAG_LOGGER = api.diag.createComponentLogger({\n  namespace:\n    '@opentelemetry/opentelemetry-instrumentation-xml-http-request/utils',\n});\n\nfunction isDocument(value: unknown): value is Document {\n  return typeof Document !== 'undefined' && value instanceof Document;\n}\n\n/**\n * Helper function to determine payload content length for XHR requests\n * @param body\n * @returns content length\n */\nexport function getXHRBodyLength(\n  body: Document | XMLHttpRequestBodyInit\n): number | undefined {\n  if (isDocument(body)) {\n    return new XMLSerializer().serializeToString(document).length;\n  }\n\n  // XMLHttpRequestBodyInit expands to the following:\n  if (typeof body === 'string') {\n    return getByteLength(body);\n  }\n\n  if (body instanceof Blob) {\n    return body.size;\n  }\n\n  if (body instanceof FormData) {\n    return getFormDataSize(body);\n  }\n\n  if (body instanceof URLSearchParams) {\n    return getByteLength(body.toString());\n  }\n\n  // ArrayBuffer | ArrayBufferView\n  if (body.byteLength !== undefined) {\n    return body.byteLength;\n  }\n\n  DIAG_LOGGER.warn('unknown body type');\n  return undefined;\n}\n\nconst TEXT_ENCODER = new TextEncoder();\nfunction getByteLength(s: string): number {\n  return TEXT_ENCODER.encode(s).byteLength;\n}\n\nfunction getFormDataSize(formData: FormData): number {\n  let size = 0;\n  for (const [key, value] of formData.entries()) {\n    size += key.length;\n    if (value instanceof Blob) {\n      size += value.size;\n    } else {\n      size += value.length;\n    }\n  }\n  return size;\n}\n\n/**\n * Normalize an HTTP request method string per `http.request.method` spec\n * https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md#http-client-span\n */\nexport function normalizeHttpRequestMethod(method: string): string {\n  const knownMethods = getKnownMethods();\n  const methUpper = method.toUpperCase();\n  if (methUpper in knownMethods) {\n    return methUpper;\n  } else {\n    return '_OTHER';\n  }\n}\n\nconst DEFAULT_KNOWN_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true,\n};\nlet knownMethods: { [key: string]: boolean };\nfunction getKnownMethods() {\n  if (knownMethods === undefined) {\n    const cfgMethods = getStringListFromEnv(\n      'OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS'\n    );\n    if (cfgMethods && cfgMethods.length > 0) {\n      knownMethods = {};\n      cfgMethods.forEach(m => {\n        knownMethods[m] = true;\n      });\n    } else {\n      knownMethods = DEFAULT_KNOWN_METHODS;\n    }\n  }\n  return knownMethods;\n}\n\nconst HTTP_PORT_FROM_PROTOCOL: { [key: string]: string } = {\n  'https:': '443',\n  'http:': '80',\n};\nexport function serverPortFromUrl(url: URLLike): number | undefined {\n  const serverPort = Number(url.port || HTTP_PORT_FROM_PROTOCOL[url.protocol]);\n  // Guard with `if (serverPort)` because `Number('') === 0`.\n  if (serverPort && !isNaN(serverPort)) {\n    return serverPort;\n  } else {\n    return undefined;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}