{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { OTLPExporterBrowserBase } from './OTLPExporterBrowserBase';\nimport { toOTLPExportMetricServiceRequest } from '../../transformMetrics';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { appendResourcePathToUrlIfNotPresent } from '../../util';\nvar DEFAULT_COLLECTOR_RESOURCE_PATH = '/v1/metrics';\nvar DEFAULT_COLLECTOR_URL = \"http://localhost:55681\" + DEFAULT_COLLECTOR_RESOURCE_PATH;\n/**\n * Collector Metric Exporter for Web\n */\nvar OTLPMetricExporter = /** @class */function (_super) {\n  __extends(OTLPMetricExporter, _super);\n  function OTLPMetricExporter(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this, config) || this;\n    // Converts time to nanoseconds\n    _this._startTime = new Date().getTime() * 1000000;\n    _this._headers = Object.assign(_this._headers, baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_METRICS_HEADERS));\n    return _this;\n  }\n  OTLPMetricExporter.prototype.convert = function (metrics) {\n    return toOTLPExportMetricServiceRequest(metrics, this._startTime, this);\n  };\n  OTLPMetricExporter.prototype.getDefaultUrl = function (config) {\n    return typeof config.url === 'string' ? config.url : getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT.length > 0 ? getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0 ? appendResourcePathToUrlIfNotPresent(getEnv().OTEL_EXPORTER_OTLP_ENDPOINT, DEFAULT_COLLECTOR_RESOURCE_PATH) : DEFAULT_COLLECTOR_URL;\n  };\n  return OTLPMetricExporter;\n}(OTLPExporterBrowserBase);\nexport { OTLPMetricExporter };","map":{"version":3,"names":["OTLPExporterBrowserBase","toOTLPExportMetricServiceRequest","getEnv","baggageUtils","appendResourcePathToUrlIfNotPresent","DEFAULT_COLLECTOR_RESOURCE_PATH","DEFAULT_COLLECTOR_URL","OTLPMetricExporter","_super","__extends","config","_this","call","_startTime","Date","getTime","_headers","Object","assign","parseKeyPairsIntoRecord","OTEL_EXPORTER_OTLP_METRICS_HEADERS","prototype","convert","metrics","getDefaultUrl","url","OTEL_EXPORTER_OTLP_METRICS_ENDPOINT","length","OTEL_EXPORTER_OTLP_ENDPOINT"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\exporter-otlp-http\\src\\platform\\browser\\OTLPMetricExporter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricRecord, MetricExporter } from '@opentelemetry/sdk-metrics-base';\nimport { OTLPExporterConfigBase } from '../../types';\nimport * as otlpTypes from '../../types';\nimport { OTLPExporterBrowserBase } from './OTLPExporterBrowserBase';\nimport { toOTLPExportMetricServiceRequest } from '../../transformMetrics';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { appendResourcePathToUrlIfNotPresent } from '../../util';\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = '/v1/metrics';\nconst DEFAULT_COLLECTOR_URL=`http://localhost:55681${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\n\n/**\n * Collector Metric Exporter for Web\n */\nexport class OTLPMetricExporter\n  extends OTLPExporterBrowserBase<\n    MetricRecord,\n    otlpTypes.opentelemetryProto.collector.metrics.v1.ExportMetricsServiceRequest\n  >\n  implements MetricExporter {\n  // Converts time to nanoseconds\n  private readonly _startTime = new Date().getTime() * 1000000;\n\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n    this._headers = Object.assign(\n      this._headers,\n      baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_METRICS_HEADERS\n      )\n    );\n  }\n\n  convert(\n    metrics: MetricRecord[]\n  ): otlpTypes.opentelemetryProto.collector.metrics.v1.ExportMetricsServiceRequest {\n    return toOTLPExportMetricServiceRequest(\n      metrics,\n      this._startTime,\n      this\n    );\n  }\n\n  getDefaultUrl(config: OTLPExporterConfigBase): string {\n    return typeof config.url === 'string'\n      ? config.url\n      : getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT.length > 0\n      ? getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? appendResourcePathToUrlIfNotPresent(getEnv().OTEL_EXPORTER_OTLP_ENDPOINT, DEFAULT_COLLECTOR_RESOURCE_PATH)\n      : DEFAULT_COLLECTOR_URL;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,SAASA,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,gCAAgC,QAAQ,wBAAwB;AACzE,SAASC,MAAM,EAAEC,YAAY,QAAQ,qBAAqB;AAC1D,SAASC,mCAAmC,QAAQ,YAAY;AAEhE,IAAMC,+BAA+B,GAAG,aAAa;AACrD,IAAMC,qBAAqB,GAAC,2BAAyBD,+BAAiC;AAEtF;;;AAGA,IAAAE,kBAAA,0BAAAC,MAAA;EACUC,SAAA,CAAAF,kBAAA,EAAAC,MAAA;EAQR,SAAAD,mBAAYG,MAAmC;IAAnC,IAAAA,MAAA;MAAAA,MAAA,KAAmC;IAAA;IAA/C,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,MAAM,CAAC;IAJf;IACiBC,KAAA,CAAAE,UAAU,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,OAAO;IAI1DJ,KAAI,CAACK,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAC3BP,KAAI,CAACK,QAAQ,EACbb,YAAY,CAACgB,uBAAuB,CAClCjB,MAAM,EAAE,CAACkB,kCAAkC,CAC5C,CACF;;EACH;EAEAb,kBAAA,CAAAc,SAAA,CAAAC,OAAO,GAAP,UACEC,OAAuB;IAEvB,OAAOtB,gCAAgC,CACrCsB,OAAO,EACP,IAAI,CAACV,UAAU,EACf,IAAI,CACL;EACH,CAAC;EAEDN,kBAAA,CAAAc,SAAA,CAAAG,aAAa,GAAb,UAAcd,MAA8B;IAC1C,OAAO,OAAOA,MAAM,CAACe,GAAG,KAAK,QAAQ,GACjCf,MAAM,CAACe,GAAG,GACVvB,MAAM,EAAE,CAACwB,mCAAmC,CAACC,MAAM,GAAG,CAAC,GACvDzB,MAAM,EAAE,CAACwB,mCAAmC,GAC5CxB,MAAM,EAAE,CAAC0B,2BAA2B,CAACD,MAAM,GAAG,CAAC,GAC/CvB,mCAAmC,CAACF,MAAM,EAAE,CAAC0B,2BAA2B,EAAEvB,+BAA+B,CAAC,GAC1GC,qBAAqB;EAC3B,CAAC;EACH,OAAAC,kBAAC;AAAD,CAAC,CArCSP,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}