{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototypeOf = Object.getPrototypeOf;\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  const proto = getPrototypeOf(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) === objectCtorString;\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  const isOwn = hasOwnProperty.call(value, symToStringTag),\n    tag = value[symToStringTag];\n  let unmasked = false;\n  try {\n    value[symToStringTag] = undefined;\n    unmasked = true;\n  } catch (e) {\n    // silence\n  }\n  const result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}","map":{"version":3,"names":["objectTag","nullTag","undefinedTag","funcProto","Function","prototype","funcToString","toString","objectCtorString","call","Object","getPrototypeOf","objectProto","hasOwnProperty","symToStringTag","Symbol","toStringTag","undefined","nativeObjectToString","isPlainObject","value","isObjectLike","baseGetTag","proto","Ctor","constructor","getRawTag","objectToString","isOwn","tag","unmasked","e","result"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\resources\\node_modules\\@opentelemetry\\core\\src\\utils\\lodash.merge.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\n\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototypeOf = Object.getPrototypeOf;\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value: any) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  const proto = getPrototypeOf(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (\n    typeof Ctor == 'function' &&\n    Ctor instanceof Ctor &&\n    funcToString.call(Ctor) === objectCtorString\n  );\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value: any) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value: any) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value: any) {\n  const isOwn = hasOwnProperty.call(value, symToStringTag as any),\n    tag = value[symToStringTag as any];\n  let unmasked = false;\n\n  try {\n    value[symToStringTag as any] = undefined;\n    unmasked = true;\n  } catch (e) {\n    // silence\n  }\n\n  const result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag as any] = tag;\n    } else {\n      delete value[symToStringTag as any];\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value: any) {\n  return nativeObjectToString.call(value);\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA;AAEA;;;;AAKA,MAAMA,SAAS,GAAG,iBAAiB;AACnC,MAAMC,OAAO,GAAG,eAAe;AAC/B,MAAMC,YAAY,GAAG,oBAAoB;AACzC,MAAMC,SAAS,GAAGC,QAAQ,CAACC,SAAS;AACpC,MAAMC,YAAY,GAAGH,SAAS,CAACI,QAAQ;AACvC,MAAMC,gBAAgB,GAAGF,YAAY,CAACG,IAAI,CAACC,MAAM,CAAC;AAClD,MAAMC,cAAc,GAAGD,MAAM,CAACC,cAAc;AAC5C,MAAMC,WAAW,GAAGF,MAAM,CAACL,SAAS;AACpC,MAAMQ,cAAc,GAAGD,WAAW,CAACC,cAAc;AACjD,MAAMC,cAAc,GAAGC,MAAM,GAAGA,MAAM,CAACC,WAAW,GAAGC,SAAS;AAC9D,MAAMC,oBAAoB,GAAGN,WAAW,CAACL,QAAQ;AAEjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAM,SAAUY,aAAaA,CAACC,KAAU;EACtC,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC,IAAIE,UAAU,CAACF,KAAK,CAAC,KAAKpB,SAAS,EAAE;IAC3D,OAAO,KAAK;;EAEd,MAAMuB,KAAK,GAAGZ,cAAc,CAACS,KAAK,CAAC;EACnC,IAAIG,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,IAAI;;EAEb,MAAMC,IAAI,GAAGX,cAAc,CAACJ,IAAI,CAACc,KAAK,EAAE,aAAa,CAAC,IAAIA,KAAK,CAACE,WAAW;EAC3E,OACE,OAAOD,IAAI,IAAI,UAAU,IACzBA,IAAI,YAAYA,IAAI,IACpBlB,YAAY,CAACG,IAAI,CAACe,IAAI,CAAC,KAAKhB,gBAAgB;AAEhD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASa,YAAYA,CAACD,KAAU;EAC9B,OAAOA,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,IAAI,QAAQ;AAClD;AAEA;;;;;;;AAOA,SAASE,UAAUA,CAACF,KAAU;EAC5B,IAAIA,KAAK,IAAI,IAAI,EAAE;IACjB,OAAOA,KAAK,KAAKH,SAAS,GAAGf,YAAY,GAAGD,OAAO;;EAErD,OAAOa,cAAc,IAAIA,cAAc,IAAIJ,MAAM,CAACU,KAAK,CAAC,GACpDM,SAAS,CAACN,KAAK,CAAC,GAChBO,cAAc,CAACP,KAAK,CAAC;AAC3B;AAEA;;;;;;;AAOA,SAASM,SAASA,CAACN,KAAU;EAC3B,MAAMQ,KAAK,GAAGf,cAAc,CAACJ,IAAI,CAACW,KAAK,EAAEN,cAAqB,CAAC;IAC7De,GAAG,GAAGT,KAAK,CAACN,cAAqB,CAAC;EACpC,IAAIgB,QAAQ,GAAG,KAAK;EAEpB,IAAI;IACFV,KAAK,CAACN,cAAqB,CAAC,GAAGG,SAAS;IACxCa,QAAQ,GAAG,IAAI;GAChB,CAAC,OAAOC,CAAC,EAAE;IACV;EAAA;EAGF,MAAMC,MAAM,GAAGd,oBAAoB,CAACT,IAAI,CAACW,KAAK,CAAC;EAC/C,IAAIU,QAAQ,EAAE;IACZ,IAAIF,KAAK,EAAE;MACTR,KAAK,CAACN,cAAqB,CAAC,GAAGe,GAAG;KACnC,MAAM;MACL,OAAOT,KAAK,CAACN,cAAqB,CAAC;;;EAGvC,OAAOkB,MAAM;AACf;AAEA;;;;;;;AAOA,SAASL,cAAcA,CAACP,KAAU;EAChC,OAAOF,oBAAoB,CAACT,IAAI,CAACW,KAAK,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}