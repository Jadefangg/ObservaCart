{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopLogger } from './NoopLogger';\nexport class NoopLoggerProvider {\n  getLogger(_name, _version, _options) {\n    return new NoopLogger();\n  }\n}\nexport const NOOP_LOGGER_PROVIDER = new NoopLoggerProvider();","map":{"version":3,"names":["NoopLogger","NoopLoggerProvider","getLogger","_name","_version","_options","NOOP_LOGGER_PROVIDER"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\api-logs\\src\\NoopLoggerProvider.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerProvider } from './types/LoggerProvider';\nimport { Logger } from './types/Logger';\nimport { LoggerOptions } from './types/LoggerOptions';\nimport { NoopLogger } from './NoopLogger';\n\nexport class NoopLoggerProvider implements LoggerProvider {\n  getLogger(\n    _name: string,\n    _version?: string | undefined,\n    _options?: LoggerOptions | undefined\n  ): Logger {\n    return new NoopLogger();\n  }\n}\n\nexport const NOOP_LOGGER_PROVIDER = new NoopLoggerProvider();\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAmBA,SAASA,UAAU,QAAQ,cAAc;AAEzC,OAAM,MAAOC,kBAAkB;EAC7BC,SAASA,CACPC,KAAa,EACbC,QAA6B,EAC7BC,QAAoC;IAEpC,OAAO,IAAIL,UAAU,EAAE;EACzB;;AAGF,OAAO,MAAMM,oBAAoB,GAAG,IAAIL,kBAAkB,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}