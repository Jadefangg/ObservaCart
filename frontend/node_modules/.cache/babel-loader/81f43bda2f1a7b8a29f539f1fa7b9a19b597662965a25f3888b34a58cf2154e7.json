{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url, urlToMatch) {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(url, ignoredUrls) {\n  if (!ignoredUrls) {\n    return false;\n  }\n  for (const ignoreUrl of ignoredUrls) {\n    if (urlMatches(url, ignoreUrl)) {\n      return true;\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["urlMatches","url","urlToMatch","match","isUrlIgnored","ignoredUrls","ignoreUrl"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-web\\node_modules\\@opentelemetry\\core\\src\\utils\\url.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url: string, urlToMatch: string | RegExp): boolean {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(\n  url: string,\n  ignoredUrls?: Array<string | RegExp>\n): boolean {\n  if (!ignoredUrls) {\n    return false;\n  }\n\n  for (const ignoreUrl of ignoredUrls) {\n    if (urlMatches(url, ignoreUrl)) {\n      return true;\n    }\n  }\n  return false;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,OAAM,SAAUA,UAAUA,CAACC,GAAW,EAAEC,UAA2B;EACjE,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAClC,OAAOD,GAAG,KAAKC,UAAU;GAC1B,MAAM;IACL,OAAO,CAAC,CAACD,GAAG,CAACE,KAAK,CAACD,UAAU,CAAC;;AAElC;AACA;;;;;AAKA,OAAM,SAAUE,YAAYA,CAC1BH,GAAW,EACXI,WAAoC;EAEpC,IAAI,CAACA,WAAW,EAAE;IAChB,OAAO,KAAK;;EAGd,KAAK,MAAMC,SAAS,IAAID,WAAW,EAAE;IACnC,IAAIL,UAAU,CAACC,GAAG,EAAEK,SAAS,CAAC,EAAE;MAC9B,OAAO,IAAI;;;EAGf,OAAO,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}