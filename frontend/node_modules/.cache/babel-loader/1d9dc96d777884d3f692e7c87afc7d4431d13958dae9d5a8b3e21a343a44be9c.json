{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { getNumberFromEnv } from '@opentelemetry/core';\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n  const perInstanceDefaults = {\n    sampler: buildSamplerFromEnv()\n  };\n  const DEFAULT_CONFIG = loadDefaultConfig();\n  const target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n  target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n  target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n  return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig) {\n  const spanLimits = Object.assign({}, userConfig.spanLimits);\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit = userConfig.spanLimits?.attributeCountLimit ?? userConfig.generalLimits?.attributeCountLimit ?? getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ?? getNumberFromEnv('OTEL_ATTRIBUTE_COUNT_LIMIT') ?? DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit = userConfig.spanLimits?.attributeValueLengthLimit ?? userConfig.generalLimits?.attributeValueLengthLimit ?? getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? getNumberFromEnv('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n  return Object.assign({}, userConfig, {\n    spanLimits\n  });\n}","map":{"version":3,"names":["buildSamplerFromEnv","loadDefaultConfig","getNumberFromEnv","DEFAULT_ATTRIBUTE_COUNT_LIMIT","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","Infinity","mergeConfig","userConfig","perInstanceDefaults","sampler","DEFAULT_CONFIG","target","Object","assign","generalLimits","spanLimits","reconfigureLimits","attributeCountLimit","attributeValueLengthLimit"],"sources":["C:/Users/Sartaj/Desktop/ObservaCart/observacart/frontend/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { getNumberFromEnv } from '@opentelemetry/core';\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n    const perInstanceDefaults = {\n        sampler: buildSamplerFromEnv(),\n    };\n    const DEFAULT_CONFIG = loadDefaultConfig();\n    const target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig) {\n    const spanLimits = Object.assign({}, userConfig.spanLimits);\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        userConfig.spanLimits?.attributeCountLimit ??\n            userConfig.generalLimits?.attributeCountLimit ??\n            getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ??\n            getNumberFromEnv('OTEL_ATTRIBUTE_COUNT_LIMIT') ??\n            DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        userConfig.spanLimits?.attributeValueLengthLimit ??\n            userConfig.generalLimits?.attributeValueLengthLimit ??\n            getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n            getNumberFromEnv('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n            DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits });\n}\n//# sourceMappingURL=utility.js.map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,EAAEC,iBAAiB,QAAQ,UAAU;AACjE,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,OAAO,MAAMC,6BAA6B,GAAG,GAAG;AAChD,OAAO,MAAMC,oCAAoC,GAAGC,QAAQ;AAC5D;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,UAAU,EAAE;EACpC,MAAMC,mBAAmB,GAAG;IACxBC,OAAO,EAAET,mBAAmB,CAAC;EACjC,CAAC;EACD,MAAMU,cAAc,GAAGT,iBAAiB,CAAC,CAAC;EAC1C,MAAMU,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,cAAc,EAAEF,mBAAmB,EAAED,UAAU,CAAC;EACjFI,MAAM,CAACG,aAAa,GAAGF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,cAAc,CAACI,aAAa,EAAEP,UAAU,CAACO,aAAa,IAAI,CAAC,CAAC,CAAC;EACtGH,MAAM,CAACI,UAAU,GAAGH,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,cAAc,CAACK,UAAU,EAAER,UAAU,CAACQ,UAAU,IAAI,CAAC,CAAC,CAAC;EAC7F,OAAOJ,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,iBAAiBA,CAACT,UAAU,EAAE;EAC1C,MAAMQ,UAAU,GAAGH,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,UAAU,CAACQ,UAAU,CAAC;EAC3D;AACJ;AACA;EACIA,UAAU,CAACE,mBAAmB,GAC1BV,UAAU,CAACQ,UAAU,EAAEE,mBAAmB,IACtCV,UAAU,CAACO,aAAa,EAAEG,mBAAmB,IAC7Cf,gBAAgB,CAAC,iCAAiC,CAAC,IACnDA,gBAAgB,CAAC,4BAA4B,CAAC,IAC9CC,6BAA6B;EACrC;AACJ;AACA;EACIY,UAAU,CAACG,yBAAyB,GAChCX,UAAU,CAACQ,UAAU,EAAEG,yBAAyB,IAC5CX,UAAU,CAACO,aAAa,EAAEI,yBAAyB,IACnDhB,gBAAgB,CAAC,wCAAwC,CAAC,IAC1DA,gBAAgB,CAAC,mCAAmC,CAAC,IACrDE,oCAAoC;EAC5C,OAAOQ,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,UAAU,EAAE;IAAEQ;EAAW,CAAC,CAAC;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}