{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nvar InMemorySpanExporter = /** @class */function () {\n  function InMemorySpanExporter() {\n    this._finishedSpans = [];\n    /**\n     * Indicates if the exporter has been \"shutdown.\"\n     * When false, exported spans will not be stored in-memory.\n     */\n    this._stopped = false;\n  }\n  InMemorySpanExporter.prototype.export = function (spans, resultCallback) {\n    var _a;\n    if (this._stopped) return resultCallback({\n      code: ExportResultCode.FAILED,\n      error: new Error('Exporter has been stopped')\n    });\n    (_a = this._finishedSpans).push.apply(_a, spans);\n    setTimeout(function () {\n      return resultCallback({\n        code: ExportResultCode.SUCCESS\n      });\n    }, 0);\n  };\n  InMemorySpanExporter.prototype.shutdown = function () {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return Promise.resolve();\n  };\n  InMemorySpanExporter.prototype.reset = function () {\n    this._finishedSpans = [];\n  };\n  InMemorySpanExporter.prototype.getFinishedSpans = function () {\n    return this._finishedSpans;\n  };\n  return InMemorySpanExporter;\n}();\nexport { InMemorySpanExporter };","map":{"version":3,"names":["ExportResultCode","InMemorySpanExporter","_finishedSpans","_stopped","prototype","export","spans","resultCallback","code","FAILED","error","Error","_a","push","apply","setTimeout","SUCCESS","shutdown","Promise","resolve","reset","getFinishedSpans"],"sources":["../../../src/export/InMemorySpanExporter.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAAuBA,gBAAgB,QAAQ,qBAAqB;AAEpE;;;;;AAKA,IAAAC,oBAAA;EAAA,SAAAA,qBAAA;IACU,KAAAC,cAAc,GAAmB,EAAE;IAC3C;;;;IAIU,KAAAC,QAAQ,GAAG,KAAK;EA6B5B;EA3BEF,oBAAA,CAAAG,SAAA,CAAAC,MAAM,GAAN,UACEC,KAAqB,EACrBC,cAA8C;;IAE9C,IAAI,IAAI,CAACJ,QAAQ,EACf,OAAOI,cAAc,CAAC;MACpBC,IAAI,EAAER,gBAAgB,CAACS,MAAM;MAC7BC,KAAK,EAAE,IAAIC,KAAK,CAAC,2BAA2B;KAC7C,CAAC;IACJ,CAAAC,EAAA,OAAI,CAACV,cAAc,EAACW,IAAI,CAAAC,KAAA,CAAAF,EAAA,EAAIN,KAAK;IAEjCS,UAAU,CAAC;MAAM,OAAAR,cAAc,CAAC;QAAEC,IAAI,EAAER,gBAAgB,CAACgB;MAAO,CAAE,CAAC;IAAlD,CAAkD,EAAE,CAAC,CAAC;EACzE,CAAC;EAEDf,oBAAA,CAAAG,SAAA,CAAAa,QAAQ,GAAR;IACE,IAAI,CAACd,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACD,cAAc,GAAG,EAAE;IACxB,OAAOgB,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EAEDlB,oBAAA,CAAAG,SAAA,CAAAgB,KAAK,GAAL;IACE,IAAI,CAAClB,cAAc,GAAG,EAAE;EAC1B,CAAC;EAEDD,oBAAA,CAAAG,SAAA,CAAAiB,gBAAgB,GAAhB;IACE,OAAO,IAAI,CAACnB,cAAc;EAC5B,CAAC;EACH,OAAAD,oBAAC;AAAD,CAAC,CAnCD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}