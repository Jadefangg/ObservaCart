{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { BoundValueRecorder } from './BoundInstrument';\nimport { MetricKind } from './export/types';\nimport { Metric } from './Metric';\n/** This is a SDK implementation of Value Recorder Metric. */\nvar ValueRecorderMetric = /** @class */function (_super) {\n  __extends(ValueRecorderMetric, _super);\n  function ValueRecorderMetric(name, options, _processor, resource, instrumentationLibrary) {\n    var _this = _super.call(this, name, options, MetricKind.VALUE_RECORDER, resource, instrumentationLibrary) || this;\n    _this._processor = _processor;\n    return _this;\n  }\n  ValueRecorderMetric.prototype._makeInstrument = function (labels) {\n    return new BoundValueRecorder(labels, this._disabled, this._valueType, this._processor.aggregatorFor(this._descriptor));\n  };\n  ValueRecorderMetric.prototype.record = function (value, labels) {\n    if (labels === void 0) {\n      labels = {};\n    }\n    this.bind(labels).record(value);\n  };\n  return ValueRecorderMetric;\n}(Metric);\nexport { ValueRecorderMetric };","map":{"version":3,"names":["BoundValueRecorder","MetricKind","Metric","ValueRecorderMetric","_super","__extends","name","options","_processor","resource","instrumentationLibrary","_this","call","VALUE_RECORDER","prototype","_makeInstrument","labels","_disabled","_valueType","aggregatorFor","_descriptor","record","value","bind"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-metrics-base\\src\\ValueRecorderMetric.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { BoundValueRecorder } from './BoundInstrument';\nimport { Processor } from './export/Processor';\nimport { MetricKind } from './export/types';\nimport { Metric } from './Metric';\n\n/** This is a SDK implementation of Value Recorder Metric. */\nexport class ValueRecorderMetric\n  extends Metric<BoundValueRecorder>\n  implements api.ValueRecorder {\n  constructor(\n    name: string,\n    options: api.MetricOptions,\n    private readonly _processor: Processor,\n    resource: Resource,\n    instrumentationLibrary: InstrumentationLibrary\n  ) {\n    super(\n      name,\n      options,\n      MetricKind.VALUE_RECORDER,\n      resource,\n      instrumentationLibrary\n    );\n  }\n\n  protected _makeInstrument(labels: api.Labels): BoundValueRecorder {\n    return new BoundValueRecorder(\n      labels,\n      this._disabled,\n      this._valueType,\n      this._processor.aggregatorFor(this._descriptor)\n    );\n  }\n\n  record(value: number, labels: api.Labels = {}): void {\n    this.bind(labels).record(value);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,SAASA,kBAAkB,QAAQ,mBAAmB;AAEtD,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,MAAM,QAAQ,UAAU;AAEjC;AACA,IAAAC,mBAAA,0BAAAC,MAAA;EACUC,SAAA,CAAAF,mBAAA,EAAAC,MAAA;EAER,SAAAD,oBACEG,IAAY,EACZC,OAA0B,EACTC,UAAqB,EACtCC,QAAkB,EAClBC,sBAA8C;IALhD,IAAAC,KAAA,GAOEP,MAAA,CAAAQ,IAAA,OACEN,IAAI,EACJC,OAAO,EACPN,UAAU,CAACY,cAAc,EACzBJ,QAAQ,EACRC,sBAAsB,CACvB;IAVgBC,KAAA,CAAAH,UAAU,GAAVA,UAAU;;EAW7B;EAEUL,mBAAA,CAAAW,SAAA,CAAAC,eAAe,GAAzB,UAA0BC,MAAkB;IAC1C,OAAO,IAAIhB,kBAAkB,CAC3BgB,MAAM,EACN,IAAI,CAACC,SAAS,EACd,IAAI,CAACC,UAAU,EACf,IAAI,CAACV,UAAU,CAACW,aAAa,CAAC,IAAI,CAACC,WAAW,CAAC,CAChD;EACH,CAAC;EAEDjB,mBAAA,CAAAW,SAAA,CAAAO,MAAM,GAAN,UAAOC,KAAa,EAAEN,MAAuB;IAAvB,IAAAA,MAAA;MAAAA,MAAA,KAAuB;IAAA;IAC3C,IAAI,CAACO,IAAI,CAACP,MAAM,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EACH,OAAAnB,mBAAC;AAAD,CAAC,CA9BSD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}