{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, DiagLogLevel } from '@opentelemetry/api';\nconst logLevelMap = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE\n};\n/**\n * Convert a string to a {@link DiagLogLevel}, defaults to {@link DiagLogLevel} if the log level does not exist or undefined if the input is undefined.\n * @param value\n */\nexport function diagLogLevelFromString(value) {\n  if (value == null) {\n    // don't fall back to default - no value set has different semantics for ús than an incorrect value (do not set vs. fall back to default)\n    return undefined;\n  }\n  const resolvedLogLevel = logLevelMap[value.toUpperCase()];\n  if (resolvedLogLevel == null) {\n    diag.warn(`Unknown log level \"${value}\", expected one of ${Object.keys(logLevelMap)}, using default`);\n    return DiagLogLevel.INFO;\n  }\n  return resolvedLogLevel;\n}","map":{"version":3,"names":["diag","DiagLogLevel","logLevelMap","ALL","VERBOSE","DEBUG","INFO","WARN","ERROR","NONE","diagLogLevelFromString","value","undefined","resolvedLogLevel","toUpperCase","warn","Object","keys"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-trace-web\\node_modules\\@opentelemetry\\core\\src\\utils\\configuration.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, DiagLogLevel } from '@opentelemetry/api';\n\nconst logLevelMap: { [key: string]: DiagLogLevel } = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE,\n};\n\n/**\n * Convert a string to a {@link DiagLogLevel}, defaults to {@link DiagLogLevel} if the log level does not exist or undefined if the input is undefined.\n * @param value\n */\nexport function diagLogLevelFromString(\n  value: string | undefined\n): DiagLogLevel | undefined {\n  if (value == null) {\n    // don't fall back to default - no value set has different semantics for ús than an incorrect value (do not set vs. fall back to default)\n    return undefined;\n  }\n\n  const resolvedLogLevel = logLevelMap[value.toUpperCase()];\n\n  if (resolvedLogLevel == null) {\n    diag.warn(\n      `Unknown log level \"${value}\", expected one of ${Object.keys(logLevelMap)}, using default`\n    );\n    return DiagLogLevel.INFO;\n  }\n\n  return resolvedLogLevel;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,SAASA,IAAI,EAAEC,YAAY,QAAQ,oBAAoB;AAEvD,MAAMC,WAAW,GAAoC;EACnDC,GAAG,EAAEF,YAAY,CAACE,GAAG;EACrBC,OAAO,EAAEH,YAAY,CAACG,OAAO;EAC7BC,KAAK,EAAEJ,YAAY,CAACI,KAAK;EACzBC,IAAI,EAAEL,YAAY,CAACK,IAAI;EACvBC,IAAI,EAAEN,YAAY,CAACM,IAAI;EACvBC,KAAK,EAAEP,YAAY,CAACO,KAAK;EACzBC,IAAI,EAAER,YAAY,CAACQ;CACpB;AAED;;;;AAIA,OAAM,SAAUC,sBAAsBA,CACpCC,KAAyB;EAEzB,IAAIA,KAAK,IAAI,IAAI,EAAE;IACjB;IACA,OAAOC,SAAS;;EAGlB,MAAMC,gBAAgB,GAAGX,WAAW,CAACS,KAAK,CAACG,WAAW,EAAE,CAAC;EAEzD,IAAID,gBAAgB,IAAI,IAAI,EAAE;IAC5Bb,IAAI,CAACe,IAAI,CACP,sBAAsBJ,KAAK,sBAAsBK,MAAM,CAACC,IAAI,CAACf,WAAW,CAAC,iBAAiB,CAC3F;IACD,OAAOD,YAAY,CAACK,IAAI;;EAG1B,OAAOO,gBAAgB;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}