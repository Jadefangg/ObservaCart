{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, metrics, trace } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport * as shimmer from './shimmer';\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nexport class InstrumentationAbstract {\n  instrumentationName;\n  instrumentationVersion;\n  _config = {};\n  _tracer;\n  _meter;\n  _logger;\n  _diag;\n  constructor(instrumentationName, instrumentationVersion, config) {\n    this.instrumentationName = instrumentationName;\n    this.instrumentationVersion = instrumentationVersion;\n    this.setConfig(config);\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName\n    });\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._logger = logs.getLogger(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n  /* Api to wrap instrumented method */\n  _wrap = shimmer.wrap;\n  /* Api to unwrap instrumented methods */\n  _unwrap = shimmer.unwrap;\n  /* Api to mass wrap instrumented method */\n  _massWrap = shimmer.massWrap;\n  /* Api to mass unwrap instrumented methods */\n  _massUnwrap = shimmer.massUnwrap;\n  /* Returns meter */\n  get meter() {\n    return this._meter;\n  }\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  setMeterProvider(meterProvider) {\n    this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n  /* Returns logger */\n  get logger() {\n    return this._logger;\n  }\n  /**\n   * Sets LoggerProvider to this plugin\n   * @param loggerProvider\n   */\n  setLoggerProvider(loggerProvider) {\n    this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);\n  }\n  /**\n   * @experimental\n   *\n   * Get module definitions defined by {@link init}.\n   * This can be used for experimental compile-time instrumentation.\n   *\n   * @returns an array of {@link InstrumentationModuleDefinition}\n   */\n  getModuleDefinitions() {\n    const initResult = this.init() ?? [];\n    if (!Array.isArray(initResult)) {\n      return [initResult];\n    }\n    return initResult;\n  }\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  _updateMetricInstruments() {\n    return;\n  }\n  /* Returns InstrumentationConfig */\n  getConfig() {\n    return this._config;\n  }\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param config\n   */\n  setConfig(config) {\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = {\n      enabled: true,\n      ...config\n    };\n  }\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  setTracerProvider(tracerProvider) {\n    this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n  }\n  /* Returns tracer */\n  get tracer() {\n    return this._tracer;\n  }\n  /**\n   * Execute span customization hook, if configured, and log any errors.\n   * Any semantics of the trigger and info are defined by the specific instrumentation.\n   * @param hookHandler The optional hook handler which the user has configured via instrumentation config\n   * @param triggerName The name of the trigger for executing the hook for logging purposes\n   * @param span The span to which the hook should be applied\n   * @param info The info object to be passed to the hook, with useful data the hook may use\n   */\n  _runSpanCustomizationHook(hookHandler, triggerName, span, info) {\n    if (!hookHandler) {\n      return;\n    }\n    try {\n      hookHandler(span, info);\n    } catch (e) {\n      this._diag.error(`Error running span customization hook due to exception in handler`, {\n        triggerName\n      }, e);\n    }\n  }\n}","map":{"version":3,"names":["diag","metrics","trace","logs","shimmer","InstrumentationAbstract","instrumentationName","instrumentationVersion","_config","_tracer","_meter","_logger","_diag","constructor","config","setConfig","createComponentLogger","namespace","getTracer","getMeter","getLogger","_updateMetricInstruments","_wrap","wrap","_unwrap","unwrap","_massWrap","massWrap","_massUnwrap","massUnwrap","meter","setMeterProvider","meterProvider","logger","setLoggerProvider","loggerProvider","getModuleDefinitions","initResult","init","Array","isArray","getConfig","enabled","setTracerProvider","tracerProvider","tracer","_runSpanCustomizationHook","hookHandler","triggerName","span","info","e","error"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\instrumentation\\src\\instrumentation.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  DiagLogger,\n  metrics,\n  Meter,\n  MeterProvider,\n  trace,\n  Tracer,\n  TracerProvider,\n  Span,\n} from '@opentelemetry/api';\nimport { Logger, LoggerProvider, logs } from '@opentelemetry/api-logs';\nimport * as shimmer from './shimmer';\nimport {\n  InstrumentationModuleDefinition,\n  Instrumentation,\n  InstrumentationConfig,\n  SpanCustomizationHook,\n} from './types';\n\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nexport abstract class InstrumentationAbstract<\n  ConfigType extends InstrumentationConfig = InstrumentationConfig,\n> implements Instrumentation<ConfigType>\n{\n  protected _config: ConfigType = {} as ConfigType;\n\n  private _tracer: Tracer;\n  private _meter: Meter;\n  private _logger: Logger;\n  protected _diag: DiagLogger;\n\n  constructor(\n    public readonly instrumentationName: string,\n    public readonly instrumentationVersion: string,\n    config: ConfigType\n  ) {\n    this.setConfig(config);\n\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName,\n    });\n\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._logger = logs.getLogger(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n\n  /* Api to wrap instrumented method */\n  protected _wrap = shimmer.wrap;\n  /* Api to unwrap instrumented methods */\n  protected _unwrap = shimmer.unwrap;\n  /* Api to mass wrap instrumented method */\n  protected _massWrap = shimmer.massWrap;\n  /* Api to mass unwrap instrumented methods */\n  protected _massUnwrap = shimmer.massUnwrap;\n\n  /* Returns meter */\n  protected get meter(): Meter {\n    return this._meter;\n  }\n\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  public setMeterProvider(meterProvider: MeterProvider): void {\n    this._meter = meterProvider.getMeter(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n\n    this._updateMetricInstruments();\n  }\n\n  /* Returns logger */\n  protected get logger(): Logger {\n    return this._logger;\n  }\n\n  /**\n   * Sets LoggerProvider to this plugin\n   * @param loggerProvider\n   */\n  public setLoggerProvider(loggerProvider: LoggerProvider): void {\n    this._logger = loggerProvider.getLogger(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /**\n   * @experimental\n   *\n   * Get module definitions defined by {@link init}.\n   * This can be used for experimental compile-time instrumentation.\n   *\n   * @returns an array of {@link InstrumentationModuleDefinition}\n   */\n  public getModuleDefinitions(): InstrumentationModuleDefinition[] {\n    const initResult = this.init() ?? [];\n    if (!Array.isArray(initResult)) {\n      return [initResult];\n    }\n\n    return initResult;\n  }\n\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  protected _updateMetricInstruments(): void {\n    return;\n  }\n\n  /* Returns InstrumentationConfig */\n  public getConfig(): ConfigType {\n    return this._config;\n  }\n\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param config\n   */\n  public setConfig(config: ConfigType): void {\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = {\n      enabled: true,\n      ...config,\n    };\n  }\n\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  public setTracerProvider(tracerProvider: TracerProvider): void {\n    this._tracer = tracerProvider.getTracer(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /* Returns tracer */\n  protected get tracer(): Tracer {\n    return this._tracer;\n  }\n\n  /* Enable plugin */\n  public abstract enable(): void;\n\n  /* Disable plugin */\n  public abstract disable(): void;\n\n  /**\n   * Init method in which plugin should define _modules and patches for\n   * methods.\n   */\n  protected abstract init():\n    | InstrumentationModuleDefinition\n    | InstrumentationModuleDefinition[]\n    | void;\n\n  /**\n   * Execute span customization hook, if configured, and log any errors.\n   * Any semantics of the trigger and info are defined by the specific instrumentation.\n   * @param hookHandler The optional hook handler which the user has configured via instrumentation config\n   * @param triggerName The name of the trigger for executing the hook for logging purposes\n   * @param span The span to which the hook should be applied\n   * @param info The info object to be passed to the hook, with useful data the hook may use\n   */\n  protected _runSpanCustomizationHook<SpanCustomizationInfoType>(\n    hookHandler: SpanCustomizationHook<SpanCustomizationInfoType> | undefined,\n    triggerName: string,\n    span: Span,\n    info: SpanCustomizationInfoType\n  ) {\n    if (!hookHandler) {\n      return;\n    }\n\n    try {\n      hookHandler(span, info);\n    } catch (e) {\n      this._diag.error(\n        `Error running span customization hook due to exception in handler`,\n        { triggerName },\n        e\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}