{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport * as otlpTypes from '../../types';\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param onSuccess\n * @param onError\n */\nexport function sendWithBeacon(body, url, blobPropertyBag, onSuccess, onError) {\n  if (navigator.sendBeacon(url, new Blob([body], blobPropertyBag))) {\n    diag.debug('sendBeacon - can send', body);\n    onSuccess();\n  } else {\n    var error = new otlpTypes.OTLPExporterError(\"sendBeacon - cannot send \" + body);\n    onError(error);\n  }\n}\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param onSuccess\n * @param onError\n */\nexport function sendWithXhr(body, url, headers, onSuccess, onError) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('POST', url);\n  var defaultHeaders = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  };\n  Object.entries(__assign(__assign({}, defaultHeaders), headers)).forEach(function (_a) {\n    var k = _a[0],\n      v = _a[1];\n    xhr.setRequestHeader(k, v);\n  });\n  xhr.send(body);\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      if (xhr.status >= 200 && xhr.status <= 299) {\n        diag.debug('xhr success', body);\n        onSuccess();\n      } else {\n        var error = new otlpTypes.OTLPExporterError(\"Failed to export with XHR (status: \" + xhr.status + \")\", xhr.status);\n        onError(error);\n      }\n    }\n  };\n}","map":{"version":3,"names":["diag","otlpTypes","sendWithBeacon","body","url","blobPropertyBag","onSuccess","onError","navigator","sendBeacon","Blob","debug","error","OTLPExporterError","sendWithXhr","headers","xhr","XMLHttpRequest","open","defaultHeaders","Object","entries","__assign","forEach","_a","k","v","setRequestHeader","send","onreadystatechange","readyState","DONE","status"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\exporter-otlp-http\\src\\platform\\browser\\util.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport * as otlpTypes from '../../types';\n\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param onSuccess\n * @param onError\n */\nexport function sendWithBeacon(\n  body: string,\n  url: string,\n  blobPropertyBag: BlobPropertyBag,\n  onSuccess: () => void,\n  onError: (error: otlpTypes.OTLPExporterError) => void\n): void {\n  if (navigator.sendBeacon(url, new Blob([body], blobPropertyBag))) {\n    diag.debug('sendBeacon - can send', body);\n    onSuccess();\n  } else {\n    const error = new otlpTypes.OTLPExporterError(\n      `sendBeacon - cannot send ${body}`\n    );\n    onError(error);\n  }\n}\n\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param onSuccess\n * @param onError\n */\nexport function sendWithXhr(\n  body: string,\n  url: string,\n  headers: Record<string, string>,\n  onSuccess: () => void,\n  onError: (error: otlpTypes.OTLPExporterError) => void\n): void {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', url);\n\n  const defaultHeaders = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  };\n\n  Object.entries({\n    ...defaultHeaders,\n    ...headers,\n  }).forEach(([k, v]) => {\n    xhr.setRequestHeader(k, v);\n  });\n\n  xhr.send(body);\n\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      if (xhr.status >= 200 && xhr.status <= 299) {\n        diag.debug('xhr success', body);\n        onSuccess();\n      } else {\n        const error = new otlpTypes.OTLPExporterError(\n          `Failed to export with XHR (status: ${xhr.status})`,\n          xhr.status\n        );\n\n        onError(error);\n      }\n    }\n  };\n}\n"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAeA,SAASA,IAAI,QAAQ,oBAAoB;AACzC,OAAO,KAAKC,SAAS,MAAM,aAAa;AAExC;;;;;;AAMA,OAAM,SAAUC,cAAcA,CAC5BC,IAAY,EACZC,GAAW,EACXC,eAAgC,EAChCC,SAAqB,EACrBC,OAAqD;EAErD,IAAIC,SAAS,CAACC,UAAU,CAACL,GAAG,EAAE,IAAIM,IAAI,CAAC,CAACP,IAAI,CAAC,EAAEE,eAAe,CAAC,CAAC,EAAE;IAChEL,IAAI,CAACW,KAAK,CAAC,uBAAuB,EAAER,IAAI,CAAC;IACzCG,SAAS,EAAE;GACZ,MAAM;IACL,IAAMM,KAAK,GAAG,IAAIX,SAAS,CAACY,iBAAiB,CAC3C,8BAA4BV,IAAM,CACnC;IACDI,OAAO,CAACK,KAAK,CAAC;;AAElB;AAEA;;;;;;;AAOA,OAAM,SAAUE,WAAWA,CACzBX,IAAY,EACZC,GAAW,EACXW,OAA+B,EAC/BT,SAAqB,EACrBC,OAAqD;EAErD,IAAMS,GAAG,GAAG,IAAIC,cAAc,EAAE;EAChCD,GAAG,CAACE,IAAI,CAAC,MAAM,EAAEd,GAAG,CAAC;EAErB,IAAMe,cAAc,GAAG;IACrB,QAAQ,EAAE,kBAAkB;IAC5B,cAAc,EAAE;GACjB;EAEDC,MAAM,CAACC,OAAO,CAAAC,QAAA,CAAAA,QAAA,KACTH,cAAc,GACdJ,OAAO,EACV,CAACQ,OAAO,CAAC,UAACC,EAAM;QAALC,CAAC,GAAAD,EAAA;MAAEE,CAAC,GAAAF,EAAA;IACfR,GAAG,CAACW,gBAAgB,CAACF,CAAC,EAAEC,CAAC,CAAC;EAC5B,CAAC,CAAC;EAEFV,GAAG,CAACY,IAAI,CAACzB,IAAI,CAAC;EAEda,GAAG,CAACa,kBAAkB,GAAG;IACvB,IAAIb,GAAG,CAACc,UAAU,KAAKb,cAAc,CAACc,IAAI,EAAE;MAC1C,IAAIf,GAAG,CAACgB,MAAM,IAAI,GAAG,IAAIhB,GAAG,CAACgB,MAAM,IAAI,GAAG,EAAE;QAC1ChC,IAAI,CAACW,KAAK,CAAC,aAAa,EAAER,IAAI,CAAC;QAC/BG,SAAS,EAAE;OACZ,MAAM;QACL,IAAMM,KAAK,GAAG,IAAIX,SAAS,CAACY,iBAAiB,CAC3C,wCAAsCG,GAAG,CAACgB,MAAM,MAAG,EACnDhB,GAAG,CAACgB,MAAM,CACX;QAEDzB,OAAO,CAACK,KAAK,CAAC;;;EAGpB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}