{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */function () {\n  function MultiSpanProcessor(_spanProcessors) {\n    this._spanProcessors = _spanProcessors;\n  }\n  MultiSpanProcessor.prototype.forceFlush = function () {\n    var promises = [];\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      promises.push(spanProcessor.forceFlush());\n    }\n    return new Promise(function (resolve) {\n      Promise.all(promises).then(function () {\n        resolve();\n      }).catch(function (error) {\n        globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n        resolve();\n      });\n    });\n  };\n  MultiSpanProcessor.prototype.onStart = function (span, context) {\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      spanProcessor.onStart(span, context);\n    }\n  };\n  MultiSpanProcessor.prototype.onEnd = function (span) {\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      spanProcessor.onEnd(span);\n    }\n  };\n  MultiSpanProcessor.prototype.shutdown = function () {\n    var promises = [];\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      promises.push(spanProcessor.shutdown());\n    }\n    return new Promise(function (resolve, reject) {\n      Promise.all(promises).then(function () {\n        resolve();\n      }, reject);\n    });\n  };\n  return MultiSpanProcessor;\n}();\nexport { MultiSpanProcessor };","map":{"version":3,"names":["globalErrorHandler","MultiSpanProcessor","_spanProcessors","prototype","forceFlush","promises","_i","_a","length","spanProcessor","push","Promise","resolve","all","then","catch","error","Error","onStart","span","context","onEnd","shutdown","reject"],"sources":["../../src/MultiSpanProcessor.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA,SAASA,kBAAkB,QAAQ,qBAAqB;AAKxD;;;;AAIA,IAAAC,kBAAA;EACE,SAAAA,mBAA6BC,eAAgC;IAAhC,KAAAA,eAAe,GAAfA,eAAe;EAAoB;EAEhED,kBAAA,CAAAE,SAAA,CAAAC,UAAU,GAAV;IACE,IAAMC,QAAQ,GAAoB,EAAE;IAEpC,KAA4B,IAAAC,EAAA,IAAoB,EAApBC,EAAA,OAAI,CAACL,eAAe,EAApBI,EAAA,GAAAC,EAAA,CAAAC,MAAoB,EAApBF,EAAA,EAAoB,EAAE;MAA7C,IAAMG,aAAa,GAAAF,EAAA,CAAAD,EAAA;MACtBD,QAAQ,CAACK,IAAI,CAACD,aAAa,CAACL,UAAU,EAAE,CAAC;;IAE3C,OAAO,IAAIO,OAAO,CAAC,UAAAC,OAAO;MACxBD,OAAO,CAACE,GAAG,CAACR,QAAQ,CAAC,CAClBS,IAAI,CAAC;QACJF,OAAO,EAAE;MACX,CAAC,CAAC,CACDG,KAAK,CAAC,UAAAC,KAAK;QACVhB,kBAAkB,CAChBgB,KAAK,IAAI,IAAIC,KAAK,CAAC,uCAAuC,CAAC,CAC5D;QACDL,OAAO,EAAE;MACX,CAAC,CAAC;IACN,CAAC,CAAC;EACJ,CAAC;EAEDX,kBAAA,CAAAE,SAAA,CAAAe,OAAO,GAAP,UAAQC,IAAU,EAAEC,OAAgB;IAClC,KAA4B,IAAAd,EAAA,IAAoB,EAApBC,EAAA,OAAI,CAACL,eAAe,EAApBI,EAAA,GAAAC,EAAA,CAAAC,MAAoB,EAApBF,EAAA,EAAoB,EAAE;MAA7C,IAAMG,aAAa,GAAAF,EAAA,CAAAD,EAAA;MACtBG,aAAa,CAACS,OAAO,CAACC,IAAI,EAAEC,OAAO,CAAC;;EAExC,CAAC;EAEDnB,kBAAA,CAAAE,SAAA,CAAAkB,KAAK,GAAL,UAAMF,IAAkB;IACtB,KAA4B,IAAAb,EAAA,IAAoB,EAApBC,EAAA,OAAI,CAACL,eAAe,EAApBI,EAAA,GAAAC,EAAA,CAAAC,MAAoB,EAApBF,EAAA,EAAoB,EAAE;MAA7C,IAAMG,aAAa,GAAAF,EAAA,CAAAD,EAAA;MACtBG,aAAa,CAACY,KAAK,CAACF,IAAI,CAAC;;EAE7B,CAAC;EAEDlB,kBAAA,CAAAE,SAAA,CAAAmB,QAAQ,GAAR;IACE,IAAMjB,QAAQ,GAAoB,EAAE;IAEpC,KAA4B,IAAAC,EAAA,IAAoB,EAApBC,EAAA,OAAI,CAACL,eAAe,EAApBI,EAAA,GAAAC,EAAA,CAAAC,MAAoB,EAApBF,EAAA,EAAoB,EAAE;MAA7C,IAAMG,aAAa,GAAAF,EAAA,CAAAD,EAAA;MACtBD,QAAQ,CAACK,IAAI,CAACD,aAAa,CAACa,QAAQ,EAAE,CAAC;;IAEzC,OAAO,IAAIX,OAAO,CAAC,UAACC,OAAO,EAAEW,MAAM;MACjCZ,OAAO,CAACE,GAAG,CAACR,QAAQ,CAAC,CAACS,IAAI,CAAC;QACzBF,OAAO,EAAE;MACX,CAAC,EAAEW,MAAM,CAAC;IACZ,CAAC,CAAC;EACJ,CAAC;EACH,OAAAtB,kBAAC;AAAD,CAAC,CA/CD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}