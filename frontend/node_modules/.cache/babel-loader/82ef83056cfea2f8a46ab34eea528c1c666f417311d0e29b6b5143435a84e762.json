{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { trace, metrics } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport { disableInstrumentations, enableInstrumentations } from './autoLoaderUtils';\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(options) {\n  const tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  const meterProvider = options.meterProvider || metrics.getMeterProvider();\n  const loggerProvider = options.loggerProvider || logs.getLoggerProvider();\n  const instrumentations = options.instrumentations?.flat() ?? [];\n  enableInstrumentations(instrumentations, tracerProvider, meterProvider, loggerProvider);\n  return () => {\n    disableInstrumentations(instrumentations);\n  };\n}","map":{"version":3,"names":["trace","metrics","logs","disableInstrumentations","enableInstrumentations","registerInstrumentations","options","tracerProvider","getTracerProvider","meterProvider","getMeterProvider","loggerProvider","getLoggerProvider","instrumentations","flat"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\instrumentation\\src\\autoLoader.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trace, metrics } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport {\n  disableInstrumentations,\n  enableInstrumentations,\n} from './autoLoaderUtils';\nimport { AutoLoaderOptions } from './types_internal';\n\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(\n  options: AutoLoaderOptions\n): () => void {\n  const tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  const meterProvider = options.meterProvider || metrics.getMeterProvider();\n  const loggerProvider = options.loggerProvider || logs.getLoggerProvider();\n  const instrumentations = options.instrumentations?.flat() ?? [];\n\n  enableInstrumentations(\n    instrumentations,\n    tracerProvider,\n    meterProvider,\n    loggerProvider\n  );\n\n  return () => {\n    disableInstrumentations(instrumentations);\n  };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,KAAK,EAAEC,OAAO,QAAQ,oBAAoB;AACnD,SAASC,IAAI,QAAQ,yBAAyB;AAC9C,SACEC,uBAAuB,EACvBC,sBAAsB,QACjB,mBAAmB;AAG1B;;;;;;AAMA,OAAM,SAAUC,wBAAwBA,CACtCC,OAA0B;EAE1B,MAAMC,cAAc,GAAGD,OAAO,CAACC,cAAc,IAAIP,KAAK,CAACQ,iBAAiB,EAAE;EAC1E,MAAMC,aAAa,GAAGH,OAAO,CAACG,aAAa,IAAIR,OAAO,CAACS,gBAAgB,EAAE;EACzE,MAAMC,cAAc,GAAGL,OAAO,CAACK,cAAc,IAAIT,IAAI,CAACU,iBAAiB,EAAE;EACzE,MAAMC,gBAAgB,GAAGP,OAAO,CAACO,gBAAgB,EAAEC,IAAI,EAAE,IAAI,EAAE;EAE/DV,sBAAsB,CACpBS,gBAAgB,EAChBN,cAAc,EACdE,aAAa,EACbE,cAAc,CACf;EAED,OAAO,MAAK;IACVR,uBAAuB,CAACU,gBAAgB,CAAC;EAC3C,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}