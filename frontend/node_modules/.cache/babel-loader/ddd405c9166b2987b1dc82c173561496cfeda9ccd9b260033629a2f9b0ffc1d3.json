{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, TraceFlags } from '@opentelemetry/api';\nimport { ExportResultCode, getEnv, globalErrorHandler, suppressTracing, unrefTimer } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */function () {\n  function BatchSpanProcessorBase(_exporter, config) {\n    this._exporter = _exporter;\n    this._finishedSpans = [];\n    this._isShutdown = false;\n    this._shuttingDownPromise = Promise.resolve();\n    var env = getEnv();\n    this._maxExportBatchSize = typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number' ? config.maxExportBatchSize : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize = typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number' ? config.maxQueueSize : env.OTEL_BSP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis = typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number' ? config.scheduledDelayMillis : env.OTEL_BSP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis = typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number' ? config.exportTimeoutMillis : env.OTEL_BSP_EXPORT_TIMEOUT;\n  }\n  BatchSpanProcessorBase.prototype.forceFlush = function () {\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n    return this._flushAll();\n  };\n  // does nothing.\n  BatchSpanProcessorBase.prototype.onStart = function (_span) {};\n  BatchSpanProcessorBase.prototype.onEnd = function (span) {\n    if (this._isShutdown) {\n      return;\n    }\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n    this._addToBuffer(span);\n  };\n  BatchSpanProcessorBase.prototype.shutdown = function () {\n    var _this = this;\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n    this._isShutdown = true;\n    this._shuttingDownPromise = new Promise(function (resolve, reject) {\n      Promise.resolve().then(function () {\n        return _this.onShutdown();\n      }).then(function () {\n        return _this._flushAll();\n      }).then(function () {\n        return _this._exporter.shutdown();\n      }).then(resolve).catch(function (e) {\n        reject(e);\n      });\n    });\n    return this._shuttingDownPromise;\n  };\n  /** Add a span in the buffer. */\n  BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n    if (this._finishedSpans.length >= this._maxQueueSize) {\n      // limit reached, drop span\n      return;\n    }\n    this._finishedSpans.push(span);\n    this._maybeStartTimer();\n  };\n  /**\n   * Send all spans to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  BatchSpanProcessorBase.prototype._flushAll = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var promises = [];\n      // calculate number of batches\n      var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n      for (var i = 0, j = count; i < j; i++) {\n        promises.push(_this._flushOneBatch());\n      }\n      Promise.all(promises).then(function () {\n        resolve();\n      }).catch(reject);\n    });\n  };\n  BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n    var _this = this;\n    this._clearTimer();\n    if (this._finishedSpans.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise(function (resolve, reject) {\n      var timer = setTimeout(function () {\n        // don't wait anymore for export, this way the next batch can start\n        reject(new Error('Timeout'));\n      }, _this._exportTimeoutMillis);\n      // prevent downstream exporter calls from generating spans\n      context.with(suppressTracing(context.active()), function () {\n        // Reset the finished spans buffer here because the next invocations of the _flush method\n        // could pass the same finished spans to the exporter if the buffer is cleared\n        // outside of the execution of this callback.\n        _this._exporter.export(_this._finishedSpans.splice(0, _this._maxExportBatchSize), function (result) {\n          var _a;\n          clearTimeout(timer);\n          if (result.code === ExportResultCode.SUCCESS) {\n            resolve();\n          } else {\n            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n          }\n        });\n      });\n    });\n  };\n  BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n    var _this = this;\n    if (this._timer !== undefined) return;\n    this._timer = setTimeout(function () {\n      _this._flushOneBatch().then(function () {\n        if (_this._finishedSpans.length > 0) {\n          _this._clearTimer();\n          _this._maybeStartTimer();\n        }\n      }).catch(function (e) {\n        globalErrorHandler(e);\n      });\n    }, this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  };\n  BatchSpanProcessorBase.prototype._clearTimer = function () {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  };\n  return BatchSpanProcessorBase;\n}();\nexport { BatchSpanProcessorBase };","map":{"version":3,"names":["context","TraceFlags","ExportResultCode","getEnv","globalErrorHandler","suppressTracing","unrefTimer","BatchSpanProcessorBase","_exporter","config","_finishedSpans","_isShutdown","_shuttingDownPromise","Promise","resolve","env","_maxExportBatchSize","maxExportBatchSize","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","_maxQueueSize","maxQueueSize","OTEL_BSP_MAX_QUEUE_SIZE","_scheduledDelayMillis","scheduledDelayMillis","OTEL_BSP_SCHEDULE_DELAY","_exportTimeoutMillis","exportTimeoutMillis","OTEL_BSP_EXPORT_TIMEOUT","prototype","forceFlush","_flushAll","onStart","_span","onEnd","span","spanContext","traceFlags","SAMPLED","_addToBuffer","shutdown","_this","reject","then","onShutdown","catch","e","length","push","_maybeStartTimer","promises","count","Math","ceil","i","j","_flushOneBatch","all","_clearTimer","timer","setTimeout","Error","with","active","export","splice","result","clearTimeout","code","SUCCESS","_a","error","_timer","undefined"],"sources":["../../../src/export/BatchSpanProcessorBase.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}