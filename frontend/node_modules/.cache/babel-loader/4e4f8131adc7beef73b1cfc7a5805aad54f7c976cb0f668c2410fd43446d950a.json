{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { diag } from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api-metrics';\n/**\n * This class represent the base to BoundInstrument, which is responsible for generating\n * the TimeSeries.\n */\nvar BaseBoundInstrument = /** @class */function () {\n  function BaseBoundInstrument(labels, _disabled, _valueType, _aggregator) {\n    this._disabled = _disabled;\n    this._valueType = _valueType;\n    this._aggregator = _aggregator;\n    this._labels = labels;\n  }\n  BaseBoundInstrument.prototype.update = function (value) {\n    if (this._disabled) return;\n    if (typeof value !== 'number') {\n      diag.error(\"Metric cannot accept a non-number value for \" + Object.values(this._labels) + \".\");\n      return;\n    }\n    if (this._valueType === api.ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\"INT value type cannot accept a floating-point value for \" + Object.values(this._labels) + \", ignoring the fractional digits.\");\n      value = Math.trunc(value);\n    }\n    this._aggregator.update(value);\n  };\n  BaseBoundInstrument.prototype.getLabels = function () {\n    return this._labels;\n  };\n  BaseBoundInstrument.prototype.getAggregator = function () {\n    return this._aggregator;\n  };\n  return BaseBoundInstrument;\n}();\nexport { BaseBoundInstrument };\n/**\n * BoundCounter allows the SDK to observe/record a single metric event. The\n * value of single instrument in the `Counter` associated with specified Labels.\n */\nvar BoundCounter = /** @class */function (_super) {\n  __extends(BoundCounter, _super);\n  function BoundCounter(labels, disabled, valueType, aggregator) {\n    return _super.call(this, labels, disabled, valueType, aggregator) || this;\n  }\n  BoundCounter.prototype.add = function (value) {\n    if (value < 0) {\n      diag.error(\"Counter cannot descend for \" + Object.values(this._labels));\n      return;\n    }\n    this.update(value);\n  };\n  return BoundCounter;\n}(BaseBoundInstrument);\nexport { BoundCounter };\n/**\n * BoundUpDownCounter allows the SDK to observe/record a single metric event.\n * The value of single instrument in the `UpDownCounter` associated with\n * specified Labels.\n */\nvar BoundUpDownCounter = /** @class */function (_super) {\n  __extends(BoundUpDownCounter, _super);\n  function BoundUpDownCounter(labels, disabled, valueType, aggregator) {\n    return _super.call(this, labels, disabled, valueType, aggregator) || this;\n  }\n  BoundUpDownCounter.prototype.add = function (value) {\n    this.update(value);\n  };\n  return BoundUpDownCounter;\n}(BaseBoundInstrument);\nexport { BoundUpDownCounter };\n/**\n * BoundMeasure is an implementation of the {@link BoundMeasure} interface.\n */\nvar BoundValueRecorder = /** @class */function (_super) {\n  __extends(BoundValueRecorder, _super);\n  function BoundValueRecorder(labels, disabled, valueType, aggregator) {\n    return _super.call(this, labels, disabled, valueType, aggregator) || this;\n  }\n  BoundValueRecorder.prototype.record = function (value) {\n    this.update(value);\n  };\n  return BoundValueRecorder;\n}(BaseBoundInstrument);\nexport { BoundValueRecorder };\n/**\n * BoundObserver is an implementation of the {@link BoundObserver} interface.\n */\nvar BoundObserver = /** @class */function (_super) {\n  __extends(BoundObserver, _super);\n  function BoundObserver(labels, disabled, valueType, aggregator) {\n    return _super.call(this, labels, disabled, valueType, aggregator) || this;\n  }\n  return BoundObserver;\n}(BaseBoundInstrument);\nexport { BoundObserver };","map":{"version":3,"names":["diag","api","BaseBoundInstrument","labels","_disabled","_valueType","_aggregator","_labels","prototype","update","value","error","Object","values","ValueType","INT","Number","isInteger","warn","Math","trunc","getLabels","getAggregator","BoundCounter","_super","__extends","disabled","valueType","aggregator","call","add","BoundUpDownCounter","BoundValueRecorder","record","BoundObserver"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\sdk-metrics-base\\src\\BoundInstrument.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api-metrics';\nimport { Aggregator } from './export/types';\n\n/**\n * This class represent the base to BoundInstrument, which is responsible for generating\n * the TimeSeries.\n */\nexport class BaseBoundInstrument {\n  protected _labels: api.Labels;\n\n  constructor(\n    labels: api.Labels,\n    private readonly _disabled: boolean,\n    private readonly _valueType: api.ValueType,\n    private readonly _aggregator: Aggregator\n  ) {\n    this._labels = labels;\n  }\n\n  update(value: number): void {\n    if (this._disabled) return;\n    if (typeof value !== 'number') {\n      diag.error(\n        `Metric cannot accept a non-number value for ${Object.values(\n          this._labels\n        )}.`\n      );\n      return;\n    }\n\n    if (this._valueType === api.ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${Object.values(\n          this._labels\n        )}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n    }\n\n    this._aggregator.update(value);\n  }\n\n  getLabels(): api.Labels {\n    return this._labels;\n  }\n\n  getAggregator(): Aggregator {\n    return this._aggregator;\n  }\n}\n\n/**\n * BoundCounter allows the SDK to observe/record a single metric event. The\n * value of single instrument in the `Counter` associated with specified Labels.\n */\nexport class BoundCounter\n  extends BaseBoundInstrument\n  implements api.BoundCounter {\n  constructor(\n    labels: api.Labels,\n    disabled: boolean,\n    valueType: api.ValueType,\n    aggregator: Aggregator\n  ) {\n    super(labels, disabled, valueType, aggregator);\n  }\n\n  add(value: number): void {\n    if (value < 0) {\n      diag.error(`Counter cannot descend for ${Object.values(this._labels)}`);\n      return;\n    }\n\n    this.update(value);\n  }\n}\n\n/**\n * BoundUpDownCounter allows the SDK to observe/record a single metric event.\n * The value of single instrument in the `UpDownCounter` associated with\n * specified Labels.\n */\nexport class BoundUpDownCounter\n  extends BaseBoundInstrument\n  implements api.BoundCounter {\n  constructor(\n    labels: api.Labels,\n    disabled: boolean,\n    valueType: api.ValueType,\n    aggregator: Aggregator\n  ) {\n    super(labels, disabled, valueType, aggregator);\n  }\n\n  add(value: number): void {\n    this.update(value);\n  }\n}\n\n/**\n * BoundMeasure is an implementation of the {@link BoundMeasure} interface.\n */\nexport class BoundValueRecorder\n  extends BaseBoundInstrument\n  implements api.BoundValueRecorder {\n  constructor(\n    labels: api.Labels,\n    disabled: boolean,\n    valueType: api.ValueType,\n    aggregator: Aggregator\n  ) {\n    super(labels, disabled, valueType, aggregator);\n  }\n\n  record(value: number): void {\n    this.update(value);\n  }\n}\n\n/**\n * BoundObserver is an implementation of the {@link BoundObserver} interface.\n */\nexport class BoundObserver\n  extends BaseBoundInstrument\n  implements api.BoundBaseObserver {\n  constructor(\n    labels: api.Labels,\n    disabled: boolean,\n    valueType: api.ValueType,\n    aggregator: Aggregator\n  ) {\n    super(labels, disabled, valueType, aggregator);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}