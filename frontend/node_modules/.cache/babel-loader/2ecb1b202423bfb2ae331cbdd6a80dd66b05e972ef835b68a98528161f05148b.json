{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../NoopMeterProvider';\nimport { API_BACKWARDS_COMPATIBILITY_VERSION, GLOBAL_METRICS_API_KEY, makeGetter, _global } from './global-utils';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function MetricsAPI() {}\n  /** Get the singleton instance of the Metrics API */\n  MetricsAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current global meter. Returns the initialized global meter provider.\n   */\n  MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n    if (_global[GLOBAL_METRICS_API_KEY]) {\n      // global meter provider has already been set\n      return this.getMeterProvider();\n    }\n    _global[GLOBAL_METRICS_API_KEY] = makeGetter(API_BACKWARDS_COMPATIBILITY_VERSION, provider, NOOP_METER_PROVIDER);\n    return provider;\n  };\n  /**\n   * Returns the global meter provider.\n   */\n  MetricsAPI.prototype.getMeterProvider = function () {\n    var _a, _b;\n    return (_b = (_a = _global[GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_global, API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_METER_PROVIDER;\n  };\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  MetricsAPI.prototype.getMeter = function (name, version) {\n    return this.getMeterProvider().getMeter(name, version);\n  };\n  /** Remove the global meter provider */\n  MetricsAPI.prototype.disable = function () {\n    delete _global[GLOBAL_METRICS_API_KEY];\n  };\n  return MetricsAPI;\n}();\nexport { MetricsAPI };","map":{"version":3,"names":["NOOP_METER_PROVIDER","API_BACKWARDS_COMPATIBILITY_VERSION","GLOBAL_METRICS_API_KEY","makeGetter","_global","MetricsAPI","getInstance","_instance","prototype","setGlobalMeterProvider","provider","getMeterProvider","_b","_a","call","getMeter","name","version","disable"],"sources":["C:\\Users\\Sartaj\\Desktop\\ObservaCart\\observacart\\frontend\\node_modules\\@opentelemetry\\api-metrics\\src\\api\\metrics.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter } from '../types/Meter';\nimport { MeterProvider } from '../types/MeterProvider';\nimport { NOOP_METER_PROVIDER } from '../NoopMeterProvider';\nimport {\n  API_BACKWARDS_COMPATIBILITY_VERSION,\n  GLOBAL_METRICS_API_KEY,\n  makeGetter,\n  _global,\n} from './global-utils';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nexport class MetricsAPI {\n  private static _instance?: MetricsAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Metrics API */\n  public static getInstance(): MetricsAPI {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global meter. Returns the initialized global meter provider.\n   */\n  public setGlobalMeterProvider(provider: MeterProvider): MeterProvider {\n    if (_global[GLOBAL_METRICS_API_KEY]) {\n      // global meter provider has already been set\n      return this.getMeterProvider();\n    }\n\n    _global[GLOBAL_METRICS_API_KEY] = makeGetter(\n      API_BACKWARDS_COMPATIBILITY_VERSION,\n      provider,\n      NOOP_METER_PROVIDER\n    );\n\n    return provider;\n  }\n\n  /**\n   * Returns the global meter provider.\n   */\n  public getMeterProvider(): MeterProvider {\n    return (\n      _global[GLOBAL_METRICS_API_KEY]?.(API_BACKWARDS_COMPATIBILITY_VERSION) ??\n      NOOP_METER_PROVIDER\n    );\n  }\n\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  public getMeter(name: string, version?: string): Meter {\n    return this.getMeterProvider().getMeter(name, version);\n  }\n\n  /** Remove the global meter provider */\n  public disable(): void {\n    delete _global[GLOBAL_METRICS_API_KEY];\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAASA,mBAAmB,QAAQ,sBAAsB;AAC1D,SACEC,mCAAmC,EACnCC,sBAAsB,EACtBC,UAAU,EACVC,OAAO,QACF,gBAAgB;AAEvB;;;AAGA,IAAAC,UAAA;EAGE;EACA,SAAAA,WAAA,GAAuB;EAEvB;EACcA,UAAA,CAAAC,WAAW,GAAzB;IACE,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAG,IAAIF,UAAU,EAAE;;IAGnC,OAAO,IAAI,CAACE,SAAS;EACvB,CAAC;EAED;;;EAGOF,UAAA,CAAAG,SAAA,CAAAC,sBAAsB,GAA7B,UAA8BC,QAAuB;IACnD,IAAIN,OAAO,CAACF,sBAAsB,CAAC,EAAE;MACnC;MACA,OAAO,IAAI,CAACS,gBAAgB,EAAE;;IAGhCP,OAAO,CAACF,sBAAsB,CAAC,GAAGC,UAAU,CAC1CF,mCAAmC,EACnCS,QAAQ,EACRV,mBAAmB,CACpB;IAED,OAAOU,QAAQ;EACjB,CAAC;EAED;;;EAGOL,UAAA,CAAAG,SAAA,CAAAG,gBAAgB,GAAvB;;IACE,OACE,CAAAC,EAAA,IAAAC,EAAA,GAAAT,OAAO,CAACF,sBAAsB,CAAC,cAAAW,EAAA,uBAAAA,EAAA,CAAAC,IAAA,CAA/BV,OAAO,EAA2BH,mCAAmC,CAAC,cAAAW,EAAA,cAAAA,EAAA,GACtEZ,mBAAmB;EAEvB,CAAC;EAED;;;EAGOK,UAAA,CAAAG,SAAA,CAAAO,QAAQ,GAAf,UAAgBC,IAAY,EAAEC,OAAgB;IAC5C,OAAO,IAAI,CAACN,gBAAgB,EAAE,CAACI,QAAQ,CAACC,IAAI,EAAEC,OAAO,CAAC;EACxD,CAAC;EAED;EACOZ,UAAA,CAAAG,SAAA,CAAAU,OAAO,GAAd;IACE,OAAOd,OAAO,CAACF,sBAAsB,CAAC;EACxC,CAAC;EACH,OAAAG,UAAC;AAAD,CAAC,CAtDD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}